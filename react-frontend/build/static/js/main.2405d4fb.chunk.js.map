{"version":3,"sources":["components/City.js","components/Road.js","components/MainStage.js","components/Header.js","components/InfoWindow.js","App.js","reportWebVitals.js","index.js"],"names":["City","data","handleCityDrag","handleCityDrop","name","key","draggable","onDragMove","x","y","fill","radius","Road","points","startx","starty","endx","endy","stroke","MainStage","handleStageClick","cities","randSolution","lines","lastLinem","e","handleDrag","cityArray","map","item","solLineArray","i","length","push","width","window","innerWidth","height","innerHeight","background","onClick","Header","handleClearClick","className","id","InfoWindow","progress","rFact","num","solutionCount","App","useState","setLines","setCities","randSol","setRandSol","lastLine","setLastLine","setProgress","useEffect","intervalID","setInterval","newComb","sort","Math","random","tickSolution","clearInterval","r","floor","g","b","newCity","uuidv4","evt","offsetX","offsetY","starting","newLine","startName","first","newLastLine","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2405d4fb.chunk.js","sourcesContent":["import React from 'react'\nimport {Circle} from 'react-konva'\n\nconst City = ({data, handleCityDrop, handleCityDrag}) => {\n    return (\n        <>\n            <Circle\n            key={data.key}\n            name={data.key}\n            draggable\n            // onDragEnd={handleCityDrop}\n            onDragMove={handleCityDrag}\n            x={data.x}\n            y={data.y}\n            fill={data.fill}\n            radius={20}            \n            />\n        </>\n    )\n}\n\nexport default City\n","import React from 'react'\nimport { Line } from 'react-konva'\n\nconst Road = ({data}) => {\n\n    let points = [data.startx, data.starty, data.endx, data.endy]\n\n    return (\n        <Line\n        points={points}\n        stroke={'red'}\n\n        \n        />\n    )\n}\n\nexport default Road\n","import React, { useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport { Stage, Layer, Rect, Text, Circle, Line } from 'react-konva';\nimport City from './City'\nimport { v4 as uuidv4 } from 'uuid';\nimport Road from './Road';\n\n\nconst MainStage = ({ handleStageClick, cities, lines, lastLinem, randSolution }) => {\n\n    // const [lines, setLines] = useState([])\n\n    // const handleClick = (e) => {\n    //     //call handle stage click and add a line\n    //     handleStageClick(e)\n    //     let starting = cities[cities.length-1]\n\n    //     if (cities.length !== 0){\n    //         console.log(starting)\n    //         let newLine = {\n    //             key: uuidv4(),\n    //             points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n    //             stroke: 'red'\n    //         }\n\n    //         setLines([...lines, newLine])\n    //     }\n    // }\n\n    const handleCityDrop = (e) => {\n        // e.target.attrs.x = e.evt.offsetX\n        // e.target.attrs.y = e.evt.offsetY\n    }\n\n    const handleDrag = (e) => {\n        // console.log(e.target.attrs)\n        // // let line = lineArray.find((item) => item.props.data.startName === e.target.attrs.name)\n        // // console.log(lineArray)\n        // // console.log(line)\n    }\n\n\n    const cityArray = cities.map((item) => <City key={item.key} data={item} handleCityDrag={handleDrag} handleCityDrop={handleCityDrop} />)\n    // const lineArray = lines.map((item) => <Road key={item.key} data={item} />)\n\n    // const solLineArray = randSolution.map((item) => <Road key={item.key} data={item}/>)\n    let solLineArray = []\n    for (let i = 0; i < randSolution.length - 1; i++){\n        let data = {\n            startx: randSolution[i].x,\n            starty: randSolution[i].y,\n            endx: randSolution[i+1].x,\n            endy: randSolution[i+1].y,\n        }\n\n        solLineArray.push(<Road key={randSolution[i].key} data={data} />)\n    }\n\n    // console.log(cityArray.length > 0 ? 'true' : 'false')\n\n    \n\n    return (\n        <Stage width={window.innerWidth} height={(window.innerHeight) - ((window.innerHeight) * .05)} background={'black'} onClick={handleStageClick}>\n            <Layer>\n                <Rect\n                width={window.innerWidth}\n                height={(window.innerHeight) - ((window.innerHeight) * .05)}\n                x={0}\n                y={0}\n                fill={\"#D3D3D3\"}\n                \n                />\n            </Layer>\n            <Layer>\n                {solLineArray}\n                {/* {lineArray} */}\n                {/* {lastLine ? <Road key={lastLine.key} data={lastLine } /> : null} */}\n            </Layer>\n            <Layer>\n                {cityArray}\n            </Layer>\n        </Stage>\n    );\n}\n\nexport default MainStage\n","import React from 'react'\n\nconst Header = ({handleClearClick}) => {\n    return (\n        <div className=\"header\">\n            <h3>TSP - Interactive</h3>\n            <button id='clear-cities' onClick={handleClearClick}>Clear Canvas</button>\n        </div>\n    )\n}\n\nexport default Header\n","import React, { useState } from 'react'\n\nconst InfoWindow = ({ cities, progress }) => {\n\n    // const [solCount, setSolCount] = useState(0)\n\n    // function fac(n) {\n    //     return (n != 1) ? n * fac(n - 1) : 1;\n    //   }\n    // const solutionCount = (n) => {\n\n    //     return (fac(n-1))/2\n\n    // }\n    function rFact(num) {\n        if (num === 0) { return 1; }\n        else { return num * rFact(num - 1); }\n    }\n\n    function getCount(num) {\n        if (num === 0) {\n            return 0\n        } else if (num === 1) {\n            return 1\n        } else if (num === 2) {\n            return 1\n        } else {\n            return (rFact(num - 1)) / 2\n        }\n    }\n\n    let solutionCount = getCount(cities.length)\n\n    return (\n        <div className=\"info-window\">\n            <ul>\n                <li>Number of cities:</li>\n                <li>{cities.length}</li>\n                <li>Number of unique solutions:</li>\n                <li>{solutionCount}</li>\n                <li>Solutions checked: {progress > solutionCount ? solutionCount : progress}</li>\n\n            </ul>\n        </div>\n    )\n}\n\nexport default InfoWindow\n","import { useState, useEffect } from 'react'\nimport MainStage from './components/MainStage'\nimport Header from './components/Header'\nimport InfoWindow from './components/InfoWindow'\nimport { v4 as uuidv4 } from 'uuid';\nimport {shuffle} from './shuffle'\n\nfunction rFact(num) {\n  if (num === 0) { return 1; }\n  else { return num * rFact(num - 1); }\n}\n\nfunction getCount(num) {\n  if (num === 0) {\n    return 0\n  } else if (num === 1) {\n    return 1\n  } else if (num === 2) {\n    return 1\n  } else {\n    return (rFact(num - 1)) / 2\n  }\n}\n\nfunction App() {\n\n  const [lines, setLines] = useState([])\n  const [cities, setCities] = useState([])\n\n  const [randSol, setRandSol] = useState([])\n\n  const [lastLine, setLastLine] = useState(null)\n\n  const [progress, setProgress] = useState(-1)\n\n  const handleClearClick = () => {\n\n    setCities([])\n    setRandSol([])\n  }\n\n\n\n\n\n  const tickSolution = () => {\n\n    let newSol = [...cities]\n    \n\n    let newComb = newSol.sort( () => Math.random() - 0.5)\n    newComb.push(newComb[0]) //Make sure the route loops back to the start\n\n    setRandSol(newComb)\n   \n\n  }\n\n  useEffect(() => {\n\n    setProgress(progress + 1)\n\n  }, [randSol])\n\n  useEffect(() => {\n\n    if (cities.length > 0){\n      setProgress(0)\n      const intervalID = setInterval(() => {\n        tickSolution()\n      }, 200);\n    \n      return function cleanup(){\n        clearInterval(intervalID)\n      }\n    }\n  }, [cities])\n\n\n  // useEffect(() => {\n  //   const intervalId = setInterval(() => {\n  //     setLoadingStatus(ls => ls + \".\");\n  //   }, 1000);\n\n  //   return () => clearInterval(intervalId);\n  // }, []);\n\n  const handleStageClick = (e) => {\n\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n\n    \n    const newCity = {\n      key: uuidv4(),\n      name: uuidv4(),\n      x: e.evt.offsetX,\n      y: e.evt.offsetY,\n      fill: `rgb(${r},${g},${b})`,\n    }\n    setCities(() => [...cities, newCity])\n\n\n    let starting = cities[cities.length-1]\n\n    // console.log(cities.length)\n\n    if (cities.length !== 0) {\n\n      let newLine = {\n        key: uuidv4(),\n        startName: starting.name,\n        points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n        stroke: 'red'\n      } \n\n      if (cities.length >= 2) {\n\n        let first = cities[0]\n\n        let newLastLine = {\n          key: uuidv4(),\n          points: [first.x, first.y, e.evt.offsetX, e.evt.offsetY],\n          stroke: 'red'\n        }\n\n        setLastLine(newLastLine)\n\n      }\n\n      setLines([...lines, newLine])\n    } \n\n\n  }\n\n\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <Header handleClearClick={handleClearClick} />\n      <InfoWindow progress={progress} cities={cities} />\n      <MainStage\n      handleStageClick={handleStageClick}\n      cities={cities}\n      lines={lines}\n\n      randSolution={randSol}\n      lastLine={lastLine}\n      \n      \n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}