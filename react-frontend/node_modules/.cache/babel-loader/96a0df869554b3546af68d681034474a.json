{"ast":null,"code":"var _jsxFileName = \"/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport MainStage from './components/MainStage';\nimport Header from './components/Header';\nimport InfoWindow from './components/InfoWindow';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction rFact(num) {\n  if (num === 0) {\n    return 1;\n  } else {\n    return num * rFact(num - 1);\n  }\n}\n\nfunction getCount(num) {\n  if (num === 0) {\n    return 0;\n  } else if (num === 1) {\n    return 1;\n  } else if (num === 2) {\n    return 1;\n  } else {\n    return rFact(num - 1) / 2;\n  }\n}\n\nfunction App() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n  const [lines, setLines] = useState([]);\n\n  const handleClick = e => {\n    //call handle stage click and add a line\n    handleStageClick(e);\n    let starting = cities[cities.length - 1];\n\n    if (cities.length !== 0) {\n      console.log(starting);\n      let newLine = {\n        key: uuidv4(),\n        points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n        stroke: 'red'\n      };\n      setLines([...lines, newLine]);\n    }\n  };\n\n  const handleClearClick = () => {\n    setCities([]);\n  };\n\n  const handleStageClick = e => {\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n    const newCity = {\n      key: uuidv4(),\n      name: uuidv4(),\n      x: e.evt.offsetX,\n      y: e.evt.offsetY,\n      fill: `rgb(${r},${g},${b})`\n    };\n    setCities(() => [...cities, newCity]);\n    console.log(cities.length); //Count will always be one less than reality because async...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      handleClearClick: handleClearClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoWindow, {\n      cities: cities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainStage, {\n      handleStageClick: handleStageClick,\n      cities: cities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"JKEvFyN5SXle12Wjmc5QhNG6slA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/App.js"],"names":["useState","useEffect","MainStage","Header","InfoWindow","v4","uuidv4","rFact","num","getCount","App","cities","setCities","lines","setLines","handleClick","e","handleStageClick","starting","length","console","log","newLine","key","points","x","y","evt","offsetX","offsetY","stroke","handleClearClick","r","Math","floor","random","g","b","newCity","name","fill"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport MainStage from './components/MainStage'\nimport Header from './components/Header'\nimport InfoWindow from './components/InfoWindow'\nimport { v4 as uuidv4 } from 'uuid';\n\n\nfunction rFact(num)\n{\n    if (num === 0)\n      { return 1; }\n    else\n      { return num * rFact( num - 1 ); }\n}\n\nfunction getCount(num){\n  if (num === 0){\n    return 0\n  } else if (num === 1) {\n    return 1\n  }else if (num === 2){\n    return 1\n  }else{\n    return (rFact(num-1))/2\n  }\n}\n\nfunction App() {\n\n\n  const [cities, setCities] = useState([])\n  \n  const [lines, setLines] = useState([])\n\n  const handleClick = (e) => {\n      //call handle stage click and add a line\n      handleStageClick(e)\n      let starting = cities[cities.length-1]\n\n      if (cities.length !== 0){\n          console.log(starting)\n          let newLine = {\n              key: uuidv4(),\n              points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n              stroke: 'red'\n          }\n  \n          setLines([...lines, newLine])\n      }\n  }\n\n  const handleClearClick = () => {\n\n    setCities([])\n\n  }\n\n\n  const handleStageClick = (e) => {\n\n      let r = Math.floor(Math.random() * 255);\n      let g = Math.floor(Math.random() * 255);\n      let b = Math.floor(Math.random() * 255);\n\n      const newCity = {\n          key: uuidv4(),\n          name: uuidv4(),\n          x: e.evt.offsetX,\n          y: e.evt.offsetY,\n          fill: `rgb(${r},${g},${b})`,\n      }\n      setCities(()=>[...cities, newCity])\n      \n      console.log(cities.length) //Count will always be one less than reality because async...\n      \n      \n    }\n    \n    \n\n\n \n  \n\n  return (\n    <div className=\"App\">\n      <Header handleClearClick={handleClearClick}/>\n      <InfoWindow cities={cities} />\n      <MainStage handleStageClick={handleStageClick} cities={cities}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}