{"ast":null,"code":"var _jsxFileName = \"/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport MainStage from './components/MainStage';\nimport Header from './components/Header';\nimport InfoWindow from './components/InfoWindow';\nimport { v4 as uuidv4 } from 'uuid'; // function fac(n) {\n//     return (n != 1) ? n * fac(n - 1) : 1;\n//   }\n// const solutionCount = (n) => {\n//     return (fac(n-1))/2\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction rFact(num) {\n  if (num === 0) {\n    return 1;\n  } else {\n    return num * rFact(num - 1);\n  }\n}\n\nfunction App() {\n  _s();\n\n  const [cities, setCities] = useState([]); // const [solCount, setSolCount] = useState(0)\n\n  const handleStageClick = e => {\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n    console.log(e);\n    const newCity = {\n      key: uuidv4(),\n      name: uuidv4(),\n      x: e.evt.offsetX,\n      y: e.evt.offsetY,\n      fill: `rgb(${r},${g},${b})`\n    };\n    setCities([...cities, newCity]); // setSolCount(solutionCount(cities.length))\n  };\n\n  const solCount = rFact(cities.length);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoWindow, {\n      solCount: solCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainStage, {\n      handleStageClick: handleStageClick,\n      cities: cities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/App.js"],"names":["useState","useEffect","MainStage","Header","InfoWindow","v4","uuidv4","rFact","num","App","cities","setCities","handleStageClick","e","r","Math","floor","random","g","b","console","log","newCity","key","name","x","evt","offsetX","y","offsetY","fill","solCount","length"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B,C,CAEA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,KAAT,CAAeC,GAAf,EACA;AACI,MAAIA,GAAG,KAAK,CAAZ,EACE;AAAE,WAAO,CAAP;AAAW,GADf,MAGE;AAAE,WAAOA,GAAG,GAAGD,KAAK,CAAEC,GAAG,GAAG,CAAR,CAAlB;AAAgC;AACvC;;AAED,SAASC,GAAT,GAAe;AAAA;;AAGb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC,CAHa,CAIb;;AAGA,QAAMY,gBAAgB,GAAIC,CAAD,IAAO;AAE5B,QAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAR;AACA,QAAIC,CAAC,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAR;AACA,QAAIE,CAAC,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAR;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAYR,CAAZ;AAEA,UAAMS,OAAO,GAAG;AACZC,MAAAA,GAAG,EAAEjB,MAAM,EADC;AAEZkB,MAAAA,IAAI,EAAElB,MAAM,EAFA;AAGZmB,MAAAA,CAAC,EAAEZ,CAAC,CAACa,GAAF,CAAMC,OAHG;AAIZC,MAAAA,CAAC,EAAEf,CAAC,CAACa,GAAF,CAAMG,OAJG;AAKZC,MAAAA,IAAI,EAAG,OAAMhB,CAAE,IAAGI,CAAE,IAAGC,CAAE;AALb,KAAhB;AAOAR,IAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYY,OAAZ,CAAD,CAAT,CAf4B,CAgB5B;AACH,GAjBD;;AAsBA,QAAMS,QAAQ,GAAGxB,KAAK,CAACG,MAAM,CAACsB,MAAR,CAAtB;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAED;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,SAAD;AAAW,MAAA,gBAAgB,EAAEnB,gBAA7B;AAA+C,MAAA,MAAM,EAAEF;AAAvD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAxCQD,G;;KAAAA,G;AA0CT,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport MainStage from './components/MainStage'\nimport Header from './components/Header'\nimport InfoWindow from './components/InfoWindow'\nimport { v4 as uuidv4 } from 'uuid';\n\n// function fac(n) {\n//     return (n != 1) ? n * fac(n - 1) : 1;\n//   }\n// const solutionCount = (n) => {\n//     return (fac(n-1))/2\n// }\n\nfunction rFact(num)\n{\n    if (num === 0)\n      { return 1; }\n    else\n      { return num * rFact( num - 1 ); }\n}\n\nfunction App() {\n\n\n  const [cities, setCities] = useState([])\n  // const [solCount, setSolCount] = useState(0)\n\n  \n  const handleStageClick = (e) => {\n\n      let r = Math.floor(Math.random() * 255);\n      let g = Math.floor(Math.random() * 255);\n      let b = Math.floor(Math.random() * 255);\n\n      console.log(e)\n\n      const newCity = {\n          key: uuidv4(),\n          name: uuidv4(),\n          x: e.evt.offsetX,\n          y: e.evt.offsetY,\n          fill: `rgb(${r},${g},${b})`,\n      }\n      setCities([...cities, newCity])\n      // setSolCount(solutionCount(cities.length))\n  }\n  \n\n \n\n  const solCount = rFact(cities.length)\n \n  \n\n  return (\n    <div className=\"App\">\n      <Header />\n      <InfoWindow solCount={solCount} />\n      <MainStage handleStageClick={handleStageClick} cities={cities}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}