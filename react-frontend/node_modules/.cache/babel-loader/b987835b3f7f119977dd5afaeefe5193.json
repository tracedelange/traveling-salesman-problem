{"ast":null,"code":"var _jsxFileName = \"/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport MainStage from './components/MainStage';\nimport Header from './components/Header';\nimport InfoWindow from './components/InfoWindow';\nimport { v4 as uuidv4 } from 'uuid';\nimport { shuffle } from './shuffle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction rFact(num) {\n  if (num === 0) {\n    return 1;\n  } else {\n    return num * rFact(num - 1);\n  }\n}\n\nfunction getCount(num) {\n  if (num === 0) {\n    return 0;\n  } else if (num === 1) {\n    return 1;\n  } else if (num === 2) {\n    return 1;\n  } else {\n    return rFact(num - 1) / 2;\n  }\n}\n\nfunction App() {\n  _s();\n\n  const [lines, setLines] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [randSol, setRandSol] = useState([]);\n  const [lastLine, setLastLine] = useState(null);\n\n  const handleClearClick = () => {\n    setCities([]);\n  };\n\n  const tickSolution = () => {\n    let newSol = [...cities];\n    let newComb = newSol.sort(() => Math.random() - 0.5);\n    newComb.push(newComb[0]); //Make sure the route loops back to the start\n\n    setRandSol(newComb);\n  };\n\n  if (cities.length > 1) {\n    setInterval(() => {\n      tickSolution();\n    }, 1000);\n  }\n\n  useEffect(() => {\n    setRandSol([]);\n  }, []);\n  useEffect(() => {\n    // setRandSol([])\n    const intervalID = setInterval(() => {\n      tickSolution();\n    }, 1000);\n    return function cleanup() {\n      clearInterval(intervalID);\n    };\n  }, []); // useEffect(() => {\n  //   const intervalId = setInterval(() => {\n  //     setLoadingStatus(ls => ls + \".\");\n  //   }, 1000);\n  //   return () => clearInterval(intervalId);\n  // }, []);\n\n  const handleStageClick = e => {\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n    const newCity = {\n      key: uuidv4(),\n      name: uuidv4(),\n      x: e.evt.offsetX,\n      y: e.evt.offsetY,\n      fill: `rgb(${r},${g},${b})`\n    };\n    setCities(() => [...cities, newCity]);\n    let starting = cities[cities.length - 1]; // console.log(cities.length)\n\n    if (cities.length !== 0) {\n      let newLine = {\n        key: uuidv4(),\n        startName: starting.name,\n        points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n        stroke: 'red'\n      };\n\n      if (cities.length >= 2) {\n        let first = cities[0];\n        let newLastLine = {\n          key: uuidv4(),\n          points: [first.x, first.y, e.evt.offsetX, e.evt.offsetY],\n          stroke: 'red'\n        };\n        setLastLine(newLastLine);\n      }\n\n      setLines([...lines, newLine]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      handleClearClick: handleClearClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoWindow, {\n      cities: cities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainStage, {\n      handleStageClick: handleStageClick,\n      cities: cities,\n      lines: lines,\n      randSolution: randSol,\n      lastLine: lastLine\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"NAMdjjlAcyJUwyFy2ryj2rbILtc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/App.js"],"names":["useState","useEffect","MainStage","Header","InfoWindow","v4","uuidv4","shuffle","rFact","num","getCount","App","lines","setLines","cities","setCities","randSol","setRandSol","lastLine","setLastLine","handleClearClick","tickSolution","newSol","newComb","sort","Math","random","push","length","setInterval","intervalID","cleanup","clearInterval","handleStageClick","e","r","floor","g","b","newCity","key","name","x","evt","offsetX","y","offsetY","fill","starting","newLine","startName","points","stroke","first","newLastLine"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport MainStage from './components/MainStage'\nimport Header from './components/Header'\nimport InfoWindow from './components/InfoWindow'\nimport { v4 as uuidv4 } from 'uuid';\nimport {shuffle} from './shuffle'\n\nfunction rFact(num) {\n  if (num === 0) { return 1; }\n  else { return num * rFact(num - 1); }\n}\n\nfunction getCount(num) {\n  if (num === 0) {\n    return 0\n  } else if (num === 1) {\n    return 1\n  } else if (num === 2) {\n    return 1\n  } else {\n    return (rFact(num - 1)) / 2\n  }\n}\n\nfunction App() {\n\n  const [lines, setLines] = useState([])\n  const [cities, setCities] = useState([])\n\n  const [randSol, setRandSol] = useState([])\n\n  const [lastLine, setLastLine] = useState(null)\n\n  const handleClearClick = () => {\n\n    setCities([])\n\n  }\n\n\n\n\n\n  const tickSolution = () => {\n\n    let newSol = [...cities]\n    \n\n    let newComb = newSol.sort( () => Math.random() - 0.5)\n    newComb.push(newComb[0]) //Make sure the route loops back to the start\n\n    setRandSol(newComb)\n   \n\n  }\n\n  if (cities.length > 1){\n    setInterval(() => {tickSolution()}, 1000)\n\n  }\n\n  useEffect(()=> {\n    setRandSol([])\n  }, [])\n\n\n\n  useEffect(() => {\n\n    // setRandSol([])\n    const intervalID = setInterval(() => {\n      tickSolution()\n    }, 1000);\n  \n    return function cleanup(){\n      clearInterval(intervalID)\n    }\n  }, [])\n\n\n  // useEffect(() => {\n  //   const intervalId = setInterval(() => {\n  //     setLoadingStatus(ls => ls + \".\");\n  //   }, 1000);\n\n  //   return () => clearInterval(intervalId);\n  // }, []);\n\n  const handleStageClick = (e) => {\n\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n\n    \n    const newCity = {\n      key: uuidv4(),\n      name: uuidv4(),\n      x: e.evt.offsetX,\n      y: e.evt.offsetY,\n      fill: `rgb(${r},${g},${b})`,\n    }\n    setCities(() => [...cities, newCity])\n\n\n    let starting = cities[cities.length-1]\n\n    // console.log(cities.length)\n\n    if (cities.length !== 0) {\n\n      let newLine = {\n        key: uuidv4(),\n        startName: starting.name,\n        points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n        stroke: 'red'\n      } \n\n      if (cities.length >= 2) {\n\n        let first = cities[0]\n\n        let newLastLine = {\n          key: uuidv4(),\n          points: [first.x, first.y, e.evt.offsetX, e.evt.offsetY],\n          stroke: 'red'\n        }\n\n        setLastLine(newLastLine)\n\n      }\n\n      setLines([...lines, newLine])\n    } \n\n\n  }\n\n\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <Header handleClearClick={handleClearClick} />\n      <InfoWindow cities={cities} />\n      <MainStage\n      handleStageClick={handleStageClick}\n      cities={cities}\n      lines={lines}\n\n      randSolution={randSol}\n      lastLine={lastLine}\n      \n      \n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}