{"ast":null,"code":"/*!\n * @pixi/compressed-textures - v6.0.4\n * Compiled Tue, 11 May 2021 18:00:23 UTC\n *\n * @pixi/compressed-textures is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { ViewableBuffer, BufferResource, Texture, BaseTexture } from '@pixi/core';\nimport { LoaderResource } from '@pixi/loaders';\nimport { url } from '@pixi/utils';\nimport { MIPMAP_MODES, ALPHA_MODES, TYPES, FORMATS } from '@pixi/constants';\n\nvar _a;\n/**\n * WebGL internal formats, including compressed texture formats provided by extensions\n *\n * @memberof PIXI\n * @static\n * @name INTERNAL_FORMATS\n * @enum {number}\n * @property {number} COMPRESSED_RGB_S3TC_DXT1_EXT=0x83F0\n * @property {number} COMPRESSED_RGBA_S3TC_DXT1_EXT=0x83F1\n * @property {number} COMPRESSED_RGBA_S3TC_DXT3_EXT=0x83F2\n * @property {number} COMPRESSED_RGBA_S3TC_DXT5_EXT=0x83F3\n * @property {number} COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT=35917\n * @property {number} COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT=35918\n * @property {number} COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT=35919\n * @property {number} COMPRESSED_SRGB_S3TC_DXT1_EXT=35916\n * @property {number} COMPRESSED_R11_EAC=0x9270\n * @property {number} COMPRESSED_SIGNED_R11_EAC=0x9271\n * @property {number} COMPRESSED_RG11_EAC=0x9272\n * @property {number} COMPRESSED_SIGNED_RG11_EAC=0x9273\n * @property {number} COMPRESSED_RGB8_ETC2=0x9274\n * @property {number} COMPRESSED_RGBA8_ETC2_EAC=0x9278\n * @property {number} COMPRESSED_SRGB8_ETC2=0x9275\n * @property {number} COMPRESSED_SRGB8_ALPHA8_ETC2_EAC=0x9279\n * @property {number} COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9276\n * @property {number} COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9277\n * @property {number} COMPRESSED_RGB_PVRTC_4BPPV1_IMG=0x8C00\n * @property {number} COMPRESSED_RGBA_PVRTC_4BPPV1_IMG=0x8C02\n * @property {number} COMPRESSED_RGB_PVRTC_2BPPV1_IMG=0x8C01\n * @property {number} COMPRESSED_RGBA_PVRTC_2BPPV1_IMG=0x8C03\n * @property {number} COMPRESSED_RGB_ETC1_WEBGL=0x8D64\n * @property {number} COMPRESSED_RGB_ATC_WEBGL=0x8C92\n * @property {number} COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL=0x8C92\n * @property {number} COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL=0x87EE\n */\n\n\nvar INTERNAL_FORMATS;\n\n(function (INTERNAL_FORMATS) {\n  // WEBGL_compressed_texture_s3tc\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_S3TC_DXT1_EXT\"] = 33776] = \"COMPRESSED_RGB_S3TC_DXT1_EXT\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_S3TC_DXT1_EXT\"] = 33777] = \"COMPRESSED_RGBA_S3TC_DXT1_EXT\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_S3TC_DXT3_EXT\"] = 33778] = \"COMPRESSED_RGBA_S3TC_DXT3_EXT\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_S3TC_DXT5_EXT\"] = 33779] = \"COMPRESSED_RGBA_S3TC_DXT5_EXT\"; // WEBGL_compressed_texture_s3tc_srgb\n\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT\"] = 35917] = \"COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT\"] = 35918] = \"COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\"] = 35919] = \"COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB_S3TC_DXT1_EXT\"] = 35916] = \"COMPRESSED_SRGB_S3TC_DXT1_EXT\"; // WEBGL_compressed_texture_etc\n\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_R11_EAC\"] = 37488] = \"COMPRESSED_R11_EAC\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SIGNED_R11_EAC\"] = 37489] = \"COMPRESSED_SIGNED_R11_EAC\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RG11_EAC\"] = 37490] = \"COMPRESSED_RG11_EAC\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SIGNED_RG11_EAC\"] = 37491] = \"COMPRESSED_SIGNED_RG11_EAC\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB8_ETC2\"] = 37492] = \"COMPRESSED_RGB8_ETC2\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA8_ETC2_EAC\"] = 37496] = \"COMPRESSED_RGBA8_ETC2_EAC\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB8_ETC2\"] = 37493] = \"COMPRESSED_SRGB8_ETC2\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\"] = 37497] = \"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\"] = 37494] = \"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\"] = 37495] = \"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\"; // WEBGL_compressed_texture_pvrtc\n\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\"] = 35840] = \"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\"] = 35842] = \"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\"] = 35841] = \"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\"] = 35843] = \"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\"; // WEBGL_compressed_texture_etc1\n\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_ETC1_WEBGL\"] = 36196] = \"COMPRESSED_RGB_ETC1_WEBGL\"; // WEBGL_compressed_texture_atc\n\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_ATC_WEBGL\"] = 35986] = \"COMPRESSED_RGB_ATC_WEBGL\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL\"] = 35986] = \"COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\"] = 34798] = \"COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\";\n})(INTERNAL_FORMATS || (INTERNAL_FORMATS = {}));\n/**\n * Maps the compressed texture formats in {@link PIXI.INTERNAL_FORMATS} to the number of bytes taken by\n * each texel.\n *\n * @memberof PIXI\n * @static\n * @ignore\n */\n\n\nvar INTERNAL_FORMAT_TO_BYTES_PER_PIXEL = (_a = {}, // WEBGL_compressed_texture_s3tc\n_a[INTERNAL_FORMATS.COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5, _a[INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5, _a[INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1, _a[INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1, // WEBGL_compressed_texture_s3tc\n_a[INTERNAL_FORMATS.COMPRESSED_SRGB_S3TC_DXT1_EXT] = 0.5, _a[INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT] = 0.5, _a[INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT] = 1, _a[INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT] = 1, // WEBGL_compressed_texture_etc\n_a[INTERNAL_FORMATS.COMPRESSED_R11_EAC] = 0.5, _a[INTERNAL_FORMATS.COMPRESSED_SIGNED_R11_EAC] = 0.5, _a[INTERNAL_FORMATS.COMPRESSED_RG11_EAC] = 1, _a[INTERNAL_FORMATS.COMPRESSED_SIGNED_RG11_EAC] = 1, _a[INTERNAL_FORMATS.COMPRESSED_RGB8_ETC2] = 0.5, _a[INTERNAL_FORMATS.COMPRESSED_RGBA8_ETC2_EAC] = 1, _a[INTERNAL_FORMATS.COMPRESSED_SRGB8_ETC2] = 0.5, _a[INTERNAL_FORMATS.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC] = 1, _a[INTERNAL_FORMATS.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2] = 0.5, _a[INTERNAL_FORMATS.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2] = 0.5, // WEBGL_compressed_texture_pvrtc\n_a[INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5, _a[INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5, _a[INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25, _a[INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25, // WEBGL_compressed_texture_etc1\n_a[INTERNAL_FORMATS.COMPRESSED_RGB_ETC1_WEBGL] = 0.5, // @see https://www.khronos.org/registry/OpenGL/extensions/AMD/AMD_compressed_ATC_texture.txt\n// WEBGL_compressed_texture_atc\n_a[INTERNAL_FORMATS.COMPRESSED_RGB_ATC_WEBGL] = 0.5, _a[INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1, _a[INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1, _a);\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) {\n        throw t[1];\n      }\n\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) {\n      throw new TypeError(\"Generator is already executing.\");\n    }\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) {\n          return t;\n        }\n\n        if (y = 0, t) {\n          op = [op[0] & 2, t.value];\n        }\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) {\n              _.ops.pop();\n            }\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) {\n      throw op[1];\n    }\n\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\n/**\n * Resource that fetches texture data over the network and stores it in a buffer.\n *\n * @class\n * @extends PIXI.Resource\n * @memberof PIXI\n */\n\n\nvar BlobResource =\n/** @class */\nfunction (_super) {\n  __extends(BlobResource, _super);\n  /**\n   * @param {string} url - the URL of the texture file\n   * @param {boolean}[autoLoad] - whether to fetch the data immediately;\n   *  you can fetch it later via {@link BlobResource#load}\n   */\n\n\n  function BlobResource(source, options) {\n    if (options === void 0) {\n      options = {\n        width: 1,\n        height: 1,\n        autoLoad: true\n      };\n    }\n\n    var _this = this;\n\n    var origin;\n    var data;\n\n    if (typeof source === 'string') {\n      origin = source;\n      data = new Uint8Array();\n    } else {\n      origin = null;\n      data = source;\n    }\n\n    _this = _super.call(this, data, options) || this;\n    /**\n     * The URL of the texture file\n     * @member {string}\n     */\n\n    _this.origin = origin;\n    /**\n     * The viewable buffer on the data\n     * @member {ViewableBuffer}\n     */\n    // HINT: BlobResource allows \"null\" sources, assuming the child class provides an alternative\n\n    _this.buffer = data ? new ViewableBuffer(data) : null; // Allow autoLoad = \"undefined\" still load the resource by default\n\n    if (_this.origin && options.autoLoad !== false) {\n      _this.load();\n    }\n\n    if (data && data.length) {\n      _this.loaded = true;\n\n      _this.onBlobLoaded(_this.buffer.rawBinaryData);\n    }\n\n    return _this;\n  }\n\n  BlobResource.prototype.onBlobLoaded = function (_data) {// TODO: Override this method\n  };\n  /**\n   * Loads the blob\n   */\n\n\n  BlobResource.prototype.load = function () {\n    return __awaiter(this, void 0, Promise, function () {\n      var response, blob, arrayBuffer;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , fetch(this.origin)];\n\n          case 1:\n            response = _a.sent();\n            return [4\n            /*yield*/\n            , response.blob()];\n\n          case 2:\n            blob = _a.sent();\n            return [4\n            /*yield*/\n            , blob.arrayBuffer()];\n\n          case 3:\n            arrayBuffer = _a.sent();\n            this.data = new Uint32Array(arrayBuffer);\n            this.buffer = new ViewableBuffer(arrayBuffer);\n            this.loaded = true;\n            this.onBlobLoaded(arrayBuffer);\n            this.update();\n            return [2\n            /*return*/\n            , this];\n        }\n      });\n    });\n  };\n\n  return BlobResource;\n}(BufferResource);\n/**\n * Resource for compressed texture formats, as follows: S3TC/DXTn (& their sRGB formats), ATC, ASTC, ETC 1/2, PVRTC.\n *\n * Compressed textures improve performance when rendering is texture-bound. The texture data stays compressed in\n * graphics memory, increasing memory locality and speeding up texture fetches. These formats can also be used to store\n * more detail in the same amount of memory.\n *\n * For most developers, container file formats are a better abstraction instead of directly handling raw texture\n * data. PixiJS provides native support for the following texture file formats (via {@link PIXI.Loader}):\n *\n * * **.dds** - the DirectDraw Surface file format stores DXTn (DXT-1,3,5) data. See {@link PIXI.DDSLoader}\n * * **.ktx** - the Khronos Texture Container file format supports storing all the supported WebGL compression formats.\n *  See {@link PIXI.KTXLoader}.\n * * **.basis** - the BASIS supercompressed file format stores texture data in an internal format that is transcoded\n *  to the compression format supported on the device at _runtime_. It also supports transcoding into a uncompressed\n *  format as a fallback; you must install the `@pixi/basis-loader`, `@pixi/basis-transcoder` packages separately to\n *  use these files. See {@link PIXI.BasisLoader}.\n *\n * The loaders for the aforementioned formats use `CompressedTextureResource` internally. It is strongly suggested that\n * they be used instead.\n *\n * ## Working directly with CompressedTextureResource\n *\n * Since `CompressedTextureResource` inherits `BlobResource`, you can provide it a URL pointing to a file containing\n * the raw texture data (with no file headers!):\n *\n * ```js\n * // The resource backing the texture data for your textures.\n * // NOTE: You can also provide a ArrayBufferView instead of a URL. This is used when loading data from a container file\n * //   format such as KTX, DDS, or BASIS.\n * const compressedResource = new PIXI.CompressedTextureResource(\"bunny.dxt5\", {\n *   format: PIXI.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n *   width: 256,\n *   height: 256\n * });\n *\n * // You can create a base-texture to the cache, so that future `Texture`s can be created using the `Texture.from` API.\n * const baseTexture = new PIXI.BaseTexture(compressedResource, { pmaMode: PIXI.ALPHA_MODES.NPM });\n *\n * // Create a Texture to add to the TextureCache\n * const texture = new PIXI.Texture(baseTexture);\n *\n * // Add baseTexture & texture to the global texture cache\n * PIXI.BaseTexture.addToCache(baseTexture, \"bunny.dxt5\");\n * PIXI.Texture.addToCache(texture, \"bunny.dxt5\");\n * ```\n *\n * @memberof PIXI\n */\n\n\nvar CompressedTextureResource =\n/** @class */\nfunction (_super) {\n  __extends(CompressedTextureResource, _super);\n  /**\n   * @param source - the buffer/URL holding the compressed texture data\n   * @param options\n   * @param {PIXI.INTERNAL_FORMATS} options.format - the compression format\n   * @param {number} options.width - the image width in pixels.\n   * @param {number} options.height - the image height in pixels.\n   * @param {number}[options.level=1] - the mipmap levels stored in the compressed texture, including level 0.\n   * @param {number}[options.levelBuffers] - the buffers for each mipmap level. `CompressedTextureResource` can allows you\n   *      to pass `null` for `source`, for cases where each level is stored in non-contiguous memory.\n   */\n\n\n  function CompressedTextureResource(source, options) {\n    var _this = _super.call(this, source, options) || this;\n    /**\n     * The compression format\n     */\n\n\n    _this.format = options.format;\n    /**\n     * The number of mipmap levels stored in the resource buffer.\n     *\n     * @default 1\n     */\n\n    _this.levels = options.levels || 1;\n    _this._width = options.width;\n    _this._height = options.height;\n    _this._extension = CompressedTextureResource._formatToExtension(_this.format);\n\n    if (options.levelBuffers || _this.buffer) {\n      // ViewableBuffer doesn't support byteOffset :-( so allow source to be Uint8Array\n      _this._levelBuffers = options.levelBuffers || CompressedTextureResource._createLevelBuffers(source instanceof Uint8Array ? source : _this.buffer.uint8View, _this.format, _this.levels, 4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n      _this.width, _this.height);\n    }\n\n    return _this;\n  }\n  /**\n   * @override\n   * @param renderer\n   * @param _texture\n   * @param _glTexture\n   */\n\n\n  CompressedTextureResource.prototype.upload = function (renderer, _texture, _glTexture) {\n    var gl = renderer.gl;\n    var extension = renderer.context.extensions[this._extension];\n\n    if (!extension) {\n      throw new Error(this._extension + \" textures are not supported on the current machine\");\n    }\n\n    if (!this._levelBuffers) {\n      // Do not try to upload data before BlobResource loads, unless the levelBuffers were provided directly!\n      return false;\n    }\n\n    for (var i = 0, j = this.levels; i < j; i++) {\n      var _a = this._levelBuffers[i],\n          levelID = _a.levelID,\n          levelWidth = _a.levelWidth,\n          levelHeight = _a.levelHeight,\n          levelBuffer = _a.levelBuffer;\n      gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n    }\n\n    return true;\n  };\n  /**\n   * @protected\n   */\n\n\n  CompressedTextureResource.prototype.onBlobLoaded = function () {\n    this._levelBuffers = CompressedTextureResource._createLevelBuffers(this.buffer.uint8View, this.format, this.levels, 4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n    this.width, this.height);\n  };\n  /**\n   * Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format\n   *\n   * @private\n   * @param {PIXI.INTERNAL_FORMATS} format\n   * @return {string}\n   */\n\n\n  CompressedTextureResource._formatToExtension = function (format) {\n    if (format >= 0x83F0 && format <= 0x83F3) {\n      return 's3tc';\n    } else if (format >= 0x9270 && format <= 0x9279) {\n      return 'etc';\n    } else if (format >= 0x8C00 && format <= 0x8C03) {\n      return 'pvrtc';\n    } else if (format >= 0x8D64) {\n      return 'etc1';\n    } else if (format >= 0x8C92 && format <= 0x87EE) {\n      return 'atc';\n    }\n\n    throw new Error('Invalid (compressed) texture format given!');\n  };\n  /**\n   * Pre-creates buffer views for each mipmap level\n   *\n   * @private\n   * @param {Uint8Array} buffer\n   * @param {PIXI.INTERNAL_FORMATS} format\n   * @param {number} levels\n   * @param {number} blockWidth\n   * @param {number} blockHeight\n   * @param {number} imageWidth\n   * @param {number} imageHeight\n   */\n\n\n  CompressedTextureResource._createLevelBuffers = function (buffer, format, levels, blockWidth, blockHeight, imageWidth, imageHeight) {\n    // The byte-size of the first level buffer\n    var buffers = new Array(levels);\n    var offset = buffer.byteOffset;\n    var levelWidth = imageWidth;\n    var levelHeight = imageHeight;\n    var alignedLevelWidth = levelWidth + blockWidth - 1 & ~(blockWidth - 1);\n    var alignedLevelHeight = levelHeight + blockHeight - 1 & ~(blockHeight - 1);\n    var levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n\n    for (var i = 0; i < levels; i++) {\n      buffers[i] = {\n        levelID: i,\n        levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n        levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n        levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n      };\n      offset += levelSize; // Calculate levelBuffer dimensions for next iteration\n\n      levelWidth = levelWidth >> 1 || 1;\n      levelHeight = levelHeight >> 1 || 1;\n      alignedLevelWidth = levelWidth + blockWidth - 1 & ~(blockWidth - 1);\n      alignedLevelHeight = levelHeight + blockHeight - 1 & ~(blockHeight - 1);\n      levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n    }\n\n    return buffers;\n  };\n\n  return CompressedTextureResource;\n}(BlobResource);\n/* eslint-enable camelcase */\n\n/**\n * Loader plugin for handling compressed textures for all platforms.\n *\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\n\n\nvar CompressedTextureLoader =\n/** @class */\nfunction () {\n  function CompressedTextureLoader() {}\n  /**\n   * Called after a compressed-textures manifest is loaded.\n   *\n   * This will then load the correct compression format for the device. Your manifest should adhere\n   * to the following schema:\n   *\n   * ```js\n   * import { INTERNAL_FORMATS } from '@pixi/constants';\n   *\n   * // The following should be present in a *.compressed-texture.json file!\n   * const manifest = JSON.stringify({\n   *   COMPRESSED_RGBA_S3TC_DXT5_EXT: \"asset.s3tc.ktx\",\n   *   COMPRESSED_RGBA8_ETC2_EAC: \"asset.etc.ktx\",\n   *   RGBA_PVRTC_4BPPV1_IMG: \"asset.pvrtc.ktx\",\n   *   textureID: \"asset.png\",\n   *   fallback: \"asset.png\"\n   * });\n   * ```\n   */\n\n\n  CompressedTextureLoader.use = function (resource, next) {\n    var data = resource.data;\n    var loader = this;\n\n    if (resource.type === LoaderResource.TYPE.JSON && data && data.cacheID && data.textures) {\n      var textures = data.textures;\n      var textureURL = void 0;\n      var fallbackURL = void 0; // Search for an extension that holds one the formats\n\n      for (var i = 0, j = textures.length; i < j; i++) {\n        var texture = textures[i];\n        var url_1 = texture.src;\n        var format = texture.format;\n\n        if (!format) {\n          fallbackURL = url_1;\n        }\n\n        if (CompressedTextureLoader.textureFormats[format]) {\n          textureURL = url_1;\n          break;\n        }\n      }\n\n      textureURL = textureURL || fallbackURL; // Make sure we have a URL\n\n      if (!textureURL) {\n        next(new Error(\"Cannot load compressed-textures in \" + resource.url + \", make sure you provide a fallback\"));\n        return;\n      }\n\n      if (textureURL === resource.url) {\n        // Prevent infinite loops\n        next(new Error('URL of compressed texture cannot be the same as the manifest\\'s URL'));\n        return;\n      }\n\n      var loadOptions = {\n        crossOrigin: resource.crossOrigin,\n        metadata: resource.metadata.imageMetadata,\n        parentResource: resource\n      };\n      var resourcePath = url.resolve(resource.url.replace(loader.baseUrl, ''), textureURL);\n      var resourceName = data.cacheID; // The appropriate loader should register the texture\n\n      loader.add(resourceName, resourcePath, loadOptions, function (res) {\n        if (res.error) {\n          next(res.error);\n          return;\n        }\n\n        var _a = res.texture,\n            texture = _a === void 0 ? null : _a,\n            _b = res.textures,\n            textures = _b === void 0 ? {} : _b; // Make sure texture/textures is assigned to parent resource\n\n        Object.assign(resource, {\n          texture: texture,\n          textures: textures\n        }); // Pass along any error\n\n        next();\n      });\n    } else {\n      next();\n    }\n  };\n  /**\n   * Detects the available compressed texture extensions on the device.\n   *\n   * @ignore\n   */\n\n\n  CompressedTextureLoader.add = function () {\n    // Auto-detect WebGL compressed-texture extensions\n    var canvas = document.createElement('canvas');\n    var gl = canvas.getContext('webgl');\n\n    if (!gl) {\n      console.error('WebGL not available for compressed textures. Silently failing.');\n      return;\n    }\n\n    var extensions = {\n      s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n      s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'),\n      etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n      etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n      pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n      atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n      astc: gl.getExtension('WEBGL_compressed_texture_astc')\n    };\n    CompressedTextureLoader.textureExtensions = extensions;\n    CompressedTextureLoader.textureFormats = {}; // Assign all available compressed-texture formats\n\n    for (var extensionName in extensions) {\n      var extension = extensions[extensionName];\n\n      if (!extension) {\n        continue;\n      }\n\n      Object.assign(CompressedTextureLoader.textureFormats, Object.getPrototypeOf(extension));\n    }\n  };\n\n  return CompressedTextureLoader;\n}();\n/**\n * Creates base-textures and textures for each compressed-texture resource and adds them into the global\n * texture cache. The first texture has two IDs - `${url}`, `${url}-1`; while the rest have an ID of the\n * form `${url}-i`.\n *\n * @param url - the original address of the resources\n * @param resources - the resources backing texture data\n * @ignore\n */\n\n\nfunction registerCompressedTextures(url, resources, metadata) {\n  var result = {\n    textures: {},\n    texture: null\n  };\n\n  if (!resources) {\n    return result;\n  }\n\n  var textures = resources.map(function (resource) {\n    return new Texture(new BaseTexture(resource, Object.assign({\n      mipmap: MIPMAP_MODES.OFF,\n      alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA\n    }, metadata)));\n  });\n  textures.forEach(function (texture, i) {\n    var baseTexture = texture.baseTexture;\n    var cacheID = url + \"-\" + (i + 1);\n    BaseTexture.addToCache(baseTexture, cacheID);\n    Texture.addToCache(texture, cacheID);\n\n    if (i === 0) {\n      BaseTexture.addToCache(baseTexture, url);\n      Texture.addToCache(texture, url);\n      result.texture = texture;\n    }\n\n    result.textures[cacheID] = texture;\n  });\n  return result;\n}\n\nvar _a$1, _b; // Set DDS files to be loaded as an ArrayBuffer\n\n\nLoaderResource.setExtensionXhrType('dds', LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\nvar DDS_MAGIC_SIZE = 4;\nvar DDS_HEADER_SIZE = 124;\nvar DDS_HEADER_PF_SIZE = 32;\nvar DDS_HEADER_DX10_SIZE = 20; // DDS file format magic word\n\nvar DDS_MAGIC = 0x20534444;\n/**\n * DWORD offsets of the DDS file header fields (relative to file start).\n *\n * @ignore\n */\n\nvar DDS_FIELDS = {\n  SIZE: 1,\n  FLAGS: 2,\n  HEIGHT: 3,\n  WIDTH: 4,\n  MIPMAP_COUNT: 7,\n  PIXEL_FORMAT: 19\n};\n/**\n * DWORD offsets of the DDS PIXEL_FORMAT fields.\n *\n * @ignore\n */\n\nvar DDS_PF_FIELDS = {\n  SIZE: 0,\n  FLAGS: 1,\n  FOURCC: 2,\n  RGB_BITCOUNT: 3,\n  R_BIT_MASK: 4,\n  G_BIT_MASK: 5,\n  B_BIT_MASK: 6,\n  A_BIT_MASK: 7\n};\n/**\n * DWORD offsets of the DDS_HEADER_DX10 fields.\n *\n * @ignore\n */\n\nvar DDS_DX10_FIELDS = {\n  DXGI_FORMAT: 0,\n  RESOURCE_DIMENSION: 1,\n  MISC_FLAG: 2,\n  ARRAY_SIZE: 3,\n  MISC_FLAGS2: 4\n};\n/**\n * @see https://docs.microsoft.com/en-us/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format\n * @ignore\n */\n// This is way over-blown for us! Lend us a hand, and remove the ones that aren't used (but set the remaining\n// ones to their correct value)\n\nvar DXGI_FORMAT;\n\n(function (DXGI_FORMAT) {\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_UNKNOWN\"] = 0] = \"DXGI_FORMAT_UNKNOWN\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32A32_TYPELESS\"] = 1] = \"DXGI_FORMAT_R32G32B32A32_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32A32_FLOAT\"] = 2] = \"DXGI_FORMAT_R32G32B32A32_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32A32_UINT\"] = 3] = \"DXGI_FORMAT_R32G32B32A32_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32A32_SINT\"] = 4] = \"DXGI_FORMAT_R32G32B32A32_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32_TYPELESS\"] = 5] = \"DXGI_FORMAT_R32G32B32_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32_FLOAT\"] = 6] = \"DXGI_FORMAT_R32G32B32_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32_UINT\"] = 7] = \"DXGI_FORMAT_R32G32B32_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32_SINT\"] = 8] = \"DXGI_FORMAT_R32G32B32_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_TYPELESS\"] = 9] = \"DXGI_FORMAT_R16G16B16A16_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_FLOAT\"] = 10] = \"DXGI_FORMAT_R16G16B16A16_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_UNORM\"] = 11] = \"DXGI_FORMAT_R16G16B16A16_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_UINT\"] = 12] = \"DXGI_FORMAT_R16G16B16A16_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_SNORM\"] = 13] = \"DXGI_FORMAT_R16G16B16A16_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_SINT\"] = 14] = \"DXGI_FORMAT_R16G16B16A16_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32_TYPELESS\"] = 15] = \"DXGI_FORMAT_R32G32_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32_FLOAT\"] = 16] = \"DXGI_FORMAT_R32G32_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32_UINT\"] = 17] = \"DXGI_FORMAT_R32G32_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32_SINT\"] = 18] = \"DXGI_FORMAT_R32G32_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G8X24_TYPELESS\"] = 19] = \"DXGI_FORMAT_R32G8X24_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_D32_FLOAT_S8X24_UINT\"] = 20] = \"DXGI_FORMAT_D32_FLOAT_S8X24_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS\"] = 21] = \"DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_X32_TYPELESS_G8X24_UINT\"] = 22] = \"DXGI_FORMAT_X32_TYPELESS_G8X24_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R10G10B10A2_TYPELESS\"] = 23] = \"DXGI_FORMAT_R10G10B10A2_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R10G10B10A2_UNORM\"] = 24] = \"DXGI_FORMAT_R10G10B10A2_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R10G10B10A2_UINT\"] = 25] = \"DXGI_FORMAT_R10G10B10A2_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R11G11B10_FLOAT\"] = 26] = \"DXGI_FORMAT_R11G11B10_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_TYPELESS\"] = 27] = \"DXGI_FORMAT_R8G8B8A8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_UNORM\"] = 28] = \"DXGI_FORMAT_R8G8B8A8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_UNORM_SRGB\"] = 29] = \"DXGI_FORMAT_R8G8B8A8_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_UINT\"] = 30] = \"DXGI_FORMAT_R8G8B8A8_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_SNORM\"] = 31] = \"DXGI_FORMAT_R8G8B8A8_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_SINT\"] = 32] = \"DXGI_FORMAT_R8G8B8A8_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_TYPELESS\"] = 33] = \"DXGI_FORMAT_R16G16_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_FLOAT\"] = 34] = \"DXGI_FORMAT_R16G16_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_UNORM\"] = 35] = \"DXGI_FORMAT_R16G16_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_UINT\"] = 36] = \"DXGI_FORMAT_R16G16_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_SNORM\"] = 37] = \"DXGI_FORMAT_R16G16_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_SINT\"] = 38] = \"DXGI_FORMAT_R16G16_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_TYPELESS\"] = 39] = \"DXGI_FORMAT_R32_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_D32_FLOAT\"] = 40] = \"DXGI_FORMAT_D32_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_FLOAT\"] = 41] = \"DXGI_FORMAT_R32_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_UINT\"] = 42] = \"DXGI_FORMAT_R32_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_SINT\"] = 43] = \"DXGI_FORMAT_R32_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R24G8_TYPELESS\"] = 44] = \"DXGI_FORMAT_R24G8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_D24_UNORM_S8_UINT\"] = 45] = \"DXGI_FORMAT_D24_UNORM_S8_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R24_UNORM_X8_TYPELESS\"] = 46] = \"DXGI_FORMAT_R24_UNORM_X8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_X24_TYPELESS_G8_UINT\"] = 47] = \"DXGI_FORMAT_X24_TYPELESS_G8_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_TYPELESS\"] = 48] = \"DXGI_FORMAT_R8G8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_UNORM\"] = 49] = \"DXGI_FORMAT_R8G8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_UINT\"] = 50] = \"DXGI_FORMAT_R8G8_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_SNORM\"] = 51] = \"DXGI_FORMAT_R8G8_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_SINT\"] = 52] = \"DXGI_FORMAT_R8G8_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_TYPELESS\"] = 53] = \"DXGI_FORMAT_R16_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_FLOAT\"] = 54] = \"DXGI_FORMAT_R16_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_D16_UNORM\"] = 55] = \"DXGI_FORMAT_D16_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_UNORM\"] = 56] = \"DXGI_FORMAT_R16_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_UINT\"] = 57] = \"DXGI_FORMAT_R16_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_SNORM\"] = 58] = \"DXGI_FORMAT_R16_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_SINT\"] = 59] = \"DXGI_FORMAT_R16_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_TYPELESS\"] = 60] = \"DXGI_FORMAT_R8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_UNORM\"] = 61] = \"DXGI_FORMAT_R8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_UINT\"] = 62] = \"DXGI_FORMAT_R8_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_SNORM\"] = 63] = \"DXGI_FORMAT_R8_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_SINT\"] = 64] = \"DXGI_FORMAT_R8_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_A8_UNORM\"] = 65] = \"DXGI_FORMAT_A8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R1_UNORM\"] = 66] = \"DXGI_FORMAT_R1_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R9G9B9E5_SHAREDEXP\"] = 67] = \"DXGI_FORMAT_R9G9B9E5_SHAREDEXP\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_B8G8_UNORM\"] = 68] = \"DXGI_FORMAT_R8G8_B8G8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_G8R8_G8B8_UNORM\"] = 69] = \"DXGI_FORMAT_G8R8_G8B8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC1_TYPELESS\"] = 70] = \"DXGI_FORMAT_BC1_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC1_UNORM\"] = 71] = \"DXGI_FORMAT_BC1_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC1_UNORM_SRGB\"] = 72] = \"DXGI_FORMAT_BC1_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC2_TYPELESS\"] = 73] = \"DXGI_FORMAT_BC2_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC2_UNORM\"] = 74] = \"DXGI_FORMAT_BC2_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC2_UNORM_SRGB\"] = 75] = \"DXGI_FORMAT_BC2_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC3_TYPELESS\"] = 76] = \"DXGI_FORMAT_BC3_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC3_UNORM\"] = 77] = \"DXGI_FORMAT_BC3_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC3_UNORM_SRGB\"] = 78] = \"DXGI_FORMAT_BC3_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC4_TYPELESS\"] = 79] = \"DXGI_FORMAT_BC4_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC4_UNORM\"] = 80] = \"DXGI_FORMAT_BC4_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC4_SNORM\"] = 81] = \"DXGI_FORMAT_BC4_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC5_TYPELESS\"] = 82] = \"DXGI_FORMAT_BC5_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC5_UNORM\"] = 83] = \"DXGI_FORMAT_BC5_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC5_SNORM\"] = 84] = \"DXGI_FORMAT_BC5_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B5G6R5_UNORM\"] = 85] = \"DXGI_FORMAT_B5G6R5_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B5G5R5A1_UNORM\"] = 86] = \"DXGI_FORMAT_B5G5R5A1_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8A8_UNORM\"] = 87] = \"DXGI_FORMAT_B8G8R8A8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8X8_UNORM\"] = 88] = \"DXGI_FORMAT_B8G8R8X8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM\"] = 89] = \"DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8A8_TYPELESS\"] = 90] = \"DXGI_FORMAT_B8G8R8A8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8A8_UNORM_SRGB\"] = 91] = \"DXGI_FORMAT_B8G8R8A8_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8X8_TYPELESS\"] = 92] = \"DXGI_FORMAT_B8G8R8X8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8X8_UNORM_SRGB\"] = 93] = \"DXGI_FORMAT_B8G8R8X8_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC6H_TYPELESS\"] = 94] = \"DXGI_FORMAT_BC6H_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC6H_UF16\"] = 95] = \"DXGI_FORMAT_BC6H_UF16\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC6H_SF16\"] = 96] = \"DXGI_FORMAT_BC6H_SF16\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC7_TYPELESS\"] = 97] = \"DXGI_FORMAT_BC7_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC7_UNORM\"] = 98] = \"DXGI_FORMAT_BC7_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC7_UNORM_SRGB\"] = 99] = \"DXGI_FORMAT_BC7_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_AYUV\"] = 100] = \"DXGI_FORMAT_AYUV\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_Y410\"] = 101] = \"DXGI_FORMAT_Y410\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_Y416\"] = 102] = \"DXGI_FORMAT_Y416\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_NV12\"] = 103] = \"DXGI_FORMAT_NV12\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_P010\"] = 104] = \"DXGI_FORMAT_P010\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_P016\"] = 105] = \"DXGI_FORMAT_P016\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_420_OPAQUE\"] = 106] = \"DXGI_FORMAT_420_OPAQUE\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_YUY2\"] = 107] = \"DXGI_FORMAT_YUY2\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_Y210\"] = 108] = \"DXGI_FORMAT_Y210\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_Y216\"] = 109] = \"DXGI_FORMAT_Y216\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_NV11\"] = 110] = \"DXGI_FORMAT_NV11\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_AI44\"] = 111] = \"DXGI_FORMAT_AI44\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_IA44\"] = 112] = \"DXGI_FORMAT_IA44\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_P8\"] = 113] = \"DXGI_FORMAT_P8\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_A8P8\"] = 114] = \"DXGI_FORMAT_A8P8\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B4G4R4A4_UNORM\"] = 115] = \"DXGI_FORMAT_B4G4R4A4_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_P208\"] = 116] = \"DXGI_FORMAT_P208\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_V208\"] = 117] = \"DXGI_FORMAT_V208\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_V408\"] = 118] = \"DXGI_FORMAT_V408\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE\"] = 119] = \"DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE\"] = 120] = \"DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_FORCE_UINT\"] = 121] = \"DXGI_FORMAT_FORCE_UINT\";\n})(DXGI_FORMAT || (DXGI_FORMAT = {}));\n/**\n * Possible values of the field {@link DDS_DX10_FIELDS.RESOURCE_DIMENSION}\n *\n * @ignore\n */\n\n\nvar D3D10_RESOURCE_DIMENSION;\n\n(function (D3D10_RESOURCE_DIMENSION) {\n  D3D10_RESOURCE_DIMENSION[D3D10_RESOURCE_DIMENSION[\"DDS_DIMENSION_TEXTURE1D\"] = 2] = \"DDS_DIMENSION_TEXTURE1D\";\n  D3D10_RESOURCE_DIMENSION[D3D10_RESOURCE_DIMENSION[\"DDS_DIMENSION_TEXTURE2D\"] = 3] = \"DDS_DIMENSION_TEXTURE2D\";\n  D3D10_RESOURCE_DIMENSION[D3D10_RESOURCE_DIMENSION[\"DDS_DIMENSION_TEXTURE3D\"] = 6] = \"DDS_DIMENSION_TEXTURE3D\";\n})(D3D10_RESOURCE_DIMENSION || (D3D10_RESOURCE_DIMENSION = {}));\n\nvar PF_FLAGS = 1; // PIXEL_FORMAT flags\n\nvar DDPF_ALPHA = 0x2;\nvar DDPF_FOURCC = 0x4;\nvar DDPF_RGB = 0x40;\nvar DDPF_YUV = 0x200;\nvar DDPF_LUMINANCE = 0x20000; // Four character codes for DXTn formats\n\nvar FOURCC_DXT1 = 0x31545844;\nvar FOURCC_DXT3 = 0x33545844;\nvar FOURCC_DXT5 = 0x35545844;\nvar FOURCC_DX10 = 0x30315844; // Cubemap texture flag (for DDS_DX10_FIELDS.MISC_FLAG)\n\nvar DDS_RESOURCE_MISC_TEXTURECUBE = 0x4;\n/**\n * Maps `FOURCC_*` formats to internal formats (see {@link PIXI.INTERNAL_FORMATS}).\n *\n * @ignore\n */\n\nvar FOURCC_TO_FORMAT = (_a$1 = {}, _a$1[FOURCC_DXT1] = INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT, _a$1[FOURCC_DXT3] = INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT, _a$1[FOURCC_DXT5] = INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT, _a$1);\n/**\n * Maps {@link DXGI_FORMAT} to types/internal-formats (see {@link PIXI.TYPES}, {@link PIXI.INTERNAL_FORMATS})\n *\n * @ignore\n */\n\nvar DXGI_TO_FORMAT = (_b = {}, // WEBGL_compressed_texture_s3tc\n_b[DXGI_FORMAT.DXGI_FORMAT_BC1_TYPELESS] = INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT, _b[DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM] = INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT, _b[DXGI_FORMAT.DXGI_FORMAT_BC2_TYPELESS] = INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT, _b[DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM] = INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT, _b[DXGI_FORMAT.DXGI_FORMAT_BC3_TYPELESS] = INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT, _b[DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM] = INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT, // WEBGL_compressed_texture_s3tc_srgb\n_b[DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM_SRGB] = INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT, _b[DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM_SRGB] = INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT, _b[DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM_SRGB] = INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT, _b);\n/**\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n * @see https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide\n */\n\nvar DDSLoader =\n/** @class */\nfunction () {\n  function DDSLoader() {}\n\n  DDSLoader.use = function (resource, next) {\n    if (resource.extension === 'dds' && resource.data) {\n      try {\n        Object.assign(resource, registerCompressedTextures(resource.name || resource.url, DDSLoader.parse(resource.data), resource.metadata));\n      } catch (err) {\n        next(err);\n        return;\n      }\n    }\n\n    next();\n  };\n  /**\n   * Parses the DDS file header, generates base-textures, and puts them into the texture\n   * cache.\n   */\n\n\n  DDSLoader.parse = function (arrayBuffer) {\n    var data = new Uint32Array(arrayBuffer);\n    var magicWord = data[0];\n\n    if (magicWord !== DDS_MAGIC) {\n      throw new Error('Invalid DDS file magic word');\n    }\n\n    var header = new Uint32Array(arrayBuffer, 0, DDS_HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT); // DDS header fields\n\n    var height = header[DDS_FIELDS.HEIGHT];\n    var width = header[DDS_FIELDS.WIDTH];\n    var mipmapCount = header[DDS_FIELDS.MIPMAP_COUNT]; // PIXEL_FORMAT fields\n\n    var pixelFormat = new Uint32Array(arrayBuffer, DDS_FIELDS.PIXEL_FORMAT * Uint32Array.BYTES_PER_ELEMENT, DDS_HEADER_PF_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n    var formatFlags = pixelFormat[PF_FLAGS]; // File contains compressed texture(s)\n\n    if (formatFlags & DDPF_FOURCC) {\n      var fourCC = pixelFormat[DDS_PF_FIELDS.FOURCC]; // File contains one DXTn compressed texture\n\n      if (fourCC !== FOURCC_DX10) {\n        var internalFormat_1 = FOURCC_TO_FORMAT[fourCC];\n        var dataOffset_1 = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n        var texData = new Uint8Array(arrayBuffer, dataOffset_1);\n        var resource = new CompressedTextureResource(texData, {\n          format: internalFormat_1,\n          width: width,\n          height: height,\n          levels: mipmapCount // CompressedTextureResource will separate the levelBuffers for us!\n\n        });\n        return [resource];\n      } // FOURCC_DX10 indicates there is a 20-byte DDS_HEADER_DX10 after DDS_HEADER\n\n\n      var dx10Offset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n      var dx10Header = new Uint32Array(data.buffer, dx10Offset, DDS_HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n      var dxgiFormat = dx10Header[DDS_DX10_FIELDS.DXGI_FORMAT];\n      var resourceDimension = dx10Header[DDS_DX10_FIELDS.RESOURCE_DIMENSION];\n      var miscFlag = dx10Header[DDS_DX10_FIELDS.MISC_FLAG];\n      var arraySize = dx10Header[DDS_DX10_FIELDS.ARRAY_SIZE]; // Map dxgiFormat to PIXI.INTERNAL_FORMATS\n\n      var internalFormat_2 = DXGI_TO_FORMAT[dxgiFormat];\n\n      if (internalFormat_2 === undefined) {\n        throw new Error(\"DDSLoader cannot parse texture data with DXGI format \" + dxgiFormat);\n      }\n\n      if (miscFlag === DDS_RESOURCE_MISC_TEXTURECUBE) {\n        // FIXME: Anybody excited about cubemap compressed textures?\n        throw new Error('DDSLoader does not support cubemap textures');\n      }\n\n      if (resourceDimension === D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE3D) {\n        // FIXME: Anybody excited about 3D compressed textures?\n        throw new Error('DDSLoader does not supported 3D texture data');\n      } // Uint8Array buffers of image data, including all mipmap levels in each image\n\n\n      var imageBuffers = new Array();\n      var dataOffset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE + DDS_HEADER_DX10_SIZE;\n\n      if (arraySize === 1) {\n        // No need bothering with the imageSize calculation!\n        imageBuffers.push(new Uint8Array(arrayBuffer, dataOffset));\n      } else {\n        // Calculate imageSize for each texture, and then locate each image's texture data\n        var pixelSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[internalFormat_2];\n        var imageSize = 0;\n        var levelWidth = width;\n        var levelHeight = height;\n\n        for (var i = 0; i < mipmapCount; i++) {\n          var alignedLevelWidth = Math.max(1, levelWidth + 3 & ~3);\n          var alignedLevelHeight = Math.max(1, levelHeight + 3 & ~3);\n          var levelSize = alignedLevelWidth * alignedLevelHeight * pixelSize;\n          imageSize += levelSize;\n          levelWidth = levelWidth >>> 1;\n          levelHeight = levelHeight >>> 1;\n        }\n\n        var imageOffset = dataOffset; // NOTE: Cubemaps have 6-images per texture (but they aren't supported so ^_^)\n\n        for (var i = 0; i < arraySize; i++) {\n          imageBuffers.push(new Uint8Array(arrayBuffer, imageOffset, imageSize));\n          imageOffset += imageSize;\n        }\n      } // Uint8Array -> CompressedTextureResource, and we're done!\n\n\n      return imageBuffers.map(function (buffer) {\n        return new CompressedTextureResource(buffer, {\n          format: internalFormat_2,\n          width: width,\n          height: height,\n          levels: mipmapCount\n        });\n      });\n    }\n\n    if (formatFlags & DDPF_RGB) {\n      // FIXME: We might want to allow uncompressed *.dds files?\n      throw new Error('DDSLoader does not support uncompressed texture data.');\n    }\n\n    if (formatFlags & DDPF_YUV) {\n      // FIXME: Does anybody need this feature?\n      throw new Error('DDSLoader does not supported YUV uncompressed texture data.');\n    }\n\n    if (formatFlags & DDPF_LUMINANCE) {\n      // FIXME: Microsoft says older DDS filers use this feature! Probably not worth the effort!\n      throw new Error('DDSLoader does not support single-channel (lumninance) texture data!');\n    }\n\n    if (formatFlags & DDPF_ALPHA) {\n      // FIXME: I'm tired! See above =)\n      throw new Error('DDSLoader does not support single-channel (alpha) texture data!');\n    }\n\n    throw new Error('DDSLoader failed to load a texture file due to an unknown reason!');\n  };\n\n  return DDSLoader;\n}();\n\nvar _a$2, _b$1, _c; // Set KTX files to be loaded as an ArrayBuffer\n\n\nLoaderResource.setExtensionXhrType('ktx', LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n/**\n * The 12-byte KTX file identifier\n *\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.1\n * @ignore\n */\n\nvar FILE_IDENTIFIER = [0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A];\n/**\n * The value stored in the \"endianness\" field.\n *\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.2\n * @ignore\n */\n\nvar ENDIANNESS = 0x04030201;\n/**\n * Byte offsets of the KTX file header fields\n *\n * @ignore\n */\n\nvar KTX_FIELDS = {\n  FILE_IDENTIFIER: 0,\n  ENDIANNESS: 12,\n  GL_TYPE: 16,\n  GL_TYPE_SIZE: 20,\n  GL_FORMAT: 24,\n  GL_INTERNAL_FORMAT: 28,\n  GL_BASE_INTERNAL_FORMAT: 32,\n  PIXEL_WIDTH: 36,\n  PIXEL_HEIGHT: 40,\n  PIXEL_DEPTH: 44,\n  NUMBER_OF_ARRAY_ELEMENTS: 48,\n  NUMBER_OF_FACES: 52,\n  NUMBER_OF_MIPMAP_LEVELS: 56,\n  BYTES_OF_KEY_VALUE_DATA: 60\n};\n/**\n * Byte size of the file header fields in {@code KTX_FIELDS}\n *\n * @ignore\n */\n\nvar FILE_HEADER_SIZE = 64;\n/**\n * Maps {@link PIXI.TYPES} to the bytes taken per component, excluding those ones that are bit-fields.\n *\n * @ignore\n */\n\nvar TYPES_TO_BYTES_PER_COMPONENT = (_a$2 = {}, _a$2[TYPES.UNSIGNED_BYTE] = 1, _a$2[TYPES.UNSIGNED_SHORT] = 2, _a$2[TYPES.FLOAT] = 4, _a$2[TYPES.HALF_FLOAT] = 8, _a$2);\n/**\n * Number of components in each {@link PIXI.FORMATS}\n *\n * @ignore\n */\n\nvar FORMATS_TO_COMPONENTS = (_b$1 = {}, _b$1[FORMATS.RGBA] = 4, _b$1[FORMATS.RGB] = 3, _b$1[FORMATS.LUMINANCE] = 1, _b$1[FORMATS.LUMINANCE_ALPHA] = 2, _b$1[FORMATS.ALPHA] = 1, _b$1);\n/**\n * Number of bytes per pixel in bit-field types in {@link PIXI.TYPES}\n *\n * @ignore\n */\n\nvar TYPES_TO_BYTES_PER_PIXEL = (_c = {}, _c[TYPES.UNSIGNED_SHORT_4_4_4_4] = 2, _c[TYPES.UNSIGNED_SHORT_5_5_5_1] = 2, _c[TYPES.UNSIGNED_SHORT_5_6_5] = 2, _c);\n/**\n * Loader plugin for handling KTX texture container files.\n *\n * This KTX loader does not currently support the following features:\n * * cube textures\n * * 3D textures\n * * vendor-specific key/value data parsing\n * * endianness conversion for big-endian machines\n * * embedded *.basis files\n *\n * It does supports the following features:\n * * multiple textures per file\n * * mipmapping\n *\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\n\nvar KTXLoader =\n/** @class */\nfunction () {\n  function KTXLoader() {}\n  /**\n   * Called after a KTX file is loaded.\n   *\n   * This will parse the KTX file header and add a {@code BaseTexture} to the texture\n   * cache.\n   *\n   * @see PIXI.Loader.loaderMiddleware\n   * @param {PIXI.LoaderResource} resource\n   * @param {function} next\n   */\n\n\n  KTXLoader.use = function (resource, next) {\n    if (resource.extension === 'ktx' && resource.data) {\n      try {\n        var url = resource.name || resource.url;\n        Object.assign(resource, registerCompressedTextures(url, KTXLoader.parse(url, resource.data), resource.metadata));\n      } catch (err) {\n        next(err);\n        return;\n      }\n    }\n\n    next();\n  };\n  /**\n   * Parses the KTX file header, generates base-textures, and puts them into the texture\n   * cache.\n   */\n\n\n  KTXLoader.parse = function (url, arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n\n    if (!KTXLoader.validate(url, dataView)) {\n      return null;\n    }\n\n    var littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n    var glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian); // const glTypeSize = dataView.getUint32(KTX_FIELDS.GL_TYPE_SIZE, littleEndian);\n\n    var glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n    var glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n    var pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n    var pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1; // \"pixelHeight = 0\" -> \"1\"\n\n    var pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1; // ^^\n\n    var numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1; // ^^\n\n    var numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n    var numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n    var bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian); // Whether the platform architecture is little endian. If littleEndian !== platformLittleEndian, then the\n    // file contents must be endian-converted!\n    // TODO: Endianness conversion\n    // const platformLittleEndian = new Uint8Array((new Uint32Array([ENDIANNESS])).buffer)[0] === 0x01;\n\n    if (pixelHeight === 0 || pixelDepth !== 1) {\n      throw new Error('Only 2D textures are supported');\n    }\n\n    if (numberOfFaces !== 1) {\n      throw new Error('CubeTextures are not supported by KTXLoader yet!');\n    }\n\n    if (numberOfArrayElements !== 1) {\n      // TODO: Support splitting array-textures into multiple BaseTextures\n      throw new Error('WebGL does not support array textures');\n    } // TODO: 8x4 blocks for 2bpp pvrtc\n\n\n    var blockWidth = 4;\n    var blockHeight = 4;\n    var alignedWidth = pixelWidth + 3 & ~3;\n    var alignedHeight = pixelHeight + 3 & ~3;\n    var imageBuffers = new Array(numberOfArrayElements);\n    var imagePixels = pixelWidth * pixelHeight;\n\n    if (glType === 0) {\n      // Align to 16 pixels (4x4 blocks)\n      imagePixels = alignedWidth * alignedHeight;\n    }\n\n    var imagePixelByteSize;\n\n    if (glType !== 0) {\n      // Uncompressed texture format\n      if (TYPES_TO_BYTES_PER_COMPONENT[glType]) {\n        imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n      } else {\n        imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n      }\n    } else {\n      imagePixelByteSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n    }\n\n    if (imagePixelByteSize === undefined) {\n      throw new Error('Unable to resolve the pixel format stored in the *.ktx file!');\n    }\n\n    var imageByteSize = imagePixels * imagePixelByteSize;\n    var mipByteSize = imageByteSize;\n    var mipWidth = pixelWidth;\n    var mipHeight = pixelHeight;\n    var alignedMipWidth = alignedWidth;\n    var alignedMipHeight = alignedHeight;\n    var imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n\n    for (var mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++) {\n      var imageSize = dataView.getUint32(imageOffset, littleEndian);\n      var elementOffset = imageOffset + 4;\n\n      for (var arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++) {\n        // TODO: Maybe support 3D textures? :-)\n        // for (let zSlice = 0; zSlice < pixelDepth; zSlice)\n        var mips = imageBuffers[arrayElement];\n\n        if (!mips) {\n          mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n        }\n\n        mips[mipmapLevel] = {\n          levelID: mipmapLevel,\n          levelWidth: numberOfMipmapLevels > 1 ? mipWidth : alignedMipWidth,\n          levelHeight: numberOfMipmapLevels > 1 ? mipHeight : alignedMipHeight,\n          levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n        };\n        elementOffset += mipByteSize;\n      } // HINT: Aligns to 4-byte boundary after jumping imageSize (in lieu of mipPadding)\n\n\n      imageOffset += imageSize + 4; // (+4 to jump the imageSize field itself)\n\n      imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - imageOffset % 4 : imageOffset; // Calculate mipWidth, mipHeight for _next_ iteration\n\n      mipWidth = mipWidth >> 1 || 1;\n      mipHeight = mipHeight >> 1 || 1;\n      alignedMipWidth = mipWidth + blockWidth - 1 & ~(blockWidth - 1);\n      alignedMipHeight = mipHeight + blockHeight - 1 & ~(blockHeight - 1); // Each mipmap level is 4-times smaller?\n\n      mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n    } // We use the levelBuffers feature of CompressedTextureResource b/c texture data is image-major, not level-major.\n\n\n    if (glType !== 0) {\n      throw new Error('TODO: Uncompressed');\n    }\n\n    return imageBuffers.map(function (levelBuffers) {\n      return new CompressedTextureResource(null, {\n        format: glInternalFormat,\n        width: pixelWidth,\n        height: pixelHeight,\n        levels: numberOfMipmapLevels,\n        levelBuffers: levelBuffers\n      });\n    });\n  };\n  /**\n   * Checks whether the arrayBuffer contains a valid *.ktx file.\n   */\n\n\n  KTXLoader.validate = function (url, dataView) {\n    // NOTE: Do not optimize this into 3 32-bit integer comparison because the endianness\n    // of the data is not specified.\n    for (var i = 0; i < FILE_IDENTIFIER.length; i++) {\n      if (dataView.getUint8(i) !== FILE_IDENTIFIER[i]) {\n        console.error(url + \" is not a valid *.ktx file!\");\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  return KTXLoader;\n}();\n\nexport { BlobResource, CompressedTextureLoader, CompressedTextureResource, DDSLoader, FORMATS_TO_COMPONENTS, INTERNAL_FORMATS, INTERNAL_FORMAT_TO_BYTES_PER_PIXEL, KTXLoader, TYPES_TO_BYTES_PER_COMPONENT, TYPES_TO_BYTES_PER_PIXEL };","map":{"version":3,"sources":["../../src/const.ts","../../../../node_modules/tslib/tslib.es6.js","../../src/resources/BlobResource.ts","../../src/resources/CompressedTextureResource.ts","../../src/loaders/CompressedTextureLoader.ts","../../src/loaders/registerCompressedTextures.ts","../../src/loaders/DDSLoader.ts","../../src/loaders/KTXLoader.ts"],"names":["_a","_b"],"mappings":"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WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,wBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,wBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,gBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,4BAAA,CAAA,GAAA,GAAA,CAAA,GAAA,4BAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,kBAAA;AACA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","sourcesContent":["/**\n * WebGL internal formats, including compressed texture formats provided by extensions\n *\n * @memberof PIXI\n * @static\n * @name INTERNAL_FORMATS\n * @enum {number}\n * @property {number} COMPRESSED_RGB_S3TC_DXT1_EXT=0x83F0\n * @property {number} COMPRESSED_RGBA_S3TC_DXT1_EXT=0x83F1\n * @property {number} COMPRESSED_RGBA_S3TC_DXT3_EXT=0x83F2\n * @property {number} COMPRESSED_RGBA_S3TC_DXT5_EXT=0x83F3\n * @property {number} COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT=35917\n * @property {number} COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT=35918\n * @property {number} COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT=35919\n * @property {number} COMPRESSED_SRGB_S3TC_DXT1_EXT=35916\n * @property {number} COMPRESSED_R11_EAC=0x9270\n * @property {number} COMPRESSED_SIGNED_R11_EAC=0x9271\n * @property {number} COMPRESSED_RG11_EAC=0x9272\n * @property {number} COMPRESSED_SIGNED_RG11_EAC=0x9273\n * @property {number} COMPRESSED_RGB8_ETC2=0x9274\n * @property {number} COMPRESSED_RGBA8_ETC2_EAC=0x9278\n * @property {number} COMPRESSED_SRGB8_ETC2=0x9275\n * @property {number} COMPRESSED_SRGB8_ALPHA8_ETC2_EAC=0x9279\n * @property {number} COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9276\n * @property {number} COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9277\n * @property {number} COMPRESSED_RGB_PVRTC_4BPPV1_IMG=0x8C00\n * @property {number} COMPRESSED_RGBA_PVRTC_4BPPV1_IMG=0x8C02\n * @property {number} COMPRESSED_RGB_PVRTC_2BPPV1_IMG=0x8C01\n * @property {number} COMPRESSED_RGBA_PVRTC_2BPPV1_IMG=0x8C03\n * @property {number} COMPRESSED_RGB_ETC1_WEBGL=0x8D64\n * @property {number} COMPRESSED_RGB_ATC_WEBGL=0x8C92\n * @property {number} COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL=0x8C92\n * @property {number} COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL=0x87EE\n */\nexport enum INTERNAL_FORMATS {\n    // WEBGL_compressed_texture_s3tc\n    COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,\n    COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,\n    COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,\n    COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,\n\n    // WEBGL_compressed_texture_s3tc_srgb\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917,\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918,\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919,\n    COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916,\n\n    // WEBGL_compressed_texture_etc\n    COMPRESSED_R11_EAC = 0x9270,\n    COMPRESSED_SIGNED_R11_EAC = 0x9271,\n    COMPRESSED_RG11_EAC = 0x9272,\n    COMPRESSED_SIGNED_RG11_EAC = 0x9273,\n    COMPRESSED_RGB8_ETC2 = 0x9274,\n    COMPRESSED_RGBA8_ETC2_EAC = 0x9278,\n    COMPRESSED_SRGB8_ETC2 = 0x9275,\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\n\n    // WEBGL_compressed_texture_pvrtc\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00,\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02,\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01,\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03,\n\n    // WEBGL_compressed_texture_etc1\n    COMPRESSED_RGB_ETC1_WEBGL = 0x8D64,\n\n    // WEBGL_compressed_texture_atc\n    COMPRESSED_RGB_ATC_WEBGL = 0x8C92,\n    COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C92, // TODO: Probably a bug on the MDN site\n    COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE,\n}\n\n/**\n * Maps the compressed texture formats in {@link PIXI.INTERNAL_FORMATS} to the number of bytes taken by\n * each texel.\n *\n * @memberof PIXI\n * @static\n * @ignore\n */\nexport const INTERNAL_FORMAT_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    // WEBGL_compressed_texture_s3tc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT]: 1,\n\n    // WEBGL_compressed_texture_s3tc\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT]: 1,\n\n    // WEBGL_compressed_texture_etc\n    [INTERNAL_FORMATS.COMPRESSED_R11_EAC]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SIGNED_R11_EAC]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RG11_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SIGNED_RG11_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGB8_ETC2]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA8_ETC2_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_ETC2]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: 0.5, // ~~\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: 0.5, // ~~\n\n    // WEBGL_compressed_texture_pvrtc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: 0.25,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: 0.25,\n\n    // WEBGL_compressed_texture_etc1\n    [INTERNAL_FORMATS.COMPRESSED_RGB_ETC1_WEBGL]: 0.5,\n\n    // @see https://www.khronos.org/registry/OpenGL/extensions/AMD/AMD_compressed_ATC_texture.txt\n    // WEBGL_compressed_texture_atc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_ATC_WEBGL]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: 1\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Resource, ViewableBuffer, BufferResource } from '@pixi/core';\n\ninterface IBlobOptions\n{\n    autoLoad?: boolean;\n    width: number;\n    height: number;\n}\n\n/**\n * Resource that fetches texture data over the network and stores it in a buffer.\n *\n * @class\n * @extends PIXI.Resource\n * @memberof PIXI\n */\nexport abstract class BlobResource extends BufferResource\n{\n    protected origin: string;\n    protected buffer: ViewableBuffer;\n    protected loaded: boolean;\n\n    /**\n     * @param {string} url - the URL of the texture file\n     * @param {boolean}[autoLoad] - whether to fetch the data immediately;\n     *  you can fetch it later via {@link BlobResource#load}\n     */\n    constructor(source: string | Uint8Array | Uint32Array | Float32Array,\n        options: IBlobOptions = { width: 1, height: 1, autoLoad: true })\n    {\n        let origin: string;\n        let data: Uint8Array | Uint32Array | Float32Array;\n\n        if (typeof source === 'string')\n        {\n            origin = source;\n            data = new Uint8Array();\n        }\n        else\n        {\n            origin = null;\n            data = source;\n        }\n\n        super(data, options);\n\n        /**\n         * The URL of the texture file\n         * @member {string}\n         */\n        this.origin = origin;\n\n        /**\n         * The viewable buffer on the data\n         * @member {ViewableBuffer}\n         */\n        // HINT: BlobResource allows \"null\" sources, assuming the child class provides an alternative\n        this.buffer = data ? new ViewableBuffer(data) : null;\n\n        // Allow autoLoad = \"undefined\" still load the resource by default\n        if (this.origin && options.autoLoad !== false)\n        {\n            this.load();\n        }\n        if (data && data.length)\n        {\n            this.loaded = true;\n            this.onBlobLoaded(this.buffer.rawBinaryData);\n        }\n    }\n\n    protected onBlobLoaded(_data: ArrayBuffer): void\n    {\n        // TODO: Override this method\n    }\n\n    /**\n     * Loads the blob\n     */\n    async load(): Promise<Resource>\n    {\n        const response = await fetch(this.origin);\n        const blob = await response.blob();\n        const arrayBuffer = await blob.arrayBuffer();\n\n        this.data = new Uint32Array(arrayBuffer);\n        this.buffer = new ViewableBuffer(arrayBuffer);\n        this.loaded = true;\n\n        this.onBlobLoaded(arrayBuffer);\n        this.update();\n\n        return this;\n    }\n}\n","import { BlobResource } from './BlobResource';\nimport { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { Renderer, BaseTexture, GLTexture } from '@pixi/core';\n\nimport type { INTERNAL_FORMATS } from '../const';\n\n/**\n * @ignore\n */\n// Used in PIXI.KTXLoader\nexport type CompressedLevelBuffer = {\n    levelID: number,\n    levelWidth: number,\n    levelHeight: number,\n    levelBuffer: Uint8Array\n};\n\n/**\n * @ignore\n */\nexport interface ICompressedTextureResourceOptions\n{\n    format: INTERNAL_FORMATS;\n    width: number;\n    height: number;\n    levels?: number;\n    levelBuffers?: CompressedLevelBuffer[];\n}\n\n/**\n * Resource for compressed texture formats, as follows: S3TC/DXTn (& their sRGB formats), ATC, ASTC, ETC 1/2, PVRTC.\n *\n * Compressed textures improve performance when rendering is texture-bound. The texture data stays compressed in\n * graphics memory, increasing memory locality and speeding up texture fetches. These formats can also be used to store\n * more detail in the same amount of memory.\n *\n * For most developers, container file formats are a better abstraction instead of directly handling raw texture\n * data. PixiJS provides native support for the following texture file formats (via {@link PIXI.Loader}):\n *\n * * **.dds** - the DirectDraw Surface file format stores DXTn (DXT-1,3,5) data. See {@link PIXI.DDSLoader}\n * * **.ktx** - the Khronos Texture Container file format supports storing all the supported WebGL compression formats.\n *  See {@link PIXI.KTXLoader}.\n * * **.basis** - the BASIS supercompressed file format stores texture data in an internal format that is transcoded\n *  to the compression format supported on the device at _runtime_. It also supports transcoding into a uncompressed\n *  format as a fallback; you must install the `@pixi/basis-loader`, `@pixi/basis-transcoder` packages separately to\n *  use these files. See {@link PIXI.BasisLoader}.\n *\n * The loaders for the aforementioned formats use `CompressedTextureResource` internally. It is strongly suggested that\n * they be used instead.\n *\n * ## Working directly with CompressedTextureResource\n *\n * Since `CompressedTextureResource` inherits `BlobResource`, you can provide it a URL pointing to a file containing\n * the raw texture data (with no file headers!):\n *\n * ```js\n * // The resource backing the texture data for your textures.\n * // NOTE: You can also provide a ArrayBufferView instead of a URL. This is used when loading data from a container file\n * //   format such as KTX, DDS, or BASIS.\n * const compressedResource = new PIXI.CompressedTextureResource(\"bunny.dxt5\", {\n *   format: PIXI.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n *   width: 256,\n *   height: 256\n * });\n *\n * // You can create a base-texture to the cache, so that future `Texture`s can be created using the `Texture.from` API.\n * const baseTexture = new PIXI.BaseTexture(compressedResource, { pmaMode: PIXI.ALPHA_MODES.NPM });\n *\n * // Create a Texture to add to the TextureCache\n * const texture = new PIXI.Texture(baseTexture);\n *\n * // Add baseTexture & texture to the global texture cache\n * PIXI.BaseTexture.addToCache(baseTexture, \"bunny.dxt5\");\n * PIXI.Texture.addToCache(texture, \"bunny.dxt5\");\n * ```\n *\n * @memberof PIXI\n */\nexport class CompressedTextureResource extends BlobResource\n{\n    public format: INTERNAL_FORMATS;\n    public levels: number;\n\n    // Easy access to the WebGL extension providing support for the compression format via ContextSystem\n    private _extension: 's3tc' | 's3tc_sRGB' | 'atc' | 'astc' | 'etc' | 'etc1' | 'pvrtc';\n    // Buffer views for each mipmap level in the main buffer\n    private _levelBuffers: CompressedLevelBuffer[];\n\n    /**\n     * @param source - the buffer/URL holding the compressed texture data\n     * @param options\n     * @param {PIXI.INTERNAL_FORMATS} options.format - the compression format\n     * @param {number} options.width - the image width in pixels.\n     * @param {number} options.height - the image height in pixels.\n     * @param {number}[options.level=1] - the mipmap levels stored in the compressed texture, including level 0.\n     * @param {number}[options.levelBuffers] - the buffers for each mipmap level. `CompressedTextureResource` can allows you\n     *      to pass `null` for `source`, for cases where each level is stored in non-contiguous memory.\n     */\n    constructor(source: string | Uint8Array | Uint32Array, options: ICompressedTextureResourceOptions)\n    {\n        super(source, options);\n\n        /**\n         * The compression format\n         */\n        this.format = options.format;\n\n        /**\n         * The number of mipmap levels stored in the resource buffer.\n         *\n         * @default 1\n         */\n        this.levels = options.levels || 1;\n\n        this._width = options.width;\n        this._height = options.height;\n\n        this._extension = CompressedTextureResource._formatToExtension(this.format);\n\n        if (options.levelBuffers || this.buffer)\n        {\n            // ViewableBuffer doesn't support byteOffset :-( so allow source to be Uint8Array\n            this._levelBuffers = options.levelBuffers\n                || CompressedTextureResource._createLevelBuffers(\n                    source instanceof Uint8Array ? source : this.buffer.uint8View,\n                    this.format,\n                    this.levels,\n                    4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n                    this.width,\n                    this.height);\n        }\n    }\n\n    /**\n     * @override\n     * @param renderer\n     * @param _texture\n     * @param _glTexture\n     */\n    upload(renderer: Renderer, _texture: BaseTexture, _glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n        const extension = renderer.context.extensions[this._extension];\n\n        if (!extension)\n        {\n            throw new Error(`${this._extension} textures are not supported on the current machine`);\n        }\n        if (!this._levelBuffers)\n        {\n            // Do not try to upload data before BlobResource loads, unless the levelBuffers were provided directly!\n            return false;\n        }\n\n        for (let i = 0, j = this.levels; i < j; i++)\n        {\n            const { levelID, levelWidth, levelHeight, levelBuffer } = this._levelBuffers[i];\n\n            gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n        }\n\n        return true;\n    }\n\n    /**\n     * @protected\n     */\n    protected onBlobLoaded(): void\n    {\n        this._levelBuffers = CompressedTextureResource._createLevelBuffers(\n            this.buffer.uint8View,\n            this.format,\n            this.levels,\n            4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n            this.width,\n            this.height);\n    }\n\n    /**\n     * Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format\n     *\n     * @private\n     * @param {PIXI.INTERNAL_FORMATS} format\n     * @return {string}\n     */\n    private static _formatToExtension(format: INTERNAL_FORMATS):\n        's3tc' | 's3tc_sRGB' | 'atc' |\n        'astc' | 'etc' | 'etc1' | 'pvrtc'\n    {\n        if (format >= 0x83F0 && format <= 0x83F3)\n        {\n            return 's3tc';\n        }\n        else if (format >= 0x9270 && format <= 0x9279)\n        {\n            return 'etc';\n        }\n        else if (format >= 0x8C00 && format <= 0x8C03)\n        {\n            return 'pvrtc';\n        }\n        else if (format >= 0x8D64)\n        {\n            return 'etc1';\n        }\n        else if (format >= 0x8C92 && format <= 0x87EE)\n        {\n            return 'atc';\n        }\n\n        throw new Error('Invalid (compressed) texture format given!');\n    }\n\n    /**\n     * Pre-creates buffer views for each mipmap level\n     *\n     * @private\n     * @param {Uint8Array} buffer\n     * @param {PIXI.INTERNAL_FORMATS} format\n     * @param {number} levels\n     * @param {number} blockWidth\n     * @param {number} blockHeight\n     * @param {number} imageWidth\n     * @param {number} imageHeight\n     */\n    private static _createLevelBuffers(\n        buffer: Uint8Array,\n        format: INTERNAL_FORMATS,\n        levels: number,\n        blockWidth: number,\n        blockHeight: number,\n        imageWidth: number,\n        imageHeight: number\n    ): CompressedLevelBuffer[]\n    {\n        // The byte-size of the first level buffer\n        const buffers = new Array<CompressedLevelBuffer>(levels);\n\n        let offset = buffer.byteOffset;\n\n        let levelWidth = imageWidth;\n        let levelHeight = imageHeight;\n        let alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n        let alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n        let levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n\n        for (let i = 0; i < levels; i++)\n        {\n            buffers[i] = {\n                levelID: i,\n                levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n                levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n                levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n            };\n\n            offset += levelSize;\n\n            // Calculate levelBuffer dimensions for next iteration\n            levelWidth = (levelWidth >> 1) || 1;\n            levelHeight = (levelHeight >> 1) || 1;\n            alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n            alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n            levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n        }\n\n        return buffers;\n    }\n}\n","import { LoaderResource } from '@pixi/loaders';\nimport { url } from '@pixi/utils';\n\nimport type { Loader, ILoaderResource } from '@pixi/loaders';\nimport type { INTERNAL_FORMATS } from '../const';\n\n/**\n * Schema for compressed-texture manifests\n *\n * @ignore\n * @see PIXI.CompressedTextureLoader\n */\nexport type CompressedTextureManifest = {\n    textures: Array<{ src: string, format?: keyof INTERNAL_FORMATS}>,\n    cacheID: string;\n};\n\n// Missing typings? - https://github.com/microsoft/TypeScript/issues/39655\n/**\n * Compressed texture extensions\n */\n/* eslint-disable camelcase */\nexport type CompressedTextureExtensions = {\n    s3tc?: WEBGL_compressed_texture_s3tc,\n    s3tc_sRGB: WEBGL_compressed_texture_s3tc_srgb,\n    etc: any,\n    etc1: any,\n    pvrtc: any,\n    atc: any,\n    astc: WEBGL_compressed_texture_astc\n};\nexport type CompressedTextureExtensionRef = keyof CompressedTextureExtensions;\n/* eslint-enable camelcase */\n\n/**\n * Loader plugin for handling compressed textures for all platforms.\n *\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class CompressedTextureLoader\n{\n    /**\n     * Map of available texture extensions.\n     */\n    static textureExtensions: Partial<CompressedTextureExtensions>;\n\n    /**\n     * Map of available texture formats.\n     */\n    static textureFormats: { [P in keyof INTERNAL_FORMATS]?: number };\n\n    /**\n     * Called after a compressed-textures manifest is loaded.\n     *\n     * This will then load the correct compression format for the device. Your manifest should adhere\n     * to the following schema:\n     *\n     * ```js\n     * import { INTERNAL_FORMATS } from '@pixi/constants';\n     *\n     * // The following should be present in a *.compressed-texture.json file!\n     * const manifest = JSON.stringify({\n     *   COMPRESSED_RGBA_S3TC_DXT5_EXT: \"asset.s3tc.ktx\",\n     *   COMPRESSED_RGBA8_ETC2_EAC: \"asset.etc.ktx\",\n     *   RGBA_PVRTC_4BPPV1_IMG: \"asset.pvrtc.ktx\",\n     *   textureID: \"asset.png\",\n     *   fallback: \"asset.png\"\n     * });\n     * ```\n     */\n    static use(resource: ILoaderResource, next: (...args: any[]) => void): void\n    {\n        const data: CompressedTextureManifest = resource.data;\n        const loader = this as unknown as Loader;\n\n        if (resource.type === LoaderResource.TYPE.JSON\n            && data\n            && data.cacheID\n            && data.textures)\n        {\n            const textures = data.textures;\n\n            let textureURL: string;\n            let fallbackURL: string;\n\n            // Search for an extension that holds one the formats\n            for (let i = 0, j = textures.length; i < j; i++)\n            {\n                const texture = textures[i];\n                const url = texture.src;\n                const format = texture.format;\n\n                if (!format)\n                {\n                    fallbackURL = url;\n                }\n                if (CompressedTextureLoader.textureFormats[format])\n                {\n                    textureURL = url;\n                    break;\n                }\n            }\n\n            textureURL = textureURL || fallbackURL;\n\n            // Make sure we have a URL\n            if (!textureURL)\n            {\n                next(new Error(`Cannot load compressed-textures in ${resource.url}, make sure you provide a fallback`));\n\n                return;\n            }\n            if (textureURL === resource.url)\n            {\n                // Prevent infinite loops\n                next(new Error('URL of compressed texture cannot be the same as the manifest\\'s URL'));\n\n                return;\n            }\n\n            const loadOptions = {\n                crossOrigin: resource.crossOrigin,\n                metadata: resource.metadata.imageMetadata,\n                parentResource: resource\n            };\n\n            const resourcePath = url.resolve(resource.url.replace(loader.baseUrl, ''), textureURL);\n            const resourceName = data.cacheID;\n\n            // The appropriate loader should register the texture\n            loader.add(resourceName, resourcePath, loadOptions, (res: ILoaderResource) =>\n            {\n                if (res.error)\n                {\n                    next(res.error);\n\n                    return;\n                }\n\n                const { texture = null, textures = {} } = res;\n\n                // Make sure texture/textures is assigned to parent resource\n                Object.assign(resource, { texture, textures });\n\n                // Pass along any error\n                next();\n            });\n        }\n        else\n        {\n            next();\n        }\n    }\n\n    /**\n     * Detects the available compressed texture extensions on the device.\n     *\n     * @ignore\n     */\n    static add(): void\n    {\n        // Auto-detect WebGL compressed-texture extensions\n        const canvas = document.createElement('canvas');\n        const gl = canvas.getContext('webgl');\n\n        if (!gl)\n        {\n            // #if _DEBUG\n            console.error('WebGL not available for compressed textures. Silently failing.');\n            // #endif\n\n            return;\n        }\n\n        const extensions = {\n            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), /* eslint-disable-line camelcase */\n            etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n            astc: gl.getExtension('WEBGL_compressed_texture_astc')\n        };\n\n        CompressedTextureLoader.textureExtensions = extensions;\n        CompressedTextureLoader.textureFormats = {};\n\n        // Assign all available compressed-texture formats\n        for (const extensionName in extensions)\n        {\n            const extension = extensions[extensionName as CompressedTextureExtensionRef];\n\n            if (!extension)\n            {\n                continue;\n            }\n\n            Object.assign(\n                CompressedTextureLoader.textureFormats,\n                Object.getPrototypeOf(extension));\n        }\n    }\n}\n","import { MIPMAP_MODES, ALPHA_MODES } from '@pixi/constants';\nimport { BaseTexture, Texture } from '@pixi/core';\n\nimport type { ILoaderResource, IResourceMetadata } from '@pixi/loaders';\nimport type { CompressedTextureResource } from '../resources/CompressedTextureResource';\n\n/**\n * Result when calling registerCompressedTextures.\n * @ignore\n */\ntype CompressedTexturesResult = Pick<ILoaderResource, 'textures' | 'texture'>;\n\n/**\n * Creates base-textures and textures for each compressed-texture resource and adds them into the global\n * texture cache. The first texture has two IDs - `${url}`, `${url}-1`; while the rest have an ID of the\n * form `${url}-i`.\n *\n * @param url - the original address of the resources\n * @param resources - the resources backing texture data\n * @ignore\n */\nexport function registerCompressedTextures(url: string,\n    resources: CompressedTextureResource[],\n    metadata: IResourceMetadata): CompressedTexturesResult\n{\n    const result: CompressedTexturesResult = {\n        textures: {},\n        texture: null,\n    };\n\n    if (!resources)\n    {\n        return result;\n    }\n\n    const textures = resources.map((resource) =>\n        (\n            new Texture(new BaseTexture(resource, Object.assign({\n                mipmap: MIPMAP_MODES.OFF,\n                alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA\n            }, metadata)))\n        ));\n\n    textures.forEach((texture, i) =>\n    {\n        const { baseTexture } = texture;\n        const cacheID = `${url}-${i + 1}`;\n\n        BaseTexture.addToCache(baseTexture, cacheID);\n        Texture.addToCache(texture, cacheID);\n\n        if (i === 0)\n        {\n            BaseTexture.addToCache(baseTexture, url);\n            Texture.addToCache(texture, url);\n            result.texture = texture;\n        }\n\n        result.textures[cacheID] = texture;\n    });\n\n    return result;\n}\n","import { CompressedTextureResource } from '../resources';\nimport { INTERNAL_FORMATS, INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { LoaderResource } from '@pixi/loaders';\nimport { registerCompressedTextures } from './registerCompressedTextures';\n\nimport type { ILoaderResource } from '@pixi/loaders';\n\n// Set DDS files to be loaded as an ArrayBuffer\nLoaderResource.setExtensionXhrType('dds', LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n\nconst DDS_MAGIC_SIZE = 4;\nconst DDS_HEADER_SIZE = 124;\nconst DDS_HEADER_PF_SIZE = 32;\nconst DDS_HEADER_DX10_SIZE = 20;\n\n// DDS file format magic word\nconst DDS_MAGIC = 0x20534444;\n\n/**\n * DWORD offsets of the DDS file header fields (relative to file start).\n *\n * @ignore\n */\nconst DDS_FIELDS = {\n    SIZE: 1,\n    FLAGS: 2,\n    HEIGHT: 3,\n    WIDTH: 4,\n    MIPMAP_COUNT: 7,\n    PIXEL_FORMAT: 19,\n};\n\n/**\n * DWORD offsets of the DDS PIXEL_FORMAT fields.\n *\n * @ignore\n */\nconst DDS_PF_FIELDS = {\n    SIZE: 0,\n    FLAGS: 1,\n    FOURCC: 2,\n    RGB_BITCOUNT: 3,\n    R_BIT_MASK: 4,\n    G_BIT_MASK: 5,\n    B_BIT_MASK: 6,\n    A_BIT_MASK: 7\n};\n\n/**\n * DWORD offsets of the DDS_HEADER_DX10 fields.\n *\n * @ignore\n */\nconst DDS_DX10_FIELDS = {\n    DXGI_FORMAT: 0,\n    RESOURCE_DIMENSION: 1,\n    MISC_FLAG: 2,\n    ARRAY_SIZE: 3,\n    MISC_FLAGS2: 4\n};\n\n/**\n * @see https://docs.microsoft.com/en-us/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format\n * @ignore\n */\n// This is way over-blown for us! Lend us a hand, and remove the ones that aren't used (but set the remaining\n// ones to their correct value)\nenum DXGI_FORMAT {\n    DXGI_FORMAT_UNKNOWN,\n    DXGI_FORMAT_R32G32B32A32_TYPELESS,\n    DXGI_FORMAT_R32G32B32A32_FLOAT,\n    DXGI_FORMAT_R32G32B32A32_UINT,\n    DXGI_FORMAT_R32G32B32A32_SINT,\n    DXGI_FORMAT_R32G32B32_TYPELESS,\n    DXGI_FORMAT_R32G32B32_FLOAT,\n    DXGI_FORMAT_R32G32B32_UINT,\n    DXGI_FORMAT_R32G32B32_SINT,\n    DXGI_FORMAT_R16G16B16A16_TYPELESS,\n    DXGI_FORMAT_R16G16B16A16_FLOAT,\n    DXGI_FORMAT_R16G16B16A16_UNORM,\n    DXGI_FORMAT_R16G16B16A16_UINT,\n    DXGI_FORMAT_R16G16B16A16_SNORM,\n    DXGI_FORMAT_R16G16B16A16_SINT,\n    DXGI_FORMAT_R32G32_TYPELESS,\n    DXGI_FORMAT_R32G32_FLOAT,\n    DXGI_FORMAT_R32G32_UINT,\n    DXGI_FORMAT_R32G32_SINT,\n    DXGI_FORMAT_R32G8X24_TYPELESS,\n    DXGI_FORMAT_D32_FLOAT_S8X24_UINT,\n    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,\n    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,\n    DXGI_FORMAT_R10G10B10A2_TYPELESS,\n    DXGI_FORMAT_R10G10B10A2_UNORM,\n    DXGI_FORMAT_R10G10B10A2_UINT,\n    DXGI_FORMAT_R11G11B10_FLOAT,\n    DXGI_FORMAT_R8G8B8A8_TYPELESS,\n    DXGI_FORMAT_R8G8B8A8_UNORM,\n    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,\n    DXGI_FORMAT_R8G8B8A8_UINT,\n    DXGI_FORMAT_R8G8B8A8_SNORM,\n    DXGI_FORMAT_R8G8B8A8_SINT,\n    DXGI_FORMAT_R16G16_TYPELESS,\n    DXGI_FORMAT_R16G16_FLOAT,\n    DXGI_FORMAT_R16G16_UNORM,\n    DXGI_FORMAT_R16G16_UINT,\n    DXGI_FORMAT_R16G16_SNORM,\n    DXGI_FORMAT_R16G16_SINT,\n    DXGI_FORMAT_R32_TYPELESS,\n    DXGI_FORMAT_D32_FLOAT,\n    DXGI_FORMAT_R32_FLOAT,\n    DXGI_FORMAT_R32_UINT,\n    DXGI_FORMAT_R32_SINT,\n    DXGI_FORMAT_R24G8_TYPELESS,\n    DXGI_FORMAT_D24_UNORM_S8_UINT,\n    DXGI_FORMAT_R24_UNORM_X8_TYPELESS,\n    DXGI_FORMAT_X24_TYPELESS_G8_UINT,\n    DXGI_FORMAT_R8G8_TYPELESS,\n    DXGI_FORMAT_R8G8_UNORM,\n    DXGI_FORMAT_R8G8_UINT,\n    DXGI_FORMAT_R8G8_SNORM,\n    DXGI_FORMAT_R8G8_SINT,\n    DXGI_FORMAT_R16_TYPELESS,\n    DXGI_FORMAT_R16_FLOAT,\n    DXGI_FORMAT_D16_UNORM,\n    DXGI_FORMAT_R16_UNORM,\n    DXGI_FORMAT_R16_UINT,\n    DXGI_FORMAT_R16_SNORM,\n    DXGI_FORMAT_R16_SINT,\n    DXGI_FORMAT_R8_TYPELESS,\n    DXGI_FORMAT_R8_UNORM,\n    DXGI_FORMAT_R8_UINT,\n    DXGI_FORMAT_R8_SNORM,\n    DXGI_FORMAT_R8_SINT,\n    DXGI_FORMAT_A8_UNORM,\n    DXGI_FORMAT_R1_UNORM,\n    DXGI_FORMAT_R9G9B9E5_SHAREDEXP,\n    DXGI_FORMAT_R8G8_B8G8_UNORM,\n    DXGI_FORMAT_G8R8_G8B8_UNORM,\n    DXGI_FORMAT_BC1_TYPELESS,\n    DXGI_FORMAT_BC1_UNORM,\n    DXGI_FORMAT_BC1_UNORM_SRGB,\n    DXGI_FORMAT_BC2_TYPELESS,\n    DXGI_FORMAT_BC2_UNORM,\n    DXGI_FORMAT_BC2_UNORM_SRGB,\n    DXGI_FORMAT_BC3_TYPELESS,\n    DXGI_FORMAT_BC3_UNORM,\n    DXGI_FORMAT_BC3_UNORM_SRGB,\n    DXGI_FORMAT_BC4_TYPELESS,\n    DXGI_FORMAT_BC4_UNORM,\n    DXGI_FORMAT_BC4_SNORM,\n    DXGI_FORMAT_BC5_TYPELESS,\n    DXGI_FORMAT_BC5_UNORM,\n    DXGI_FORMAT_BC5_SNORM,\n    DXGI_FORMAT_B5G6R5_UNORM,\n    DXGI_FORMAT_B5G5R5A1_UNORM,\n    DXGI_FORMAT_B8G8R8A8_UNORM,\n    DXGI_FORMAT_B8G8R8X8_UNORM,\n    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,\n    DXGI_FORMAT_B8G8R8A8_TYPELESS,\n    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,\n    DXGI_FORMAT_B8G8R8X8_TYPELESS,\n    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,\n    DXGI_FORMAT_BC6H_TYPELESS,\n    DXGI_FORMAT_BC6H_UF16,\n    DXGI_FORMAT_BC6H_SF16,\n    DXGI_FORMAT_BC7_TYPELESS,\n    DXGI_FORMAT_BC7_UNORM,\n    DXGI_FORMAT_BC7_UNORM_SRGB,\n    DXGI_FORMAT_AYUV,\n    DXGI_FORMAT_Y410,\n    DXGI_FORMAT_Y416,\n    DXGI_FORMAT_NV12,\n    DXGI_FORMAT_P010,\n    DXGI_FORMAT_P016,\n    DXGI_FORMAT_420_OPAQUE,\n    DXGI_FORMAT_YUY2,\n    DXGI_FORMAT_Y210,\n    DXGI_FORMAT_Y216,\n    DXGI_FORMAT_NV11,\n    DXGI_FORMAT_AI44,\n    DXGI_FORMAT_IA44,\n    DXGI_FORMAT_P8,\n    DXGI_FORMAT_A8P8,\n    DXGI_FORMAT_B4G4R4A4_UNORM,\n    DXGI_FORMAT_P208,\n    DXGI_FORMAT_V208,\n    DXGI_FORMAT_V408,\n    DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,\n    DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,\n    DXGI_FORMAT_FORCE_UINT\n}\n\n/**\n * Possible values of the field {@link DDS_DX10_FIELDS.RESOURCE_DIMENSION}\n *\n * @ignore\n */\nenum D3D10_RESOURCE_DIMENSION {\n    DDS_DIMENSION_TEXTURE1D = 2,\n    DDS_DIMENSION_TEXTURE2D = 3,\n    DDS_DIMENSION_TEXTURE3D = 6\n}\n\nconst PF_FLAGS = 1;\n\n// PIXEL_FORMAT flags\nconst DDPF_ALPHA = 0x2;\nconst DDPF_FOURCC = 0x4;\nconst DDPF_RGB = 0x40;\nconst DDPF_YUV = 0x200;\nconst DDPF_LUMINANCE = 0x20000;\n\n// Four character codes for DXTn formats\nconst FOURCC_DXT1 = 0x31545844;\nconst FOURCC_DXT3 = 0x33545844;\nconst FOURCC_DXT5 = 0x35545844;\nconst FOURCC_DX10 = 0x30315844;\n\n// Cubemap texture flag (for DDS_DX10_FIELDS.MISC_FLAG)\nconst DDS_RESOURCE_MISC_TEXTURECUBE = 0x4;\n\n/**\n * Maps `FOURCC_*` formats to internal formats (see {@link PIXI.INTERNAL_FORMATS}).\n *\n * @ignore\n */\nconst FOURCC_TO_FORMAT: { [id: number]: number } = {\n    [FOURCC_DXT1]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [FOURCC_DXT3]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [FOURCC_DXT5]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n};\n\n/**\n * Maps {@link DXGI_FORMAT} to types/internal-formats (see {@link PIXI.TYPES}, {@link PIXI.INTERNAL_FORMATS})\n *\n * @ignore\n */\nconst DXGI_TO_FORMAT: { [id: number]: number } = {\n    // WEBGL_compressed_texture_s3tc\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n\n    // WEBGL_compressed_texture_s3tc_srgb\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\n};\n\n/**\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n * @see https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide\n */\nexport class DDSLoader\n{\n    public static use(resource: ILoaderResource, next: (...args: any[]) => void): void\n    {\n        if (resource.extension === 'dds' && resource.data)\n        {\n            try\n            {\n                Object.assign(resource, registerCompressedTextures(\n                    resource.name || resource.url,\n                    DDSLoader.parse(resource.data),\n                    resource.metadata,\n                ));\n            }\n            catch (err)\n            {\n                next(err);\n\n                return;\n            }\n        }\n\n        next();\n    }\n\n    /**\n     * Parses the DDS file header, generates base-textures, and puts them into the texture\n     * cache.\n     */\n    private static parse(arrayBuffer: ArrayBuffer): CompressedTextureResource[]\n    {\n        const data = new Uint32Array(arrayBuffer);\n        const magicWord = data[0];\n\n        if (magicWord !== DDS_MAGIC)\n        {\n            throw new Error('Invalid DDS file magic word');\n        }\n\n        const header = new Uint32Array(arrayBuffer, 0, DDS_HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n\n        // DDS header fields\n        const height = header[DDS_FIELDS.HEIGHT];\n        const width = header[DDS_FIELDS.WIDTH];\n        const mipmapCount = header[DDS_FIELDS.MIPMAP_COUNT];\n\n        // PIXEL_FORMAT fields\n        const pixelFormat = new Uint32Array(\n            arrayBuffer,\n            DDS_FIELDS.PIXEL_FORMAT * Uint32Array.BYTES_PER_ELEMENT,\n            DDS_HEADER_PF_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n        const formatFlags = pixelFormat[PF_FLAGS];\n\n        // File contains compressed texture(s)\n        if (formatFlags & DDPF_FOURCC)\n        {\n            const fourCC = pixelFormat[DDS_PF_FIELDS.FOURCC];\n\n            // File contains one DXTn compressed texture\n            if (fourCC !== FOURCC_DX10)\n            {\n                const internalFormat = FOURCC_TO_FORMAT[fourCC];\n\n                const dataOffset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n                const texData = new Uint8Array(arrayBuffer, dataOffset);\n\n                const resource = new CompressedTextureResource(texData, {\n                    format: internalFormat,\n                    width,\n                    height,\n                    levels: mipmapCount // CompressedTextureResource will separate the levelBuffers for us!\n                });\n\n                return [resource];\n            }\n\n            // FOURCC_DX10 indicates there is a 20-byte DDS_HEADER_DX10 after DDS_HEADER\n            const dx10Offset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n            const dx10Header = new Uint32Array(\n                data.buffer,\n                dx10Offset,\n                DDS_HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n            const dxgiFormat = dx10Header[DDS_DX10_FIELDS.DXGI_FORMAT];\n            const resourceDimension = dx10Header[DDS_DX10_FIELDS.RESOURCE_DIMENSION];\n            const miscFlag = dx10Header[DDS_DX10_FIELDS.MISC_FLAG];\n            const arraySize = dx10Header[DDS_DX10_FIELDS.ARRAY_SIZE];\n\n            // Map dxgiFormat to PIXI.INTERNAL_FORMATS\n            const internalFormat = DXGI_TO_FORMAT[dxgiFormat];\n\n            if (internalFormat === undefined)\n            {\n                throw new Error(`DDSLoader cannot parse texture data with DXGI format ${dxgiFormat}`);\n            }\n            if (miscFlag === DDS_RESOURCE_MISC_TEXTURECUBE)\n            {\n                // FIXME: Anybody excited about cubemap compressed textures?\n                throw new Error('DDSLoader does not support cubemap textures');\n            }\n            if (resourceDimension === D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE3D)\n            {\n                // FIXME: Anybody excited about 3D compressed textures?\n                throw new Error('DDSLoader does not supported 3D texture data');\n            }\n\n            // Uint8Array buffers of image data, including all mipmap levels in each image\n            const imageBuffers = new Array<Uint8Array>();\n            const dataOffset = DDS_MAGIC_SIZE\n                + DDS_HEADER_SIZE\n                + DDS_HEADER_DX10_SIZE;\n\n            if (arraySize === 1)\n            {\n                // No need bothering with the imageSize calculation!\n                imageBuffers.push(new Uint8Array(arrayBuffer, dataOffset));\n            }\n            else\n            {\n                // Calculate imageSize for each texture, and then locate each image's texture data\n\n                const pixelSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[internalFormat];\n                let imageSize = 0;\n                let levelWidth = width;\n                let levelHeight = height;\n\n                for (let i = 0; i < mipmapCount; i++)\n                {\n                    const alignedLevelWidth = Math.max(1, (levelWidth + 3) & ~3);\n                    const alignedLevelHeight = Math.max(1, (levelHeight + 3) & ~3);\n\n                    const levelSize = alignedLevelWidth * alignedLevelHeight * pixelSize;\n\n                    imageSize += levelSize;\n\n                    levelWidth = levelWidth >>> 1;\n                    levelHeight = levelHeight >>> 1;\n                }\n\n                let imageOffset = dataOffset;\n\n                // NOTE: Cubemaps have 6-images per texture (but they aren't supported so ^_^)\n                for (let i = 0; i < arraySize; i++)\n                {\n                    imageBuffers.push(new Uint8Array(arrayBuffer, imageOffset, imageSize));\n                    imageOffset += imageSize;\n                }\n            }\n\n            // Uint8Array -> CompressedTextureResource, and we're done!\n            return imageBuffers.map((buffer) => new CompressedTextureResource(buffer, {\n                format: internalFormat,\n                width,\n                height,\n                levels: mipmapCount\n            }));\n        }\n        if (formatFlags & DDPF_RGB)\n        {\n            // FIXME: We might want to allow uncompressed *.dds files?\n            throw new Error('DDSLoader does not support uncompressed texture data.');\n        }\n        if (formatFlags & DDPF_YUV)\n        {\n            // FIXME: Does anybody need this feature?\n            throw new Error('DDSLoader does not supported YUV uncompressed texture data.');\n        }\n        if (formatFlags & DDPF_LUMINANCE)\n        {\n            // FIXME: Microsoft says older DDS filers use this feature! Probably not worth the effort!\n            throw new Error('DDSLoader does not support single-channel (lumninance) texture data!');\n        }\n        if (formatFlags & DDPF_ALPHA)\n        {\n            // FIXME: I'm tired! See above =)\n            throw new Error('DDSLoader does not support single-channel (alpha) texture data!');\n        }\n\n        throw new Error('DDSLoader failed to load a texture file due to an unknown reason!');\n    }\n}\n","import { TYPES, FORMATS } from '@pixi/constants';\nimport { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { CompressedTextureResource, CompressedLevelBuffer } from '../resources/CompressedTextureResource';\nimport { LoaderResource } from '@pixi/loaders';\nimport { registerCompressedTextures } from './registerCompressedTextures';\n\nimport type { ILoaderResource } from '@pixi/loaders';\n\n// Set KTX files to be loaded as an ArrayBuffer\nLoaderResource.setExtensionXhrType('ktx', LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n\n/**\n * The 12-byte KTX file identifier\n *\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.1\n * @ignore\n */\nconst FILE_IDENTIFIER = [0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A];\n\n/**\n * The value stored in the \"endianness\" field.\n *\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.2\n * @ignore\n */\nconst ENDIANNESS = 0x04030201;\n\n/**\n * Byte offsets of the KTX file header fields\n *\n * @ignore\n */\nconst KTX_FIELDS = {\n    FILE_IDENTIFIER: 0,\n    ENDIANNESS: 12,\n    GL_TYPE: 16,\n    GL_TYPE_SIZE: 20,\n    GL_FORMAT: 24,\n    GL_INTERNAL_FORMAT: 28,\n    GL_BASE_INTERNAL_FORMAT: 32,\n    PIXEL_WIDTH: 36,\n    PIXEL_HEIGHT: 40,\n    PIXEL_DEPTH: 44,\n    NUMBER_OF_ARRAY_ELEMENTS: 48,\n    NUMBER_OF_FACES: 52,\n    NUMBER_OF_MIPMAP_LEVELS: 56,\n    BYTES_OF_KEY_VALUE_DATA: 60\n};\n\n/**\n * Byte size of the file header fields in {@code KTX_FIELDS}\n *\n * @ignore\n */\nconst FILE_HEADER_SIZE = 64;\n\n/**\n * Maps {@link PIXI.TYPES} to the bytes taken per component, excluding those ones that are bit-fields.\n *\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_COMPONENT: { [id: number]: number } = {\n    [TYPES.UNSIGNED_BYTE]: 1,\n    [TYPES.UNSIGNED_SHORT]: 2,\n    [TYPES.FLOAT]: 4,\n    [TYPES.HALF_FLOAT]: 8\n};\n\n/**\n * Number of components in each {@link PIXI.FORMATS}\n *\n * @ignore\n */\nexport const FORMATS_TO_COMPONENTS: { [id: number]: number } = {\n    [FORMATS.RGBA]: 4,\n    [FORMATS.RGB]: 3,\n    [FORMATS.LUMINANCE]: 1,\n    [FORMATS.LUMINANCE_ALPHA]: 2,\n    [FORMATS.ALPHA]: 1\n};\n\n/**\n * Number of bytes per pixel in bit-field types in {@link PIXI.TYPES}\n *\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    [TYPES.UNSIGNED_SHORT_4_4_4_4]: 2,\n    [TYPES.UNSIGNED_SHORT_5_5_5_1]: 2,\n    [TYPES.UNSIGNED_SHORT_5_6_5]: 2\n};\n\n/**\n * Loader plugin for handling KTX texture container files.\n *\n * This KTX loader does not currently support the following features:\n * * cube textures\n * * 3D textures\n * * vendor-specific key/value data parsing\n * * endianness conversion for big-endian machines\n * * embedded *.basis files\n *\n * It does supports the following features:\n * * multiple textures per file\n * * mipmapping\n *\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class KTXLoader\n{\n    /**\n     * Called after a KTX file is loaded.\n     *\n     * This will parse the KTX file header and add a {@code BaseTexture} to the texture\n     * cache.\n     *\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    public static use(resource: ILoaderResource, next: (...args: any[]) => void): void\n    {\n        if (resource.extension === 'ktx' && resource.data)\n        {\n            try\n            {\n                const url = resource.name || resource.url;\n\n                Object.assign(resource, registerCompressedTextures(\n                    url,\n                    KTXLoader.parse(url, resource.data),\n                    resource.metadata,\n                ));\n            }\n            catch (err)\n            {\n                next(err);\n\n                return;\n            }\n        }\n\n        next();\n    }\n\n    /**\n     * Parses the KTX file header, generates base-textures, and puts them into the texture\n     * cache.\n     */\n    private static parse(url: string, arrayBuffer: ArrayBuffer): CompressedTextureResource[] | null\n    {\n        const dataView = new DataView(arrayBuffer);\n\n        if (!KTXLoader.validate(url, dataView))\n        {\n            return null;\n        }\n\n        const littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n        const glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian);\n        // const glTypeSize = dataView.getUint32(KTX_FIELDS.GL_TYPE_SIZE, littleEndian);\n        const glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n        const glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n        const pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n        const pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1;// \"pixelHeight = 0\" -> \"1\"\n        const pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1;// ^^\n        const numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1;// ^^\n        const numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n        const numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n        const bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n\n        // Whether the platform architecture is little endian. If littleEndian !== platformLittleEndian, then the\n        // file contents must be endian-converted!\n        // TODO: Endianness conversion\n        // const platformLittleEndian = new Uint8Array((new Uint32Array([ENDIANNESS])).buffer)[0] === 0x01;\n\n        if (pixelHeight === 0 || pixelDepth !== 1)\n        {\n            throw new Error('Only 2D textures are supported');\n        }\n        if (numberOfFaces !== 1)\n        {\n            throw new Error('CubeTextures are not supported by KTXLoader yet!');\n        }\n        if (numberOfArrayElements !== 1)\n        {\n            // TODO: Support splitting array-textures into multiple BaseTextures\n            throw new Error('WebGL does not support array textures');\n        }\n\n        // TODO: 8x4 blocks for 2bpp pvrtc\n        const blockWidth = 4;\n        const blockHeight = 4;\n\n        const alignedWidth = (pixelWidth + 3) & ~3;\n        const alignedHeight = (pixelHeight + 3) & ~3;\n        const imageBuffers = new Array<CompressedLevelBuffer[]>(numberOfArrayElements);\n        let imagePixels = pixelWidth * pixelHeight;\n\n        if (glType === 0)\n        {\n            // Align to 16 pixels (4x4 blocks)\n            imagePixels = alignedWidth * alignedHeight;\n        }\n\n        let imagePixelByteSize: number;\n\n        if (glType !== 0)\n        {\n            // Uncompressed texture format\n            if (TYPES_TO_BYTES_PER_COMPONENT[glType])\n            {\n                imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n            }\n            else\n            {\n                imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n            }\n        }\n        else\n        {\n            imagePixelByteSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n        }\n\n        if (imagePixelByteSize === undefined)\n        {\n            throw new Error('Unable to resolve the pixel format stored in the *.ktx file!');\n        }\n\n        const imageByteSize = imagePixels * imagePixelByteSize;\n        let mipByteSize = imageByteSize;\n        let mipWidth = pixelWidth;\n        let mipHeight = pixelHeight;\n        let alignedMipWidth = alignedWidth;\n        let alignedMipHeight = alignedHeight;\n        let imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n\n        for (let mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++)\n        {\n            const imageSize = dataView.getUint32(imageOffset, littleEndian);\n            let elementOffset = imageOffset + 4;\n\n            for (let arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++)\n            {\n                // TODO: Maybe support 3D textures? :-)\n                // for (let zSlice = 0; zSlice < pixelDepth; zSlice)\n\n                let mips = imageBuffers[arrayElement];\n\n                if (!mips)\n                {\n                    mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n                }\n\n                mips[mipmapLevel] = {\n                    levelID: mipmapLevel,\n                    levelWidth: numberOfMipmapLevels > 1 ? mipWidth : alignedMipWidth,\n                    levelHeight: numberOfMipmapLevels > 1 ? mipHeight : alignedMipHeight,\n                    levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n                };\n                elementOffset += mipByteSize;\n            }\n\n            // HINT: Aligns to 4-byte boundary after jumping imageSize (in lieu of mipPadding)\n            imageOffset += imageSize + 4;// (+4 to jump the imageSize field itself)\n            imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - (imageOffset % 4) : imageOffset;\n\n            // Calculate mipWidth, mipHeight for _next_ iteration\n            mipWidth = (mipWidth >> 1) || 1;\n            mipHeight = (mipHeight >> 1) || 1;\n            alignedMipWidth = (mipWidth + blockWidth - 1) & ~(blockWidth - 1);\n            alignedMipHeight = (mipHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n            // Each mipmap level is 4-times smaller?\n            mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n        }\n\n        // We use the levelBuffers feature of CompressedTextureResource b/c texture data is image-major, not level-major.\n        if (glType !== 0)\n        {\n            throw new Error('TODO: Uncompressed');\n        }\n\n        return imageBuffers.map((levelBuffers) => new CompressedTextureResource(null, {\n            format: glInternalFormat,\n            width: pixelWidth,\n            height: pixelHeight,\n            levels: numberOfMipmapLevels,\n            levelBuffers,\n        }));\n    }\n\n    /**\n     * Checks whether the arrayBuffer contains a valid *.ktx file.\n     */\n    private static validate(url: string, dataView: DataView): boolean\n    {\n        // NOTE: Do not optimize this into 3 32-bit integer comparison because the endianness\n        // of the data is not specified.\n        for (let i = 0; i < FILE_IDENTIFIER.length; i++)\n        {\n            if (dataView.getUint8(i) !== FILE_IDENTIFIER[i])\n            {\n                // #if _DEBUG\n                console.error(`${url} is not a valid *.ktx file!`);\n                // #endif\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}