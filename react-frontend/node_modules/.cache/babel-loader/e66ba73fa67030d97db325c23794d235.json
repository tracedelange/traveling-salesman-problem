{"ast":null,"code":"var _jsxFileName = \"/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/components/MainStage.js\";\nimport React, { useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport { Stage, Layer, Rect, Text, Circle, Line } from 'react-konva';\nimport City from './City';\nimport { v4 as uuidv4 } from 'uuid';\nimport Road from './Road';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MainStage = ({\n  handleStageClick,\n  cities,\n  lines,\n  lastLine\n}) => {\n  // const [lines, setLines] = useState([])\n  // const handleClick = (e) => {\n  //     //call handle stage click and add a line\n  //     handleStageClick(e)\n  //     let starting = cities[cities.length-1]\n  //     if (cities.length !== 0){\n  //         console.log(starting)\n  //         let newLine = {\n  //             key: uuidv4(),\n  //             points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n  //             stroke: 'red'\n  //         }\n  //         setLines([...lines, newLine])\n  //     }\n  // }\n  const handleCityDrop = e => {// e.target.attrs.x = e.evt.offsetX\n    // e.target.attrs.y = e.evt.offsetY\n  };\n\n  const handleDrag = e => {// console.log(e.target.attrs)\n    // // let line = lineArray.find((item) => item.props.data.startName === e.target.attrs.name)\n    // // console.log(lineArray)\n    // // console.log(line)\n  };\n\n  const cityArray = cities.map(item => /*#__PURE__*/_jsxDEV(City, {\n    data: item,\n    handleCityDrag: handleDrag,\n    handleCityDrop: handleCityDrop\n  }, item.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 44\n  }, this));\n  const lineArray = lines.map(item => /*#__PURE__*/_jsxDEV(Road, {\n    data: item\n  }, item.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 43\n  }, this)); // console.log(cityArray.length > 0 ? 'true' : 'false')\n\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: window.innerWidth,\n    height: window.innerHeight - window.innerHeight * .05,\n    onClick: handleStageClick,\n    children: [/*#__PURE__*/_jsxDEV(Layer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Layer, {\n      children: cityArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_c = MainStage;\nexport default MainStage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainStage\");","map":{"version":3,"sources":["/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/components/MainStage.js"],"names":["React","useState","useEffect","render","Stage","Layer","Rect","Text","Circle","Line","City","v4","uuidv4","Road","MainStage","handleStageClick","cities","lines","lastLine","handleCityDrop","e","handleDrag","cityArray","map","item","key","lineArray","window","innerWidth","innerHeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,MAAnC,EAA2CC,IAA3C,QAAuD,aAAvD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAGA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,gBAAF;AAAoBC,EAAAA,MAApB;AAA4BC,EAAAA,KAA5B;AAAmCC,EAAAA;AAAnC,CAAD,KAAmD;AAEjE;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,QAAMC,cAAc,GAAIC,CAAD,IAAO,CAC1B;AACA;AACH,GAHD;;AAKA,QAAMC,UAAU,GAAID,CAAD,IAAO,CACtB;AACA;AACA;AACA;AACH,GALD;;AAQA,QAAME,SAAS,GAAGN,MAAM,CAACO,GAAP,CAAYC,IAAD,iBAAU,QAAC,IAAD;AAAqB,IAAA,IAAI,EAAEA,IAA3B;AAAiC,IAAA,cAAc,EAAEH,UAAjD;AAA6D,IAAA,cAAc,EAAEF;AAA7E,KAAWK,IAAI,CAACC,GAAhB;AAAA;AAAA;AAAA;AAAA,UAArB,CAAlB;AACA,QAAMC,SAAS,GAAGT,KAAK,CAACM,GAAN,CAAWC,IAAD,iBAAU,QAAC,IAAD;AAAqB,IAAA,IAAI,EAAEA;AAA3B,KAAWA,IAAI,CAACC,GAAhB;AAAA;AAAA;AAAA;AAAA,UAApB,CAAlB,CAnCiE,CAqCjE;;AAEA,sBACI,QAAC,KAAD;AAAO,IAAA,KAAK,EAAEE,MAAM,CAACC,UAArB;AAAiC,IAAA,MAAM,EAAGD,MAAM,CAACE,WAAR,GAAyBF,MAAM,CAACE,WAAR,GAAuB,GAAxF;AAA8F,IAAA,OAAO,EAAEd,gBAAvG;AAAA,4BACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI,QAAC,KAAD;AAAA,gBACKO;AADL;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAlDD;;KAAMR,S;AAoDN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport { Stage, Layer, Rect, Text, Circle, Line } from 'react-konva';\nimport City from './City'\nimport { v4 as uuidv4 } from 'uuid';\nimport Road from './Road';\n\n\nconst MainStage = ({ handleStageClick, cities, lines, lastLine }) => {\n\n    // const [lines, setLines] = useState([])\n\n    // const handleClick = (e) => {\n    //     //call handle stage click and add a line\n    //     handleStageClick(e)\n    //     let starting = cities[cities.length-1]\n\n    //     if (cities.length !== 0){\n    //         console.log(starting)\n    //         let newLine = {\n    //             key: uuidv4(),\n    //             points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n    //             stroke: 'red'\n    //         }\n\n    //         setLines([...lines, newLine])\n    //     }\n    // }\n\n    const handleCityDrop = (e) => {\n        // e.target.attrs.x = e.evt.offsetX\n        // e.target.attrs.y = e.evt.offsetY\n    }\n\n    const handleDrag = (e) => {\n        // console.log(e.target.attrs)\n        // // let line = lineArray.find((item) => item.props.data.startName === e.target.attrs.name)\n        // // console.log(lineArray)\n        // // console.log(line)\n    }\n\n\n    const cityArray = cities.map((item) => <City key={item.key} data={item} handleCityDrag={handleDrag} handleCityDrop={handleCityDrop} />)\n    const lineArray = lines.map((item) => <Road key={item.key} data={item} />)\n\n    // console.log(cityArray.length > 0 ? 'true' : 'false')\n\n    return (\n        <Stage width={window.innerWidth} height={(window.innerHeight) - ((window.innerHeight) * .05)} onClick={handleStageClick}>\n            <Layer>\n                {/* {lineArray} */}\n                {/* {lastLine ? <Road key={lastLine.key} data={lastLine } /> : null} */}\n            </Layer>\n            <Layer>\n                {cityArray}\n            </Layer>\n        </Stage>\n    );\n}\n\nexport default MainStage\n"]},"metadata":{},"sourceType":"module"}