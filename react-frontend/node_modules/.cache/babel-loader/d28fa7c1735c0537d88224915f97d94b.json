{"ast":null,"code":"var _jsxFileName = \"/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport MainStage from './components/MainStage';\nimport Header from './components/Header';\nimport InfoWindow from './components/InfoWindow';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction rFact(num) {\n  if (num === 0) {\n    return 1;\n  } else {\n    return num * rFact(num - 1);\n  }\n}\n\nfunction getCount(num) {\n  if (num === 0) {\n    return 0;\n  } else if (num === 1) {\n    return 1;\n  } else if (num === 2) {\n    return 1;\n  } else {\n    return rFact(num - 1) / 2;\n  }\n}\n\nfunction App() {\n  _s();\n\n  const [lines, setLines] = useState([]);\n  const [cities, setCities] = useState([]);\n\n  const handleClearClick = () => {\n    setCities([]);\n  };\n\n  const handleStageClick = e => {\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n    const newCity = {\n      key: uuidv4(),\n      name: uuidv4(),\n      x: e.evt.offsetX,\n      y: e.evt.offsetY,\n      fill: `rgb(${r},${g},${b})`\n    }; // setCities(() => [...cities, newCity])\n\n    let starting = cities[cities.length - 1];\n\n    if (cities.length !== 0) {\n      console.log(starting);\n      let newLine = {\n        key: uuidv4(),\n        points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n        stroke: 'red'\n      }; // setLines([...lines, newLine])\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      handleClearClick: handleClearClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoWindow, {\n      cities: cities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainStage, {\n      handleStageClick: handleStageClick,\n      cities: cities,\n      lines: lines\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"aqWAKm3R5bf3LqPQIyZ3iLLaUmw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/App.js"],"names":["useState","useEffect","MainStage","Header","InfoWindow","v4","uuidv4","rFact","num","getCount","App","lines","setLines","cities","setCities","handleClearClick","handleStageClick","e","r","Math","floor","random","g","b","newCity","key","name","x","evt","offsetX","y","offsetY","fill","starting","length","console","log","newLine","points","stroke"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;;AAGA,SAASC,KAAT,CAAeC,GAAf,EAAoB;AAClB,MAAIA,GAAG,KAAK,CAAZ,EAAe;AAAE,WAAO,CAAP;AAAW,GAA5B,MACK;AAAE,WAAOA,GAAG,GAAGD,KAAK,CAACC,GAAG,GAAG,CAAP,CAAlB;AAA8B;AACtC;;AAED,SAASC,QAAT,CAAkBD,GAAlB,EAAuB;AACrB,MAAIA,GAAG,KAAK,CAAZ,EAAe;AACb,WAAO,CAAP;AACD,GAFD,MAEO,IAAIA,GAAG,KAAK,CAAZ,EAAe;AACpB,WAAO,CAAP;AACD,GAFM,MAEA,IAAIA,GAAG,KAAK,CAAZ,EAAe;AACpB,WAAO,CAAP;AACD,GAFM,MAEA;AACL,WAAQD,KAAK,CAACC,GAAG,GAAG,CAAP,CAAN,GAAmB,CAA1B;AACD;AACF;;AAED,SAASE,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMe,gBAAgB,GAAG,MAAM;AAE7BD,IAAAA,SAAS,CAAC,EAAD,CAAT;AAED,GAJD;;AAOA,QAAME,gBAAgB,GAAIC,CAAD,IAAO;AAE9B,QAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAR;AACA,QAAIC,CAAC,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAR;AACA,QAAIE,CAAC,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAR;AAEA,UAAMG,OAAO,GAAG;AACdC,MAAAA,GAAG,EAAEnB,MAAM,EADG;AAEdoB,MAAAA,IAAI,EAAEpB,MAAM,EAFE;AAGdqB,MAAAA,CAAC,EAAEV,CAAC,CAACW,GAAF,CAAMC,OAHK;AAIdC,MAAAA,CAAC,EAAEb,CAAC,CAACW,GAAF,CAAMG,OAJK;AAKdC,MAAAA,IAAI,EAAG,OAAMd,CAAE,IAAGI,CAAE,IAAGC,CAAE;AALX,KAAhB,CAN8B,CAa9B;;AAGA,QAAIU,QAAQ,GAAGpB,MAAM,CAACA,MAAM,CAACqB,MAAP,GAAc,CAAf,CAArB;;AAEA,QAAIrB,MAAM,CAACqB,MAAP,KAAkB,CAAtB,EAAyB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,UAAII,OAAO,GAAG;AACZZ,QAAAA,GAAG,EAAEnB,MAAM,EADC;AAEZgC,QAAAA,MAAM,EAAE,CAACL,QAAQ,CAACN,CAAV,EAAaM,QAAQ,CAACH,CAAtB,EAAyBb,CAAC,CAACW,GAAF,CAAMC,OAA/B,EAAwCZ,CAAC,CAACW,GAAF,CAAMG,OAA9C,CAFI;AAGZQ,QAAAA,MAAM,EAAE;AAHI,OAAd,CAFuB,CAQvB;AACD;AAGF,GA9BD;;AAsCA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,gBAAgB,EAAExB;AAA1B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAY,MAAA,MAAM,EAAEF;AAApB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,SAAD;AAAW,MAAA,gBAAgB,EAAEG,gBAA7B;AAA+C,MAAA,MAAM,EAAEH,MAAvD;AAA+D,MAAA,KAAK,EAAEF;AAAtE;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAzDQD,G;;KAAAA,G;AA2DT,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport MainStage from './components/MainStage'\nimport Header from './components/Header'\nimport InfoWindow from './components/InfoWindow'\nimport { v4 as uuidv4 } from 'uuid';\n\n\nfunction rFact(num) {\n  if (num === 0) { return 1; }\n  else { return num * rFact(num - 1); }\n}\n\nfunction getCount(num) {\n  if (num === 0) {\n    return 0\n  } else if (num === 1) {\n    return 1\n  } else if (num === 2) {\n    return 1\n  } else {\n    return (rFact(num - 1)) / 2\n  }\n}\n\nfunction App() {\n\n  const [lines, setLines] = useState([])\n  const [cities, setCities] = useState([])\n\n  const handleClearClick = () => {\n\n    setCities([])\n\n  }\n\n\n  const handleStageClick = (e) => {\n\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n\n    const newCity = {\n      key: uuidv4(),\n      name: uuidv4(),\n      x: e.evt.offsetX,\n      y: e.evt.offsetY,\n      fill: `rgb(${r},${g},${b})`,\n    }\n    // setCities(() => [...cities, newCity])\n\n\n    let starting = cities[cities.length-1]\n\n    if (cities.length !== 0) {\n      console.log(starting)\n      let newLine = {\n        key: uuidv4(),\n        points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n        stroke: 'red'\n      }\n\n      // setLines([...lines, newLine])\n    }\n\n\n  }\n\n\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <Header handleClearClick={handleClearClick} />\n      <InfoWindow cities={cities} />\n      <MainStage handleStageClick={handleStageClick} cities={cities} lines={lines}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}