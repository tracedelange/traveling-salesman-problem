{"ast":null,"code":"/*!\n * @pixi/graphics - v6.0.4\n * Compiled Tue, 11 May 2021 18:00:23 UTC\n *\n * @pixi/graphics is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Texture, BaseTexture, BatchDrawCall, BatchTextureArray, BatchGeometry, UniformGroup, Shader, State } from '@pixi/core';\nimport { SHAPES, Point, PI_2, Matrix, Polygon, Rectangle, RoundedRectangle, Circle, Ellipse } from '@pixi/math';\nimport { earcut, premultiplyTint, hex2rgb } from '@pixi/utils';\nimport { WRAP_MODES, DRAW_MODES, BLEND_MODES } from '@pixi/constants';\nimport { Bounds, Container } from '@pixi/display';\n/**\n * Supported line joints in `PIXI.LineStyle` for graphics.\n *\n * @see PIXI.Graphics#lineStyle\n * @see https://graphicdesign.stackexchange.com/questions/59018/what-is-a-bevel-join-of-two-lines-exactly-illustrator\n *\n * @name LINE_JOIN\n * @memberof PIXI\n * @static\n * @enum {string}\n * @property {string} MITER - 'miter': make a sharp corner where outer part of lines meet\n * @property {string} BEVEL - 'bevel': add a square butt at each end of line segment and fill the triangle at turn\n * @property {string} ROUND - 'round': add an arc at the joint\n */\n\nvar LINE_JOIN;\n\n(function (LINE_JOIN) {\n  LINE_JOIN[\"MITER\"] = \"miter\";\n  LINE_JOIN[\"BEVEL\"] = \"bevel\";\n  LINE_JOIN[\"ROUND\"] = \"round\";\n})(LINE_JOIN || (LINE_JOIN = {}));\n/**\n * Support line caps in `PIXI.LineStyle` for graphics.\n *\n * @see PIXI.Graphics#lineStyle\n *\n * @name LINE_CAP\n * @memberof PIXI\n * @static\n * @enum {string}\n * @property {string} BUTT - 'butt': don't add any cap at line ends (leaves orthogonal edges)\n * @property {string} ROUND - 'round': add semicircle at ends\n * @property {string} SQUARE - 'square': add square at end (like `BUTT` except more length at end)\n */\n\n\nvar LINE_CAP;\n\n(function (LINE_CAP) {\n  LINE_CAP[\"BUTT\"] = \"butt\";\n  LINE_CAP[\"ROUND\"] = \"round\";\n  LINE_CAP[\"SQUARE\"] = \"square\";\n})(LINE_CAP || (LINE_CAP = {}));\n/**\n * Graphics curves resolution settings. If `adaptive` flag is set to `true`,\n * the resolution is calculated based on the curve's length to ensure better visual quality.\n * Adaptive draw works with `bezierCurveTo` and `quadraticCurveTo`.\n *\n * @static\n * @constant\n * @memberof PIXI\n * @name GRAPHICS_CURVES\n * @type {object}\n * @property {boolean} adaptive=true - flag indicating if the resolution should be adaptive\n * @property {number} maxLength=10 - maximal length of a single segment of the curve (if adaptive = false, ignored)\n * @property {number} minSegments=8 - minimal number of segments in the curve (if adaptive = false, ignored)\n * @property {number} maxSegments=2048 - maximal number of segments in the curve (if adaptive = false, ignored)\n */\n\n\nvar GRAPHICS_CURVES = {\n  adaptive: true,\n  maxLength: 10,\n  minSegments: 8,\n  maxSegments: 2048,\n  epsilon: 0.0001,\n  _segmentsCount: function (length, defaultSegments) {\n    if (defaultSegments === void 0) {\n      defaultSegments = 20;\n    }\n\n    if (!this.adaptive || !length || isNaN(length)) {\n      return defaultSegments;\n    }\n\n    var result = Math.ceil(length / this.maxLength);\n\n    if (result < this.minSegments) {\n      result = this.minSegments;\n    } else if (result > this.maxSegments) {\n      result = this.maxSegments;\n    }\n\n    return result;\n  }\n};\n/**\n * Fill style object for Graphics.\n *\n * @class\n * @memberof PIXI\n */\n\nvar FillStyle =\n/** @class */\nfunction () {\n  function FillStyle() {\n    /**\n     * The hex color value used when coloring the Graphics object.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    this.color = 0xFFFFFF;\n    /**\n     * The alpha value used when filling the Graphics object.\n     *\n     * @member {number}\n     * @default 1\n     */\n\n    this.alpha = 1.0;\n    /**\n     * The texture to be used for the fill.\n     *\n     * @member {PIXI.Texture}\n     * @default 0\n     */\n\n    this.texture = Texture.WHITE;\n    /**\n     * The transform applied to the texture.\n     *\n     * @member {PIXI.Matrix}\n     * @default null\n     */\n\n    this.matrix = null;\n    /**\n     * If the current fill is visible.\n     *\n     * @member {boolean}\n     * @default false\n     */\n\n    this.visible = false;\n    this.reset();\n  }\n  /**\n   * Clones the object\n   *\n   * @return {PIXI.FillStyle}\n   */\n\n\n  FillStyle.prototype.clone = function () {\n    var obj = new FillStyle();\n    obj.color = this.color;\n    obj.alpha = this.alpha;\n    obj.texture = this.texture;\n    obj.matrix = this.matrix;\n    obj.visible = this.visible;\n    return obj;\n  };\n  /**\n   * Reset\n   */\n\n\n  FillStyle.prototype.reset = function () {\n    this.color = 0xFFFFFF;\n    this.alpha = 1;\n    this.texture = Texture.WHITE;\n    this.matrix = null;\n    this.visible = false;\n  };\n  /**\n   * Destroy and don't use after this\n   */\n\n\n  FillStyle.prototype.destroy = function () {\n    this.texture = null;\n    this.matrix = null;\n  };\n\n  return FillStyle;\n}();\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n/**\n * Builds a polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\n\n\nvar buildPoly = {\n  build: function (graphicsData) {\n    graphicsData.points = graphicsData.shape.points.slice();\n  },\n  triangulate: function (graphicsData, graphicsGeometry) {\n    var points = graphicsData.points;\n    var holes = graphicsData.holes;\n    var verts = graphicsGeometry.points;\n    var indices = graphicsGeometry.indices;\n\n    if (points.length >= 6) {\n      var holeArray = []; // Process holes..\n\n      for (var i = 0; i < holes.length; i++) {\n        var hole = holes[i];\n        holeArray.push(points.length / 2);\n        points = points.concat(hole.points);\n      } // sort color\n\n\n      var triangles = earcut(points, holeArray, 2);\n\n      if (!triangles) {\n        return;\n      }\n\n      var vertPos = verts.length / 2;\n\n      for (var i = 0; i < triangles.length; i += 3) {\n        indices.push(triangles[i] + vertPos);\n        indices.push(triangles[i + 1] + vertPos);\n        indices.push(triangles[i + 2] + vertPos);\n      }\n\n      for (var i = 0; i < points.length; i++) {\n        verts.push(points[i]);\n      }\n    }\n  }\n}; // for type only\n\n/**\n * Builds a circle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\n\nvar buildCircle = {\n  build: function (graphicsData) {\n    // need to convert points to a nice regular data\n    var circleData = graphicsData.shape;\n    var points = graphicsData.points;\n    var x = circleData.x;\n    var y = circleData.y;\n    var width;\n    var height;\n    points.length = 0; // TODO - bit hacky??\n\n    if (graphicsData.type === SHAPES.CIRC) {\n      width = circleData.radius;\n      height = circleData.radius;\n    } else {\n      var ellipseData = graphicsData.shape;\n      width = ellipseData.width;\n      height = ellipseData.height;\n    }\n\n    if (width === 0 || height === 0) {\n      return;\n    }\n\n    var totalSegs = Math.floor(30 * Math.sqrt(circleData.radius)) || Math.floor(15 * Math.sqrt(width + height));\n    totalSegs /= 2.3;\n    var seg = Math.PI * 2 / totalSegs;\n\n    for (var i = 0; i < totalSegs - 0.5; i++) {\n      points.push(x + Math.sin(-seg * i) * width, y + Math.cos(-seg * i) * height);\n    }\n\n    points.push(points[0], points[1]);\n  },\n  triangulate: function (graphicsData, graphicsGeometry) {\n    var points = graphicsData.points;\n    var verts = graphicsGeometry.points;\n    var indices = graphicsGeometry.indices;\n    var vertPos = verts.length / 2;\n    var center = vertPos;\n    var circle = graphicsData.shape;\n    var matrix = graphicsData.matrix;\n    var x = circle.x;\n    var y = circle.y; // Push center (special point)\n\n    verts.push(graphicsData.matrix ? matrix.a * x + matrix.c * y + matrix.tx : x, graphicsData.matrix ? matrix.b * x + matrix.d * y + matrix.ty : y);\n\n    for (var i = 0; i < points.length; i += 2) {\n      verts.push(points[i], points[i + 1]); // add some uvs\n\n      indices.push(vertPos++, center, vertPos);\n    }\n  }\n};\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\n\nvar buildRectangle = {\n  build: function (graphicsData) {\n    // --- //\n    // need to convert points to a nice regular data\n    //\n    var rectData = graphicsData.shape;\n    var x = rectData.x;\n    var y = rectData.y;\n    var width = rectData.width;\n    var height = rectData.height;\n    var points = graphicsData.points;\n    points.length = 0;\n    points.push(x, y, x + width, y, x + width, y + height, x, y + height);\n  },\n  triangulate: function (graphicsData, graphicsGeometry) {\n    var points = graphicsData.points;\n    var verts = graphicsGeometry.points;\n    var vertPos = verts.length / 2;\n    verts.push(points[0], points[1], points[2], points[3], points[6], points[7], points[4], points[5]);\n    graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2, vertPos + 1, vertPos + 2, vertPos + 3);\n  }\n};\n/**\n * Calculate a single point for a quadratic bezier curve.\n * Utility function used by quadraticBezierCurve.\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} n1 - first number\n * @param {number} n2 - second number\n * @param {number} perc - percentage\n * @return {number} the result\n *\n */\n\nfunction getPt(n1, n2, perc) {\n  var diff = n2 - n1;\n  return n1 + diff * perc;\n}\n/**\n * Calculate the points for a quadratic bezier curve. (helper function..)\n * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} fromX - Origin point x\n * @param {number} fromY - Origin point x\n * @param {number} cpX - Control point x\n * @param {number} cpY - Control point y\n * @param {number} toX - Destination point x\n * @param {number} toY - Destination point y\n * @param {number[]} [out=[]] - The output array to add points into. If not passed, a new array is created.\n * @return {number[]} an array of points\n */\n\n\nfunction quadraticBezierCurve(fromX, fromY, cpX, cpY, toX, toY, out) {\n  if (out === void 0) {\n    out = [];\n  }\n\n  var n = 20;\n  var points = out;\n  var xa = 0;\n  var ya = 0;\n  var xb = 0;\n  var yb = 0;\n  var x = 0;\n  var y = 0;\n\n  for (var i = 0, j = 0; i <= n; ++i) {\n    j = i / n; // The Green Line\n\n    xa = getPt(fromX, cpX, j);\n    ya = getPt(fromY, cpY, j);\n    xb = getPt(cpX, toX, j);\n    yb = getPt(cpY, toY, j); // The Black Dot\n\n    x = getPt(xa, xb, j);\n    y = getPt(ya, yb, j);\n    points.push(x, y);\n  }\n\n  return points;\n}\n/**\n * Builds a rounded rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\n\n\nvar buildRoundedRectangle = {\n  build: function (graphicsData) {\n    var rrectData = graphicsData.shape;\n    var points = graphicsData.points;\n    var x = rrectData.x;\n    var y = rrectData.y;\n    var width = rrectData.width;\n    var height = rrectData.height; // Don't allow negative radius or greater than half the smallest width\n\n    var radius = Math.max(0, Math.min(rrectData.radius, Math.min(width, height) / 2));\n    points.length = 0; // No radius, do a simple rectangle\n\n    if (!radius) {\n      points.push(x, y, x + width, y, x + width, y + height, x, y + height);\n    } else {\n      quadraticBezierCurve(x, y + radius, x, y, x + radius, y, points);\n      quadraticBezierCurve(x + width - radius, y, x + width, y, x + width, y + radius, points);\n      quadraticBezierCurve(x + width, y + height - radius, x + width, y + height, x + width - radius, y + height, points);\n      quadraticBezierCurve(x + radius, y + height, x, y + height, x, y + height - radius, points);\n    } // this tiny number deals with the issue that occurs when points overlap and earcut fails to triangulate the item.\n    // TODO - fix this properly, this is not very elegant.. but it works for now.\n\n  },\n  triangulate: function (graphicsData, graphicsGeometry) {\n    var points = graphicsData.points;\n    var verts = graphicsGeometry.points;\n    var indices = graphicsGeometry.indices;\n    var vecPos = verts.length / 2;\n    var triangles = earcut(points, null, 2);\n\n    for (var i = 0, j = triangles.length; i < j; i += 3) {\n      indices.push(triangles[i] + vecPos); //     indices.push(triangles[i] + vecPos);\n\n      indices.push(triangles[i + 1] + vecPos); //   indices.push(triangles[i + 2] + vecPos);\n\n      indices.push(triangles[i + 2] + vecPos);\n    }\n\n    for (var i = 0, j = points.length; i < j; i++) {\n      verts.push(points[i], points[++i]);\n    }\n  }\n};\n/**\n * Buffers vertices to draw a square cap.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} x - X-coord of end point\n * @param {number} y - Y-coord of end point\n * @param {number} nx - X-coord of line normal pointing inside\n * @param {number} ny - Y-coord of line normal pointing inside\n * @param {Array<number>} verts - vertex buffer\n * @returns {}\n */\n\nfunction square(x, y, nx, ny, innerWeight, outerWeight, clockwise,\n/* rotation for square (true at left end, false at right end) */\nverts) {\n  var ix = x - nx * innerWeight;\n  var iy = y - ny * innerWeight;\n  var ox = x + nx * outerWeight;\n  var oy = y + ny * outerWeight;\n  /* Rotate nx,ny for extension vector */\n\n  var exx;\n  var eyy;\n\n  if (clockwise) {\n    exx = ny;\n    eyy = -nx;\n  } else {\n    exx = -ny;\n    eyy = nx;\n  }\n  /* [i|0]x,y extended at cap */\n\n\n  var eix = ix + exx;\n  var eiy = iy + eyy;\n  var eox = ox + exx;\n  var eoy = oy + eyy;\n  /* Square itself must be inserted clockwise*/\n\n  verts.push(eix, eiy);\n  verts.push(eox, eoy);\n  return 2;\n}\n/**\n * Buffers vertices to draw an arc at the line joint or cap.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} cx - X-coord of center\n * @param {number} cy - Y-coord of center\n * @param {number} sx - X-coord of arc start\n * @param {number} sy - Y-coord of arc start\n * @param {number} ex - X-coord of arc end\n * @param {number} ey - Y-coord of arc end\n * @param {Array<number>} verts - buffer of vertices\n * @param {boolean} clockwise - orientation of vertices\n * @returns {number} - no. of vertices pushed\n */\n\n\nfunction round(cx, cy, sx, sy, ex, ey, verts, clockwise) {\n  var cx2p0x = sx - cx;\n  var cy2p0y = sy - cy;\n  var angle0 = Math.atan2(cx2p0x, cy2p0y);\n  var angle1 = Math.atan2(ex - cx, ey - cy);\n\n  if (clockwise && angle0 < angle1) {\n    angle0 += Math.PI * 2;\n  } else if (!clockwise && angle0 > angle1) {\n    angle1 += Math.PI * 2;\n  }\n\n  var startAngle = angle0;\n  var angleDiff = angle1 - angle0;\n  var absAngleDiff = Math.abs(angleDiff);\n  /* if (absAngleDiff >= PI_LBOUND && absAngleDiff <= PI_UBOUND)\n  {\n      const r1x = cx - nxtPx;\n      const r1y = cy - nxtPy;\n       if (r1x === 0)\n      {\n          if (r1y > 0)\n          {\n              angleDiff = -angleDiff;\n          }\n      }\n      else if (r1x >= -GRAPHICS_CURVES.epsilon)\n      {\n          angleDiff = -angleDiff;\n      }\n  }*/\n\n  var radius = Math.sqrt(cx2p0x * cx2p0x + cy2p0y * cy2p0y);\n  var segCount = (15 * absAngleDiff * Math.sqrt(radius) / Math.PI >> 0) + 1;\n  var angleInc = angleDiff / segCount;\n  startAngle += angleInc;\n\n  if (clockwise) {\n    verts.push(cx, cy);\n    verts.push(sx, sy);\n\n    for (var i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n      verts.push(cx, cy);\n      verts.push(cx + Math.sin(angle) * radius, cy + Math.cos(angle) * radius);\n    }\n\n    verts.push(cx, cy);\n    verts.push(ex, ey);\n  } else {\n    verts.push(sx, sy);\n    verts.push(cx, cy);\n\n    for (var i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n      verts.push(cx + Math.sin(angle) * radius, cy + Math.cos(angle) * radius);\n      verts.push(cx, cy);\n    }\n\n    verts.push(ex, ey);\n    verts.push(cx, cy);\n  }\n\n  return segCount * 2;\n}\n/**\n * Builds a line to draw using the polygon method.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\n\n\nfunction buildNonNativeLine(graphicsData, graphicsGeometry) {\n  var shape = graphicsData.shape;\n  var points = graphicsData.points || shape.points.slice();\n  var eps = graphicsGeometry.closePointEps;\n\n  if (points.length === 0) {\n    return;\n  } // if the line width is an odd number add 0.5 to align to a whole pixel\n  // commenting this out fixes #711 and #1620\n  // if (graphicsData.lineWidth%2)\n  // {\n  //     for (i = 0; i < points.length; i++)\n  //     {\n  //         points[i] += 0.5;\n  //     }\n  // }\n\n\n  var style = graphicsData.lineStyle; // get first and last point.. figure out the middle!\n\n  var firstPoint = new Point(points[0], points[1]);\n  var lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n  var closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n  var closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps && Math.abs(firstPoint.y - lastPoint.y) < eps; // if the first point is the last point - gonna have issues :)\n\n  if (closedShape) {\n    // need to clone as we are going to slightly modify the shape..\n    points = points.slice();\n\n    if (closedPath) {\n      points.pop();\n      points.pop();\n      lastPoint.set(points[points.length - 2], points[points.length - 1]);\n    }\n\n    var midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n    var midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n    points.unshift(midPointX, midPointY);\n    points.push(midPointX, midPointY);\n  }\n\n  var verts = graphicsGeometry.points;\n  var length = points.length / 2;\n  var indexCount = points.length;\n  var indexStart = verts.length / 2; // Max. inner and outer width\n\n  var width = style.width / 2;\n  var widthSquared = width * width;\n  var miterLimitSquared = style.miterLimit * style.miterLimit;\n  /* Line segments of interest where (x1,y1) forms the corner. */\n\n  var x0 = points[0];\n  var y0 = points[1];\n  var x1 = points[2];\n  var y1 = points[3];\n  var x2 = 0;\n  var y2 = 0;\n  /* perp[?](x|y) = the line normal with magnitude lineWidth. */\n\n  var perpx = -(y0 - y1);\n  var perpy = x0 - x1;\n  var perp1x = 0;\n  var perp1y = 0;\n  var dist = Math.sqrt(perpx * perpx + perpy * perpy);\n  perpx /= dist;\n  perpy /= dist;\n  perpx *= width;\n  perpy *= width;\n  var ratio = style.alignment; // 0.5;\n\n  var innerWeight = (1 - ratio) * 2;\n  var outerWeight = ratio * 2;\n\n  if (!closedShape) {\n    if (style.cap === LINE_CAP.ROUND) {\n      indexCount += round(x0 - perpx * (innerWeight - outerWeight) * 0.5, y0 - perpy * (innerWeight - outerWeight) * 0.5, x0 - perpx * innerWeight, y0 - perpy * innerWeight, x0 + perpx * outerWeight, y0 + perpy * outerWeight, verts, true) + 2;\n    } else if (style.cap === LINE_CAP.SQUARE) {\n      indexCount += square(x0, y0, perpx, perpy, innerWeight, outerWeight, true, verts);\n    }\n  } // Push first point (below & above vertices)\n\n\n  verts.push(x0 - perpx * innerWeight, y0 - perpy * innerWeight);\n  verts.push(x0 + perpx * outerWeight, y0 + perpy * outerWeight);\n\n  for (var i = 1; i < length - 1; ++i) {\n    x0 = points[(i - 1) * 2];\n    y0 = points[(i - 1) * 2 + 1];\n    x1 = points[i * 2];\n    y1 = points[i * 2 + 1];\n    x2 = points[(i + 1) * 2];\n    y2 = points[(i + 1) * 2 + 1];\n    perpx = -(y0 - y1);\n    perpy = x0 - x1;\n    dist = Math.sqrt(perpx * perpx + perpy * perpy);\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n    perp1x = -(y1 - y2);\n    perp1y = x1 - x2;\n    dist = Math.sqrt(perp1x * perp1x + perp1y * perp1y);\n    perp1x /= dist;\n    perp1y /= dist;\n    perp1x *= width;\n    perp1y *= width;\n    /* d[x|y](0|1) = the component displacement between points p(0,1|1,2) */\n\n    var dx0 = x1 - x0;\n    var dy0 = y0 - y1;\n    var dx1 = x1 - x2;\n    var dy1 = y2 - y1;\n    /* +ve if internal angle counterclockwise, -ve if internal angle clockwise. */\n\n    var cross = dy0 * dx1 - dy1 * dx0;\n    var clockwise = cross < 0;\n    /* Going nearly straight? */\n\n    if (Math.abs(cross) < 0.1) {\n      verts.push(x1 - perpx * innerWeight, y1 - perpy * innerWeight);\n      verts.push(x1 + perpx * outerWeight, y1 + perpy * outerWeight);\n      continue;\n    }\n    /* p[x|y] is the miter point. pdist is the distance between miter point and p1. */\n\n\n    var c1 = (-perpx + x0) * (-perpy + y1) - (-perpx + x1) * (-perpy + y0);\n    var c2 = (-perp1x + x2) * (-perp1y + y1) - (-perp1x + x1) * (-perp1y + y2);\n    var px = (dx0 * c2 - dx1 * c1) / cross;\n    var py = (dy1 * c1 - dy0 * c2) / cross;\n    var pdist = (px - x1) * (px - x1) + (py - y1) * (py - y1);\n    /* Inner miter point */\n\n    var imx = x1 + (px - x1) * innerWeight;\n    var imy = y1 + (py - y1) * innerWeight;\n    /* Outer miter point */\n\n    var omx = x1 - (px - x1) * outerWeight;\n    var omy = y1 - (py - y1) * outerWeight;\n    /* Is the inside miter point too far away, creating a spike? */\n\n    var smallerInsideSegmentSq = Math.min(dx0 * dx0 + dy0 * dy0, dx1 * dx1 + dy1 * dy1);\n    var insideWeight = clockwise ? innerWeight : outerWeight;\n    var smallerInsideDiagonalSq = smallerInsideSegmentSq + insideWeight * insideWeight * widthSquared;\n    var insideMiterOk = pdist <= smallerInsideDiagonalSq;\n\n    if (insideMiterOk) {\n      if (style.join === LINE_JOIN.BEVEL || pdist / widthSquared > miterLimitSquared) {\n        if (clockwise)\n          /* rotating at inner angle */\n          {\n            verts.push(imx, imy); // inner miter point\n\n            verts.push(x1 + perpx * outerWeight, y1 + perpy * outerWeight); // first segment's outer vertex\n\n            verts.push(imx, imy); // inner miter point\n\n            verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight); // second segment's outer vertex\n          } else\n          /* rotating at outer angle */\n          {\n            verts.push(x1 - perpx * innerWeight, y1 - perpy * innerWeight); // first segment's inner vertex\n\n            verts.push(omx, omy); // outer miter point\n\n            verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight); // second segment's outer vertex\n\n            verts.push(omx, omy); // outer miter point\n          }\n\n        indexCount += 2;\n      } else if (style.join === LINE_JOIN.ROUND) {\n        if (clockwise)\n          /* arc is outside */\n          {\n            verts.push(imx, imy);\n            verts.push(x1 + perpx * outerWeight, y1 + perpy * outerWeight);\n            indexCount += round(x1, y1, x1 + perpx * outerWeight, y1 + perpy * outerWeight, x1 + perp1x * outerWeight, y1 + perp1y * outerWeight, verts, true) + 4;\n            verts.push(imx, imy);\n            verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n          } else\n          /* arc is inside */\n          {\n            verts.push(x1 - perpx * innerWeight, y1 - perpy * innerWeight);\n            verts.push(omx, omy);\n            indexCount += round(x1, y1, x1 - perpx * innerWeight, y1 - perpy * innerWeight, x1 - perp1x * innerWeight, y1 - perp1y * innerWeight, verts, false) + 4;\n            verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight);\n            verts.push(omx, omy);\n          }\n      } else {\n        verts.push(imx, imy);\n        verts.push(omx, omy);\n      }\n    } else // inside miter is NOT ok\n      {\n        verts.push(x1 - perpx * innerWeight, y1 - perpy * innerWeight); // first segment's inner vertex\n\n        verts.push(x1 + perpx * outerWeight, y1 + perpy * outerWeight); // first segment's outer vertex\n\n        if (style.join === LINE_JOIN.BEVEL || pdist / widthSquared > miterLimitSquared) ;else if (style.join === LINE_JOIN.ROUND) {\n          if (clockwise)\n            /* arc is outside */\n            {\n              indexCount += round(x1, y1, x1 + perpx * outerWeight, y1 + perpy * outerWeight, x1 + perp1x * outerWeight, y1 + perp1y * outerWeight, verts, true) + 2;\n            } else\n            /* arc is inside */\n            {\n              indexCount += round(x1, y1, x1 - perpx * innerWeight, y1 - perpy * innerWeight, x1 - perp1x * innerWeight, y1 - perp1y * innerWeight, verts, false) + 2;\n            }\n        } else {\n          if (clockwise) {\n            verts.push(omx, omy); // inner miter point\n\n            verts.push(omx, omy); // inner miter point\n          } else {\n            verts.push(imx, imy); // outer miter point\n\n            verts.push(imx, imy); // outer miter point\n          }\n\n          indexCount += 2;\n        }\n        verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight); // second segment's inner vertex\n\n        verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight); // second segment's outer vertex\n\n        indexCount += 2;\n      }\n  }\n\n  x0 = points[(length - 2) * 2];\n  y0 = points[(length - 2) * 2 + 1];\n  x1 = points[(length - 1) * 2];\n  y1 = points[(length - 1) * 2 + 1];\n  perpx = -(y0 - y1);\n  perpy = x0 - x1;\n  dist = Math.sqrt(perpx * perpx + perpy * perpy);\n  perpx /= dist;\n  perpy /= dist;\n  perpx *= width;\n  perpy *= width;\n  verts.push(x1 - perpx * innerWeight, y1 - perpy * innerWeight);\n  verts.push(x1 + perpx * outerWeight, y1 + perpy * outerWeight);\n\n  if (!closedShape) {\n    if (style.cap === LINE_CAP.ROUND) {\n      indexCount += round(x1 - perpx * (innerWeight - outerWeight) * 0.5, y1 - perpy * (innerWeight - outerWeight) * 0.5, x1 - perpx * innerWeight, y1 - perpy * innerWeight, x1 + perpx * outerWeight, y1 + perpy * outerWeight, verts, false) + 2;\n    } else if (style.cap === LINE_CAP.SQUARE) {\n      indexCount += square(x1, y1, perpx, perpy, innerWeight, outerWeight, false, verts);\n    }\n  }\n\n  var indices = graphicsGeometry.indices;\n  var eps2 = GRAPHICS_CURVES.epsilon * GRAPHICS_CURVES.epsilon; // indices.push(indexStart);\n\n  for (var i = indexStart; i < indexCount + indexStart - 2; ++i) {\n    x0 = verts[i * 2];\n    y0 = verts[i * 2 + 1];\n    x1 = verts[(i + 1) * 2];\n    y1 = verts[(i + 1) * 2 + 1];\n    x2 = verts[(i + 2) * 2];\n    y2 = verts[(i + 2) * 2 + 1];\n    /* Skip zero area triangles */\n\n    if (Math.abs(x0 * (y1 - y2) + x1 * (y2 - y0) + x2 * (y0 - y1)) < eps2) {\n      continue;\n    }\n\n    indices.push(i, i + 1, i + 2);\n  }\n}\n/**\n * Builds a line to draw using the gl.drawArrays(gl.LINES) method\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\n\n\nfunction buildNativeLine(graphicsData, graphicsGeometry) {\n  var i = 0;\n  var shape = graphicsData.shape;\n  var points = graphicsData.points || shape.points;\n  var closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n\n  if (points.length === 0) {\n    return;\n  }\n\n  var verts = graphicsGeometry.points;\n  var indices = graphicsGeometry.indices;\n  var length = points.length / 2;\n  var startIndex = verts.length / 2;\n  var currentIndex = startIndex;\n  verts.push(points[0], points[1]);\n\n  for (i = 1; i < length; i++) {\n    verts.push(points[i * 2], points[i * 2 + 1]);\n    indices.push(currentIndex, currentIndex + 1);\n    currentIndex++;\n  }\n\n  if (closedShape) {\n    indices.push(currentIndex, startIndex);\n  }\n}\n/**\n * Builds a line to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\n\n\nfunction buildLine(graphicsData, graphicsGeometry) {\n  if (graphicsData.lineStyle.native) {\n    buildNativeLine(graphicsData, graphicsGeometry);\n  } else {\n    buildNonNativeLine(graphicsData, graphicsGeometry);\n  }\n}\n/**\n * Utilities for arc curves\n * @class\n * @private\n */\n\n\nvar ArcUtils =\n/** @class */\nfunction () {\n  function ArcUtils() {}\n  /**\n   * The arcTo() method creates an arc/curve between two tangents on the canvas.\n   *\n   * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n   *\n   * @private\n   * @param {number} x1 - The x-coordinate of the beginning of the arc\n   * @param {number} y1 - The y-coordinate of the beginning of the arc\n   * @param {number} x2 - The x-coordinate of the end of the arc\n   * @param {number} y2 - The y-coordinate of the end of the arc\n   * @param {number} radius - The radius of the arc\n   * @return {object} If the arc length is valid, return center of circle, radius and other info otherwise `null`.\n   */\n\n\n  ArcUtils.curveTo = function (x1, y1, x2, y2, radius, points) {\n    var fromX = points[points.length - 2];\n    var fromY = points[points.length - 1];\n    var a1 = fromY - y1;\n    var b1 = fromX - x1;\n    var a2 = y2 - y1;\n    var b2 = x2 - x1;\n    var mm = Math.abs(a1 * b2 - b1 * a2);\n\n    if (mm < 1.0e-8 || radius === 0) {\n      if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) {\n        points.push(x1, y1);\n      }\n\n      return null;\n    }\n\n    var dd = a1 * a1 + b1 * b1;\n    var cc = a2 * a2 + b2 * b2;\n    var tt = a1 * a2 + b1 * b2;\n    var k1 = radius * Math.sqrt(dd) / mm;\n    var k2 = radius * Math.sqrt(cc) / mm;\n    var j1 = k1 * tt / dd;\n    var j2 = k2 * tt / cc;\n    var cx = k1 * b2 + k2 * b1;\n    var cy = k1 * a2 + k2 * a1;\n    var px = b1 * (k2 + j1);\n    var py = a1 * (k2 + j1);\n    var qx = b2 * (k1 + j2);\n    var qy = a2 * (k1 + j2);\n    var startAngle = Math.atan2(py - cy, px - cx);\n    var endAngle = Math.atan2(qy - cy, qx - cx);\n    return {\n      cx: cx + x1,\n      cy: cy + y1,\n      radius: radius,\n      startAngle: startAngle,\n      endAngle: endAngle,\n      anticlockwise: b1 * a2 > b2 * a1\n    };\n  };\n  /* eslint-disable max-len */\n\n  /**\n   * The arc method creates an arc/curve (used to create circles, or parts of circles).\n   *\n   * @private\n   * @param {number} startX - Start x location of arc\n   * @param {number} startY - Start y location of arc\n   * @param {number} cx - The x-coordinate of the center of the circle\n   * @param {number} cy - The y-coordinate of the center of the circle\n   * @param {number} radius - The radius of the circle\n   * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n   *  of the arc's circle)\n   * @param {number} endAngle - The ending angle, in radians\n   * @param {boolean} anticlockwise - Specifies whether the drawing should be\n   *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n   *  indicates counter-clockwise.\n   * @param {number[]} points - Collection of points to add to\n   */\n\n\n  ArcUtils.arc = function (_startX, _startY, cx, cy, radius, startAngle, endAngle, _anticlockwise, points) {\n    var sweep = endAngle - startAngle;\n\n    var n = GRAPHICS_CURVES._segmentsCount(Math.abs(sweep) * radius, Math.ceil(Math.abs(sweep) / PI_2) * 40);\n\n    var theta = sweep / (n * 2);\n    var theta2 = theta * 2;\n    var cTheta = Math.cos(theta);\n    var sTheta = Math.sin(theta);\n    var segMinus = n - 1;\n    var remainder = segMinus % 1 / segMinus;\n\n    for (var i = 0; i <= segMinus; ++i) {\n      var real = i + remainder * i;\n      var angle = theta + startAngle + theta2 * real;\n      var c = Math.cos(angle);\n      var s = -Math.sin(angle);\n      points.push((cTheta * c + sTheta * s) * radius + cx, (cTheta * -s + sTheta * c) * radius + cy);\n    }\n  };\n\n  return ArcUtils;\n}();\n/**\n * Utilities for bezier curves\n * @class\n * @private\n */\n\n\nvar BezierUtils =\n/** @class */\nfunction () {\n  function BezierUtils() {}\n  /**\n   * Calculate length of bezier curve.\n   * Analytical solution is impossible, since it involves an integral that does not integrate in general.\n   * Therefore numerical solution is used.\n   *\n   * @private\n   * @param {number} fromX - Starting point x\n   * @param {number} fromY - Starting point y\n   * @param {number} cpX - Control point x\n   * @param {number} cpY - Control point y\n   * @param {number} cpX2 - Second Control point x\n   * @param {number} cpY2 - Second Control point y\n   * @param {number} toX - Destination point x\n   * @param {number} toY - Destination point y\n   * @return {number} Length of bezier curve\n   */\n\n\n  BezierUtils.curveLength = function (fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY) {\n    var n = 10;\n    var result = 0.0;\n    var t = 0.0;\n    var t2 = 0.0;\n    var t3 = 0.0;\n    var nt = 0.0;\n    var nt2 = 0.0;\n    var nt3 = 0.0;\n    var x = 0.0;\n    var y = 0.0;\n    var dx = 0.0;\n    var dy = 0.0;\n    var prevX = fromX;\n    var prevY = fromY;\n\n    for (var i = 1; i <= n; ++i) {\n      t = i / n;\n      t2 = t * t;\n      t3 = t2 * t;\n      nt = 1.0 - t;\n      nt2 = nt * nt;\n      nt3 = nt2 * nt;\n      x = nt3 * fromX + 3.0 * nt2 * t * cpX + 3.0 * nt * t2 * cpX2 + t3 * toX;\n      y = nt3 * fromY + 3.0 * nt2 * t * cpY + 3 * nt * t2 * cpY2 + t3 * toY;\n      dx = prevX - x;\n      dy = prevY - y;\n      prevX = x;\n      prevY = y;\n      result += Math.sqrt(dx * dx + dy * dy);\n    }\n\n    return result;\n  };\n  /**\n   * Calculate the points for a bezier curve and then draws it.\n   *\n   * Ignored from docs since it is not directly exposed.\n   *\n   * @ignore\n   * @param {number} cpX - Control point x\n   * @param {number} cpY - Control point y\n   * @param {number} cpX2 - Second Control point x\n   * @param {number} cpY2 - Second Control point y\n   * @param {number} toX - Destination point x\n   * @param {number} toY - Destination point y\n   * @param {number[]} points - Path array to push points into\n   */\n\n\n  BezierUtils.curveTo = function (cpX, cpY, cpX2, cpY2, toX, toY, points) {\n    var fromX = points[points.length - 2];\n    var fromY = points[points.length - 1];\n    points.length -= 2;\n\n    var n = GRAPHICS_CURVES._segmentsCount(BezierUtils.curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY));\n\n    var dt = 0;\n    var dt2 = 0;\n    var dt3 = 0;\n    var t2 = 0;\n    var t3 = 0;\n    points.push(fromX, fromY);\n\n    for (var i = 1, j = 0; i <= n; ++i) {\n      j = i / n;\n      dt = 1 - j;\n      dt2 = dt * dt;\n      dt3 = dt2 * dt;\n      t2 = j * j;\n      t3 = t2 * j;\n      points.push(dt3 * fromX + 3 * dt2 * j * cpX + 3 * dt * t2 * cpX2 + t3 * toX, dt3 * fromY + 3 * dt2 * j * cpY + 3 * dt * t2 * cpY2 + t3 * toY);\n    }\n  };\n\n  return BezierUtils;\n}();\n/**\n * Utilities for quadratic curves\n * @class\n * @private\n */\n\n\nvar QuadraticUtils =\n/** @class */\nfunction () {\n  function QuadraticUtils() {}\n  /**\n   * Calculate length of quadratic curve\n   * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}\n   * for the detailed explanation of math behind this.\n   *\n   * @private\n   * @param {number} fromX - x-coordinate of curve start point\n   * @param {number} fromY - y-coordinate of curve start point\n   * @param {number} cpX - x-coordinate of curve control point\n   * @param {number} cpY - y-coordinate of curve control point\n   * @param {number} toX - x-coordinate of curve end point\n   * @param {number} toY - y-coordinate of curve end point\n   * @return {number} Length of quadratic curve\n   */\n\n\n  QuadraticUtils.curveLength = function (fromX, fromY, cpX, cpY, toX, toY) {\n    var ax = fromX - 2.0 * cpX + toX;\n    var ay = fromY - 2.0 * cpY + toY;\n    var bx = 2.0 * cpX - 2.0 * fromX;\n    var by = 2.0 * cpY - 2.0 * fromY;\n    var a = 4.0 * (ax * ax + ay * ay);\n    var b = 4.0 * (ax * bx + ay * by);\n    var c = bx * bx + by * by;\n    var s = 2.0 * Math.sqrt(a + b + c);\n    var a2 = Math.sqrt(a);\n    var a32 = 2.0 * a * a2;\n    var c2 = 2.0 * Math.sqrt(c);\n    var ba = b / a2;\n    return (a32 * s + a2 * b * (s - c2) + (4.0 * c * a - b * b) * Math.log((2.0 * a2 + ba + s) / (ba + c2))) / (4.0 * a32);\n  };\n  /**\n   * Calculate the points for a quadratic bezier curve and then draws it.\n   * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n   *\n   * @private\n   * @param {number} cpX - Control point x\n   * @param {number} cpY - Control point y\n   * @param {number} toX - Destination point x\n   * @param {number} toY - Destination point y\n   * @param {number[]} points - Points to add segments to.\n   */\n\n\n  QuadraticUtils.curveTo = function (cpX, cpY, toX, toY, points) {\n    var fromX = points[points.length - 2];\n    var fromY = points[points.length - 1];\n\n    var n = GRAPHICS_CURVES._segmentsCount(QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY));\n\n    var xa = 0;\n    var ya = 0;\n\n    for (var i = 1; i <= n; ++i) {\n      var j = i / n;\n      xa = fromX + (cpX - fromX) * j;\n      ya = fromY + (cpY - fromY) * j;\n      points.push(xa + (cpX + (toX - cpX) * j - xa) * j, ya + (cpY + (toY - cpY) * j - ya) * j);\n    }\n  };\n\n  return QuadraticUtils;\n}();\n/**\n * A structure to hold interim batch objects for Graphics.\n * @class\n * @memberof PIXI.graphicsUtils\n */\n\n\nvar BatchPart =\n/** @class */\nfunction () {\n  function BatchPart() {\n    this.reset();\n  }\n  /**\n   * Begin batch part\n   *\n   * @param {PIXI.FillStyle | PIXI.LineStyle} style\n   * @param {number} startIndex\n   * @param {number} attribStart\n   */\n\n\n  BatchPart.prototype.begin = function (style, startIndex, attribStart) {\n    this.reset();\n    this.style = style;\n    this.start = startIndex;\n    this.attribStart = attribStart;\n  };\n  /**\n   * End batch part\n   *\n   * @param {number} endIndex\n   * @param {number} endAttrib\n   */\n\n\n  BatchPart.prototype.end = function (endIndex, endAttrib) {\n    this.attribSize = endAttrib - this.attribStart;\n    this.size = endIndex - this.start;\n  };\n\n  BatchPart.prototype.reset = function () {\n    this.style = null;\n    this.size = 0;\n    this.start = 0;\n    this.attribStart = 0;\n    this.attribSize = 0;\n  };\n\n  return BatchPart;\n}();\n/**\n * Generalized convenience utilities for Graphics.\n *\n * @namespace graphicsUtils\n * @memberof PIXI\n */\n\n\nvar _a;\n/**\n * Map of fill commands for each shape type.\n *\n * @memberof PIXI.graphicsUtils\n * @member {Object} FILL_COMMANDS\n */\n\n\nvar FILL_COMMANDS = (_a = {}, _a[SHAPES.POLY] = buildPoly, _a[SHAPES.CIRC] = buildCircle, _a[SHAPES.ELIP] = buildCircle, _a[SHAPES.RECT] = buildRectangle, _a[SHAPES.RREC] = buildRoundedRectangle, _a);\n/**\n * Batch pool, stores unused batches for preventing allocations.\n *\n * @memberof PIXI.graphicsUtils\n * @member {Array<PIXI.graphicsUtils.BatchPart>} BATCH_POOL\n */\n\nvar BATCH_POOL = [];\n/**\n * Draw call pool, stores unused draw calls for preventing allocations.\n *\n * @memberof PIXI.graphicsUtils\n * @member {Array<PIXI.BatchDrawCall>} DRAW_CALL_POOL\n */\n\nvar DRAW_CALL_POOL = [];\n/**\n * A class to contain data useful for Graphics objects\n *\n * @class\n * @memberof PIXI\n */\n\nvar GraphicsData =\n/** @class */\nfunction () {\n  /**\n   *\n   * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n   * @param {PIXI.FillStyle} [fillStyle] - the width of the line to draw\n   * @param {PIXI.LineStyle} [lineStyle] - the color of the line to draw\n   * @param {PIXI.Matrix} [matrix] - Transform matrix\n   */\n  function GraphicsData(shape, fillStyle, lineStyle, matrix) {\n    if (fillStyle === void 0) {\n      fillStyle = null;\n    }\n\n    if (lineStyle === void 0) {\n      lineStyle = null;\n    }\n\n    if (matrix === void 0) {\n      matrix = null;\n    }\n    /**\n     * The shape object to draw.\n     * @member {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle}\n     */\n\n\n    this.shape = shape;\n    /**\n     * The style of the line.\n     * @member {PIXI.LineStyle}\n     */\n\n    this.lineStyle = lineStyle;\n    /**\n     * The style of the fill.\n     * @member {PIXI.FillStyle}\n     */\n\n    this.fillStyle = fillStyle;\n    /**\n     * The transform matrix.\n     * @member {PIXI.Matrix}\n     */\n\n    this.matrix = matrix;\n    /**\n     * The type of the shape, see the Const.Shapes file for all the existing types,\n     * @member {number}\n     */\n\n    this.type = shape.type;\n    /**\n     * The collection of points.\n     * @member {number[]}\n     */\n\n    this.points = [];\n    /**\n     * The collection of holes.\n     * @member {PIXI.GraphicsData[]}\n     */\n\n    this.holes = [];\n  }\n  /**\n   * Creates a new GraphicsData object with the same values as this one.\n   *\n   * @return {PIXI.GraphicsData} Cloned GraphicsData object\n   */\n\n\n  GraphicsData.prototype.clone = function () {\n    return new GraphicsData(this.shape, this.fillStyle, this.lineStyle, this.matrix);\n  };\n  /**\n   * Destroys the Graphics data.\n   *\n   */\n\n\n  GraphicsData.prototype.destroy = function () {\n    this.shape = null;\n    this.holes.length = 0;\n    this.holes = null;\n    this.points.length = 0;\n    this.points = null;\n    this.lineStyle = null;\n    this.fillStyle = null;\n  };\n\n  return GraphicsData;\n}();\n\nvar tmpPoint = new Point();\nvar tmpBounds = new Bounds();\n/**\n * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.\n *\n * GraphicsGeometry is designed to not be continually updating the geometry since it's expensive\n * to re-tesselate using **earcut**. Consider using {@link PIXI.Mesh} for this use-case, it's much faster.\n *\n * @class\n * @extends PIXI.BatchGeometry\n * @memberof PIXI\n */\n\nvar GraphicsGeometry =\n/** @class */\nfunction (_super) {\n  __extends(GraphicsGeometry, _super);\n\n  function GraphicsGeometry() {\n    var _this = _super.call(this) || this;\n\n    _this.uvsFloat32 = null;\n    _this.indicesUint16 = null;\n    /**\n     * An array of points to draw, 2 numbers per point\n     *\n     * @member {number[]}\n     * @protected\n     */\n\n    _this.points = [];\n    /**\n     * The collection of colors\n     *\n     * @member {number[]}\n     * @protected\n     */\n\n    _this.colors = [];\n    /**\n     * The UVs collection\n     *\n     * @member {number[]}\n     * @protected\n     */\n\n    _this.uvs = [];\n    /**\n     * The indices of the vertices\n     *\n     * @member {number[]}\n     * @protected\n     */\n\n    _this.indices = [];\n    /**\n     * Reference to the texture IDs.\n     *\n     * @member {number[]}\n     * @protected\n     */\n\n    _this.textureIds = [];\n    /**\n     * The collection of drawn shapes.\n     *\n     * @member {PIXI.GraphicsData[]}\n     * @protected\n     */\n\n    _this.graphicsData = [];\n    /**\n     * Used to detect if the graphics object has changed.\n     *\n     * @member {number}\n     * @protected\n     */\n\n    _this.dirty = 0;\n    /**\n     * Batches need to regenerated if the geometry is updated.\n     *\n     * @member {number}\n     * @protected\n     */\n\n    _this.batchDirty = -1;\n    /**\n     * Used to check if the cache is dirty.\n     *\n     * @member {number}\n     * @protected\n     */\n\n    _this.cacheDirty = -1;\n    /**\n     * Used to detect if we cleared the graphicsData.\n     *\n     * @member {number}\n     * @default 0\n     * @protected\n     */\n\n    _this.clearDirty = 0;\n    /**\n     * List of current draw calls drived from the batches.\n     *\n     * @member {object[]}\n     * @protected\n     */\n\n    _this.drawCalls = [];\n    /**\n     * Intermediate abstract format sent to batch system.\n     * Can be converted to drawCalls or to batchable objects.\n     *\n     * @member {PIXI.graphicsUtils.BatchPart[]}\n     * @protected\n     */\n\n    _this.batches = [];\n    /**\n     * Index of the last batched shape in the stack of calls.\n     *\n     * @member {number}\n     * @protected\n     */\n\n    _this.shapeIndex = 0;\n    /**\n     * Cached bounds.\n     *\n     * @member {PIXI.Bounds}\n     * @protected\n     */\n\n    _this._bounds = new Bounds();\n    /**\n     * The bounds dirty flag.\n     *\n     * @member {number}\n     * @protected\n     */\n\n    _this.boundsDirty = -1;\n    /**\n     * Padding to add to the bounds.\n     *\n     * @member {number}\n     * @default 0\n     */\n\n    _this.boundsPadding = 0;\n    _this.batchable = false;\n    _this.indicesUint16 = null;\n    _this.uvsFloat32 = null;\n    /**\n     * Minimal distance between points that are considered different.\n     * Affects line tesselation.\n     *\n     * @member {number}\n     */\n\n    _this.closePointEps = 1e-4;\n    return _this;\n  }\n\n  Object.defineProperty(GraphicsGeometry.prototype, \"bounds\", {\n    /**\n     * Get the current bounds of the graphic geometry.\n     *\n     * @member {PIXI.Bounds}\n     * @readonly\n     */\n    get: function () {\n      if (this.boundsDirty !== this.dirty) {\n        this.boundsDirty = this.dirty;\n        this.calculateBounds();\n      }\n\n      return this._bounds;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Call if you changed graphicsData manually.\n   * Empties all batch buffers.\n   */\n\n  GraphicsGeometry.prototype.invalidate = function () {\n    this.boundsDirty = -1;\n    this.dirty++;\n    this.batchDirty++;\n    this.shapeIndex = 0;\n    this.points.length = 0;\n    this.colors.length = 0;\n    this.uvs.length = 0;\n    this.indices.length = 0;\n    this.textureIds.length = 0;\n\n    for (var i = 0; i < this.drawCalls.length; i++) {\n      this.drawCalls[i].texArray.clear();\n      DRAW_CALL_POOL.push(this.drawCalls[i]);\n    }\n\n    this.drawCalls.length = 0;\n\n    for (var i = 0; i < this.batches.length; i++) {\n      var batchPart = this.batches[i];\n      batchPart.reset();\n      BATCH_POOL.push(batchPart);\n    }\n\n    this.batches.length = 0;\n  };\n  /**\n   * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n   *\n   * @return {PIXI.GraphicsGeometry} This GraphicsGeometry object. Good for chaining method calls\n   */\n\n\n  GraphicsGeometry.prototype.clear = function () {\n    if (this.graphicsData.length > 0) {\n      this.invalidate();\n      this.clearDirty++;\n      this.graphicsData.length = 0;\n    }\n\n    return this;\n  };\n  /**\n   * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n   *\n   * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n   * @param {PIXI.FillStyle} fillStyle - Defines style of the fill.\n   * @param {PIXI.LineStyle} lineStyle - Defines style of the lines.\n   * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n   * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n   */\n\n\n  GraphicsGeometry.prototype.drawShape = function (shape, fillStyle, lineStyle, matrix) {\n    if (fillStyle === void 0) {\n      fillStyle = null;\n    }\n\n    if (lineStyle === void 0) {\n      lineStyle = null;\n    }\n\n    if (matrix === void 0) {\n      matrix = null;\n    }\n\n    var data = new GraphicsData(shape, fillStyle, lineStyle, matrix);\n    this.graphicsData.push(data);\n    this.dirty++;\n    return this;\n  };\n  /**\n   * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n   *\n   * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n   * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n   * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n   */\n\n\n  GraphicsGeometry.prototype.drawHole = function (shape, matrix) {\n    if (matrix === void 0) {\n      matrix = null;\n    }\n\n    if (!this.graphicsData.length) {\n      return null;\n    }\n\n    var data = new GraphicsData(shape, null, null, matrix);\n    var lastShape = this.graphicsData[this.graphicsData.length - 1];\n    data.lineStyle = lastShape.lineStyle;\n    lastShape.holes.push(data);\n    this.dirty++;\n    return this;\n  };\n  /**\n   * Destroys the GraphicsGeometry object.\n   *\n   */\n\n\n  GraphicsGeometry.prototype.destroy = function () {\n    _super.prototype.destroy.call(this); // destroy each of the GraphicsData objects\n\n\n    for (var i = 0; i < this.graphicsData.length; ++i) {\n      this.graphicsData[i].destroy();\n    }\n\n    this.points.length = 0;\n    this.points = null;\n    this.colors.length = 0;\n    this.colors = null;\n    this.uvs.length = 0;\n    this.uvs = null;\n    this.indices.length = 0;\n    this.indices = null;\n    this.indexBuffer.destroy();\n    this.indexBuffer = null;\n    this.graphicsData.length = 0;\n    this.graphicsData = null;\n    this.drawCalls.length = 0;\n    this.drawCalls = null;\n    this.batches.length = 0;\n    this.batches = null;\n    this._bounds = null;\n  };\n  /**\n   * Check to see if a point is contained within this geometry.\n   *\n   * @param {PIXI.IPointData} point - Point to check if it's contained.\n   * @return {Boolean} `true` if the point is contained within geometry.\n   */\n\n\n  GraphicsGeometry.prototype.containsPoint = function (point) {\n    var graphicsData = this.graphicsData;\n\n    for (var i = 0; i < graphicsData.length; ++i) {\n      var data = graphicsData[i];\n\n      if (!data.fillStyle.visible) {\n        continue;\n      } // only deal with fills..\n\n\n      if (data.shape) {\n        if (data.matrix) {\n          data.matrix.applyInverse(point, tmpPoint);\n        } else {\n          tmpPoint.copyFrom(point);\n        }\n\n        if (data.shape.contains(tmpPoint.x, tmpPoint.y)) {\n          var hitHole = false;\n\n          if (data.holes) {\n            for (var i_1 = 0; i_1 < data.holes.length; i_1++) {\n              var hole = data.holes[i_1];\n\n              if (hole.shape.contains(tmpPoint.x, tmpPoint.y)) {\n                hitHole = true;\n                break;\n              }\n            }\n          }\n\n          if (!hitHole) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Generates intermediate batch data. Either gets converted to drawCalls\n   * or used to convert to batch objects directly by the Graphics object.\n   *\n   * @param {boolean} [allow32Indices] - Allow using 32-bit indices for preventing artifacts when more that 65535 vertices\n   */\n\n\n  GraphicsGeometry.prototype.updateBatches = function (allow32Indices) {\n    if (!this.graphicsData.length) {\n      this.batchable = true;\n      return;\n    }\n\n    if (!this.validateBatching()) {\n      return;\n    }\n\n    this.cacheDirty = this.dirty;\n    var uvs = this.uvs;\n    var graphicsData = this.graphicsData;\n    var batchPart = null;\n    var currentStyle = null;\n\n    if (this.batches.length > 0) {\n      batchPart = this.batches[this.batches.length - 1];\n      currentStyle = batchPart.style;\n    }\n\n    for (var i = this.shapeIndex; i < graphicsData.length; i++) {\n      this.shapeIndex++;\n      var data = graphicsData[i];\n      var fillStyle = data.fillStyle;\n      var lineStyle = data.lineStyle;\n      var command = FILL_COMMANDS[data.type]; // build out the shapes points..\n\n      command.build(data);\n\n      if (data.matrix) {\n        this.transformPoints(data.points, data.matrix);\n      }\n\n      for (var j = 0; j < 2; j++) {\n        var style = j === 0 ? fillStyle : lineStyle;\n\n        if (!style.visible) {\n          continue;\n        }\n\n        var nextTexture = style.texture.baseTexture;\n        var index_1 = this.indices.length;\n        var attribIndex = this.points.length / 2;\n        nextTexture.wrapMode = WRAP_MODES.REPEAT;\n\n        if (j === 0) {\n          this.processFill(data);\n        } else {\n          this.processLine(data);\n        }\n\n        var size = this.points.length / 2 - attribIndex;\n\n        if (size === 0) {\n          continue;\n        } // close batch if style is different\n\n\n        if (batchPart && !this._compareStyles(currentStyle, style)) {\n          batchPart.end(index_1, attribIndex);\n          batchPart = null;\n        } // spawn new batch if its first batch or previous was closed\n\n\n        if (!batchPart) {\n          batchPart = BATCH_POOL.pop() || new BatchPart();\n          batchPart.begin(style, index_1, attribIndex);\n          this.batches.push(batchPart);\n          currentStyle = style;\n        }\n\n        this.addUvs(this.points, uvs, style.texture, attribIndex, size, style.matrix);\n      }\n    }\n\n    var index = this.indices.length;\n    var attrib = this.points.length / 2;\n\n    if (batchPart) {\n      batchPart.end(index, attrib);\n    }\n\n    if (this.batches.length === 0) {\n      // there are no visible styles in GraphicsData\n      // its possible that someone wants Graphics just for the bounds\n      this.batchable = true;\n      return;\n    } // prevent allocation when length is same as buffer\n\n\n    if (this.indicesUint16 && this.indices.length === this.indicesUint16.length) {\n      this.indicesUint16.set(this.indices);\n    } else {\n      var need32 = attrib > 0xffff && allow32Indices;\n      this.indicesUint16 = need32 ? new Uint32Array(this.indices) : new Uint16Array(this.indices);\n    } // TODO make this a const..\n\n\n    this.batchable = this.isBatchable();\n\n    if (this.batchable) {\n      this.packBatches();\n    } else {\n      this.buildDrawCalls();\n    }\n  };\n  /**\n   * Affinity check\n   *\n   * @param {PIXI.FillStyle | PIXI.LineStyle} styleA\n   * @param {PIXI.FillStyle | PIXI.LineStyle} styleB\n   */\n\n\n  GraphicsGeometry.prototype._compareStyles = function (styleA, styleB) {\n    if (!styleA || !styleB) {\n      return false;\n    }\n\n    if (styleA.texture.baseTexture !== styleB.texture.baseTexture) {\n      return false;\n    }\n\n    if (styleA.color + styleA.alpha !== styleB.color + styleB.alpha) {\n      return false;\n    }\n\n    if (!!styleA.native !== !!styleB.native) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Test geometry for batching process.\n   *\n   * @protected\n   */\n\n\n  GraphicsGeometry.prototype.validateBatching = function () {\n    if (this.dirty === this.cacheDirty || !this.graphicsData.length) {\n      return false;\n    }\n\n    for (var i = 0, l = this.graphicsData.length; i < l; i++) {\n      var data = this.graphicsData[i];\n      var fill = data.fillStyle;\n      var line = data.lineStyle;\n\n      if (fill && !fill.texture.baseTexture.valid) {\n        return false;\n      }\n\n      if (line && !line.texture.baseTexture.valid) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Offset the indices so that it works with the batcher.\n   *\n   * @protected\n   */\n\n\n  GraphicsGeometry.prototype.packBatches = function () {\n    this.batchDirty++;\n    this.uvsFloat32 = new Float32Array(this.uvs);\n    var batches = this.batches;\n\n    for (var i = 0, l = batches.length; i < l; i++) {\n      var batch = batches[i];\n\n      for (var j = 0; j < batch.size; j++) {\n        var index = batch.start + j;\n        this.indicesUint16[index] = this.indicesUint16[index] - batch.attribStart;\n      }\n    }\n  };\n  /**\n   * Checks to see if this graphics geometry can be batched.\n   * Currently it needs to be small enough and not contain any native lines.\n   *\n   * @protected\n   */\n\n\n  GraphicsGeometry.prototype.isBatchable = function () {\n    // prevent heavy mesh batching\n    if (this.points.length > 0xffff * 2) {\n      return false;\n    }\n\n    var batches = this.batches;\n\n    for (var i = 0; i < batches.length; i++) {\n      if (batches[i].style.native) {\n        return false;\n      }\n    }\n\n    return this.points.length < GraphicsGeometry.BATCHABLE_SIZE * 2;\n  };\n  /**\n   * Converts intermediate batches data to drawCalls.\n   *\n   * @protected\n   */\n\n\n  GraphicsGeometry.prototype.buildDrawCalls = function () {\n    var TICK = ++BaseTexture._globalBatch;\n\n    for (var i = 0; i < this.drawCalls.length; i++) {\n      this.drawCalls[i].texArray.clear();\n      DRAW_CALL_POOL.push(this.drawCalls[i]);\n    }\n\n    this.drawCalls.length = 0;\n    var colors = this.colors;\n    var textureIds = this.textureIds;\n    var currentGroup = DRAW_CALL_POOL.pop();\n\n    if (!currentGroup) {\n      currentGroup = new BatchDrawCall();\n      currentGroup.texArray = new BatchTextureArray();\n    }\n\n    currentGroup.texArray.count = 0;\n    currentGroup.start = 0;\n    currentGroup.size = 0;\n    currentGroup.type = DRAW_MODES.TRIANGLES;\n    var textureCount = 0;\n    var currentTexture = null;\n    var textureId = 0;\n    var native = false;\n    var drawMode = DRAW_MODES.TRIANGLES;\n    var index = 0;\n    this.drawCalls.push(currentGroup); // TODO - this can be simplified\n\n    for (var i = 0; i < this.batches.length; i++) {\n      var data = this.batches[i]; // TODO add some full on MAX_TEXTURE CODE..\n\n      var MAX_TEXTURES = 8; // Forced cast for checking `native` without errors\n\n      var style = data.style;\n      var nextTexture = style.texture.baseTexture;\n\n      if (native !== !!style.native) {\n        native = !!style.native;\n        drawMode = native ? DRAW_MODES.LINES : DRAW_MODES.TRIANGLES; // force the batch to break!\n\n        currentTexture = null;\n        textureCount = MAX_TEXTURES;\n        TICK++;\n      }\n\n      if (currentTexture !== nextTexture) {\n        currentTexture = nextTexture;\n\n        if (nextTexture._batchEnabled !== TICK) {\n          if (textureCount === MAX_TEXTURES) {\n            TICK++;\n            textureCount = 0;\n\n            if (currentGroup.size > 0) {\n              currentGroup = DRAW_CALL_POOL.pop();\n\n              if (!currentGroup) {\n                currentGroup = new BatchDrawCall();\n                currentGroup.texArray = new BatchTextureArray();\n              }\n\n              this.drawCalls.push(currentGroup);\n            }\n\n            currentGroup.start = index;\n            currentGroup.size = 0;\n            currentGroup.texArray.count = 0;\n            currentGroup.type = drawMode;\n          } // TODO add this to the render part..\n          // Hack! Because texture has protected `touched`\n\n\n          nextTexture.touched = 1; // touch;\n\n          nextTexture._batchEnabled = TICK;\n          nextTexture._batchLocation = textureCount;\n          nextTexture.wrapMode = WRAP_MODES.REPEAT;\n          currentGroup.texArray.elements[currentGroup.texArray.count++] = nextTexture;\n          textureCount++;\n        }\n      }\n\n      currentGroup.size += data.size;\n      index += data.size;\n      textureId = nextTexture._batchLocation;\n      this.addColors(colors, style.color, style.alpha, data.attribSize);\n      this.addTextureIds(textureIds, textureId, data.attribSize);\n    }\n\n    BaseTexture._globalBatch = TICK; // upload..\n    // merge for now!\n\n    this.packAttributes();\n  };\n  /**\n   * Packs attributes to single buffer.\n   *\n   * @protected\n   */\n\n\n  GraphicsGeometry.prototype.packAttributes = function () {\n    var verts = this.points;\n    var uvs = this.uvs;\n    var colors = this.colors;\n    var textureIds = this.textureIds; // verts are 2 positions.. so we * by 3 as there are 6 properties.. then 4 cos its bytes\n\n    var glPoints = new ArrayBuffer(verts.length * 3 * 4);\n    var f32 = new Float32Array(glPoints);\n    var u32 = new Uint32Array(glPoints);\n    var p = 0;\n\n    for (var i = 0; i < verts.length / 2; i++) {\n      f32[p++] = verts[i * 2];\n      f32[p++] = verts[i * 2 + 1];\n      f32[p++] = uvs[i * 2];\n      f32[p++] = uvs[i * 2 + 1];\n      u32[p++] = colors[i];\n      f32[p++] = textureIds[i];\n    }\n\n    this._buffer.update(glPoints);\n\n    this._indexBuffer.update(this.indicesUint16);\n  };\n  /**\n   * Process fill part of Graphics.\n   *\n   * @param {PIXI.GraphicsData} data\n   * @protected\n   */\n\n\n  GraphicsGeometry.prototype.processFill = function (data) {\n    if (data.holes.length) {\n      this.processHoles(data.holes);\n      buildPoly.triangulate(data, this);\n    } else {\n      var command = FILL_COMMANDS[data.type];\n      command.triangulate(data, this);\n    }\n  };\n  /**\n   * Process line part of Graphics.\n   *\n   * @param {PIXI.GraphicsData} data\n   * @protected\n   */\n\n\n  GraphicsGeometry.prototype.processLine = function (data) {\n    buildLine(data, this);\n\n    for (var i = 0; i < data.holes.length; i++) {\n      buildLine(data.holes[i], this);\n    }\n  };\n  /**\n   * Process the holes data.\n   *\n   * @param {PIXI.GraphicsData[]} holes - Holes to render\n   * @protected\n   */\n\n\n  GraphicsGeometry.prototype.processHoles = function (holes) {\n    for (var i = 0; i < holes.length; i++) {\n      var hole = holes[i];\n      var command = FILL_COMMANDS[hole.type];\n      command.build(hole);\n\n      if (hole.matrix) {\n        this.transformPoints(hole.points, hole.matrix);\n      }\n    }\n  };\n  /**\n   * Update the local bounds of the object. Expensive to use performance-wise.\n   *\n   * @protected\n   */\n\n\n  GraphicsGeometry.prototype.calculateBounds = function () {\n    var bounds = this._bounds;\n    var sequenceBounds = tmpBounds;\n    var curMatrix = Matrix.IDENTITY;\n\n    this._bounds.clear();\n\n    sequenceBounds.clear();\n\n    for (var i = 0; i < this.graphicsData.length; i++) {\n      var data = this.graphicsData[i];\n      var shape = data.shape;\n      var type = data.type;\n      var lineStyle = data.lineStyle;\n      var nextMatrix = data.matrix || Matrix.IDENTITY;\n      var lineWidth = 0.0;\n\n      if (lineStyle && lineStyle.visible) {\n        var alignment = lineStyle.alignment;\n        lineWidth = lineStyle.width;\n\n        if (type === SHAPES.POLY) {\n          lineWidth = lineWidth * (0.5 + Math.abs(0.5 - alignment));\n        } else {\n          lineWidth = lineWidth * Math.max(0, alignment);\n        }\n      }\n\n      if (curMatrix !== nextMatrix) {\n        if (!sequenceBounds.isEmpty()) {\n          bounds.addBoundsMatrix(sequenceBounds, curMatrix);\n          sequenceBounds.clear();\n        }\n\n        curMatrix = nextMatrix;\n      }\n\n      if (type === SHAPES.RECT || type === SHAPES.RREC) {\n        var rect = shape;\n        sequenceBounds.addFramePad(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, lineWidth, lineWidth);\n      } else if (type === SHAPES.CIRC) {\n        var circle = shape;\n        sequenceBounds.addFramePad(circle.x, circle.y, circle.x, circle.y, circle.radius + lineWidth, circle.radius + lineWidth);\n      } else if (type === SHAPES.ELIP) {\n        var ellipse = shape;\n        sequenceBounds.addFramePad(ellipse.x, ellipse.y, ellipse.x, ellipse.y, ellipse.width + lineWidth, ellipse.height + lineWidth);\n      } else {\n        var poly = shape; // adding directly to the bounds\n\n        bounds.addVerticesMatrix(curMatrix, poly.points, 0, poly.points.length, lineWidth, lineWidth);\n      }\n    }\n\n    if (!sequenceBounds.isEmpty()) {\n      bounds.addBoundsMatrix(sequenceBounds, curMatrix);\n    }\n\n    bounds.pad(this.boundsPadding, this.boundsPadding);\n  };\n  /**\n   * Transform points using matrix.\n   *\n   * @protected\n   * @param {number[]} points - Points to transform\n   * @param {PIXI.Matrix} matrix - Transform matrix\n   */\n\n\n  GraphicsGeometry.prototype.transformPoints = function (points, matrix) {\n    for (var i = 0; i < points.length / 2; i++) {\n      var x = points[i * 2];\n      var y = points[i * 2 + 1];\n      points[i * 2] = matrix.a * x + matrix.c * y + matrix.tx;\n      points[i * 2 + 1] = matrix.b * x + matrix.d * y + matrix.ty;\n    }\n  };\n  /**\n   * Add colors.\n   *\n   * @protected\n   * @param {number[]} colors - List of colors to add to\n   * @param {number} color - Color to add\n   * @param {number} alpha - Alpha to use\n   * @param {number} size - Number of colors to add\n   */\n\n\n  GraphicsGeometry.prototype.addColors = function (colors, color, alpha, size) {\n    // TODO use the premultiply bits Ivan added\n    var rgb = (color >> 16) + (color & 0xff00) + ((color & 0xff) << 16);\n    var rgba = premultiplyTint(rgb, alpha);\n\n    while (size-- > 0) {\n      colors.push(rgba);\n    }\n  };\n  /**\n   * Add texture id that the shader/fragment wants to use.\n   *\n   * @protected\n   * @param {number[]} textureIds\n   * @param {number} id\n   * @param {number} size\n   */\n\n\n  GraphicsGeometry.prototype.addTextureIds = function (textureIds, id, size) {\n    while (size-- > 0) {\n      textureIds.push(id);\n    }\n  };\n  /**\n   * Generates the UVs for a shape.\n   *\n   * @protected\n   * @param {number[]} verts - Vertices\n   * @param {number[]} uvs - UVs\n   * @param {PIXI.Texture} texture - Reference to Texture\n   * @param {number} start - Index buffer start index.\n   * @param {number} size - The size/length for index buffer.\n   * @param {PIXI.Matrix} [matrix] - Optional transform for all points.\n   */\n\n\n  GraphicsGeometry.prototype.addUvs = function (verts, uvs, texture, start, size, matrix) {\n    if (matrix === void 0) {\n      matrix = null;\n    }\n\n    var index = 0;\n    var uvsStart = uvs.length;\n    var frame = texture.frame;\n\n    while (index < size) {\n      var x = verts[(start + index) * 2];\n      var y = verts[(start + index) * 2 + 1];\n\n      if (matrix) {\n        var nx = matrix.a * x + matrix.c * y + matrix.tx;\n        y = matrix.b * x + matrix.d * y + matrix.ty;\n        x = nx;\n      }\n\n      index++;\n      uvs.push(x / frame.width, y / frame.height);\n    }\n\n    var baseTexture = texture.baseTexture;\n\n    if (frame.width < baseTexture.width || frame.height < baseTexture.height) {\n      this.adjustUvs(uvs, texture, uvsStart, size);\n    }\n  };\n  /**\n   * Modify uvs array according to position of texture region\n   * Does not work with rotated or trimmed textures\n   *\n   * @param {number[]} uvs - array\n   * @param {PIXI.Texture} texture - region\n   * @param {number} start - starting index for uvs\n   * @param {number} size - how many points to adjust\n   */\n\n\n  GraphicsGeometry.prototype.adjustUvs = function (uvs, texture, start, size) {\n    var baseTexture = texture.baseTexture;\n    var eps = 1e-6;\n    var finish = start + size * 2;\n    var frame = texture.frame;\n    var scaleX = frame.width / baseTexture.width;\n    var scaleY = frame.height / baseTexture.height;\n    var offsetX = frame.x / frame.width;\n    var offsetY = frame.y / frame.height;\n    var minX = Math.floor(uvs[start] + eps);\n    var minY = Math.floor(uvs[start + 1] + eps);\n\n    for (var i = start + 2; i < finish; i += 2) {\n      minX = Math.min(minX, Math.floor(uvs[i] + eps));\n      minY = Math.min(minY, Math.floor(uvs[i + 1] + eps));\n    }\n\n    offsetX -= minX;\n    offsetY -= minY;\n\n    for (var i = start; i < finish; i += 2) {\n      uvs[i] = (uvs[i] + offsetX) * scaleX;\n      uvs[i + 1] = (uvs[i + 1] + offsetY) * scaleY;\n    }\n  };\n  /**\n   * The maximum number of points to consider an object \"batchable\",\n   * able to be batched by the renderer's batch system.\n   *\n   * @memberof PIXI.GraphicsGeometry\n   * @static\n   * @member {number} BATCHABLE_SIZE\n   * @default 100\n   */\n\n\n  GraphicsGeometry.BATCHABLE_SIZE = 100;\n  return GraphicsGeometry;\n}(BatchGeometry);\n/**\n * Represents the line style for Graphics.\n * @memberof PIXI\n * @class\n * @extends PIXI.FillStyle\n */\n\n\nvar LineStyle =\n/** @class */\nfunction (_super) {\n  __extends(LineStyle, _super);\n\n  function LineStyle() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * The width (thickness) of any lines drawn.\n     *\n     * @member {number}\n     * @default 0\n     */\n\n\n    _this.width = 0;\n    /**\n     * The alignment of any lines drawn (0.5 = middle, 1 = outer, 0 = inner). WebGL only.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n\n    _this.alignment = 0.5;\n    /**\n     * If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     *\n     * @member {boolean}\n     * @default false\n     */\n\n    _this.native = false;\n    /**\n     * Line cap style.\n     *\n     * @member {PIXI.LINE_CAP}\n     * @default PIXI.LINE_CAP.BUTT\n     */\n\n    _this.cap = LINE_CAP.BUTT;\n    /**\n     * Line join style.\n     *\n     * @member {PIXI.LINE_JOIN}\n     * @default PIXI.LINE_JOIN.MITER\n     */\n\n    _this.join = LINE_JOIN.MITER;\n    /**\n     * Miter limit.\n     *\n     * @member {number}\n     * @default 10\n     */\n\n    _this.miterLimit = 10;\n    return _this;\n  }\n  /**\n   * Clones the object\n   *\n   * @return {PIXI.LineStyle}\n   */\n\n\n  LineStyle.prototype.clone = function () {\n    var obj = new LineStyle();\n    obj.color = this.color;\n    obj.alpha = this.alpha;\n    obj.texture = this.texture;\n    obj.matrix = this.matrix;\n    obj.visible = this.visible;\n    obj.width = this.width;\n    obj.alignment = this.alignment;\n    obj.native = this.native;\n    obj.cap = this.cap;\n    obj.join = this.join;\n    obj.miterLimit = this.miterLimit;\n    return obj;\n  };\n  /**\n   * Reset the line style to default.\n   */\n\n\n  LineStyle.prototype.reset = function () {\n    _super.prototype.reset.call(this); // Override default line style color\n\n\n    this.color = 0x0;\n    this.alignment = 0.5;\n    this.width = 0;\n    this.native = false;\n  };\n\n  return LineStyle;\n}(FillStyle);\n\nvar temp = new Float32Array(3); // a default shaders map used by graphics..\n\nvar DEFAULT_SHADERS = {};\n/**\n * The Graphics class is primarily used to render primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.  However, you can also use a Graphics\n * object to build a list of primitives to use as a mask, or as a complex hitArea.\n *\n * Please note that due to legacy naming conventions, the behavior of some functions in this class\n * can be confusing.  Each call to `drawRect()`, `drawPolygon()`, etc. actually stores that primitive\n * in the Geometry class's GraphicsGeometry object for later use in rendering or hit testing - the\n * functions do not directly draw anything to the screen.  Similarly, the `clear()` function doesn't\n * change the screen, it simply resets the list of primitives, which can be useful if you want to\n * rebuild the contents of an existing Graphics object.\n *\n * Once a GraphicsGeometry list is built, you can re-use it in other Geometry objects as\n * an optimization, by passing it into a new Geometry object's constructor.  Because of this\n * ability, it's important to call `destroy()` on Geometry objects once you are done with them, to\n * properly dereference each GraphicsGeometry and prevent memory leaks.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\n\nvar Graphics =\n/** @class */\nfunction (_super) {\n  __extends(Graphics, _super);\n  /**\n   * @param {PIXI.GraphicsGeometry} [geometry=null] - Geometry to use, if omitted\n   *        will create a new GraphicsGeometry instance.\n   */\n\n\n  function Graphics(geometry) {\n    if (geometry === void 0) {\n      geometry = null;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this._geometry = geometry || new GraphicsGeometry();\n    _this._geometry.refCount++;\n    /**\n     * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n     * Can be shared between multiple Graphics objects.\n     *\n     * @member {PIXI.Shader}\n     */\n\n    _this.shader = null;\n    /**\n     * Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\n     * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n     *\n     * @member {PIXI.State}\n     */\n\n    _this.state = State.for2d();\n    /**\n     * Current fill style\n     *\n     * @member {PIXI.FillStyle}\n     * @protected\n     */\n\n    _this._fillStyle = new FillStyle();\n    /**\n     * Current line style\n     *\n     * @member {PIXI.LineStyle}\n     * @protected\n     */\n\n    _this._lineStyle = new LineStyle();\n    /**\n     * Current shape transform matrix.\n     *\n     * @member {PIXI.Matrix}\n     * @protected\n     */\n\n    _this._matrix = null;\n    /**\n     * Current hole mode is enabled.\n     *\n     * @member {boolean}\n     * @default false\n     * @protected\n     */\n\n    _this._holeMode = false;\n    /**\n     * Current path\n     *\n     * @member {PIXI.Polygon}\n     * @readonly\n     */\n\n    _this.currentPath = null;\n    /**\n     * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\n     * This is useful if your graphics element does not change often, as it will speed up the rendering\n     * of the object in exchange for taking up texture memory. It is also useful if you need the graphics\n     * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if\n     * you are constantly redrawing the graphics element.\n     *\n     * @name cacheAsBitmap\n     * @member {boolean}\n     * @memberof PIXI.Graphics#\n     * @default false\n     */\n\n    /**\n     * A collections of batches! These can be drawn by the renderer batch system.\n     *\n     * @protected\n     * @member {object[]}\n     */\n\n    _this.batches = [];\n    /**\n     * Update dirty for limiting calculating tints for batches.\n     *\n     * @protected\n     * @member {number}\n     * @default -1\n     */\n\n    _this.batchTint = -1;\n    /**\n     * Update dirty for limiting calculating batches.\n     *\n     * @protected\n     * @member {number}\n     * @default -1\n     */\n\n    _this.batchDirty = -1;\n    /**\n     * Copy of the object vertex data.\n     *\n     * @protected\n     * @member {Float32Array}\n     */\n\n    _this.vertexData = null;\n    /**\n     * Renderer plugin for batching\n     *\n     * @member {string}\n     * @default 'batch'\n     */\n\n    _this.pluginName = 'batch';\n    _this._transformID = -1; // Set default\n\n    _this.tint = 0xFFFFFF;\n    _this.blendMode = BLEND_MODES.NORMAL;\n    return _this;\n  }\n\n  Object.defineProperty(Graphics.prototype, \"geometry\", {\n    /**\n     * Includes vertex positions, face indices, normals, colors, UVs, and\n     * custom attributes within buffers, reducing the cost of passing all\n     * this data to the GPU. Can be shared between multiple Mesh or Graphics objects.\n     *\n     * @member {PIXI.GraphicsGeometry}\n     * @readonly\n     */\n    get: function () {\n      return this._geometry;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates a new Graphics object with the same values as this one.\n   * Note that only the geometry of the object is cloned, not its transform (position,scale,etc)\n   *\n   * @return {PIXI.Graphics} A clone of the graphics object\n   */\n\n  Graphics.prototype.clone = function () {\n    this.finishPoly();\n    return new Graphics(this._geometry);\n  };\n\n  Object.defineProperty(Graphics.prototype, \"blendMode\", {\n    get: function () {\n      return this.state.blendMode;\n    },\n\n    /**\n     * The blend mode to be applied to the graphic shape. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.  Note that, since each\n     * primitive in the GraphicsGeometry list is rendered sequentially, modes\n     * such as `PIXI.BLEND_MODES.ADD` and `PIXI.BLEND_MODES.MULTIPLY` will\n     * be applied per-primitive.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL;\n     * @see PIXI.BLEND_MODES\n     */\n    set: function (value) {\n      this.state.blendMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Graphics.prototype, \"tint\", {\n    /**\n     * The tint applied to each graphic shape. This is a hex value. A value of\n     * 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get: function () {\n      return this._tint;\n    },\n    set: function (value) {\n      this._tint = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Graphics.prototype, \"fill\", {\n    /**\n     * The current fill style.\n     *\n     * @member {PIXI.FillStyle}\n     * @readonly\n     */\n    get: function () {\n      return this._fillStyle;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Graphics.prototype, \"line\", {\n    /**\n     * The current line style.\n     *\n     * @member {PIXI.LineStyle}\n     * @readonly\n     */\n    get: function () {\n      return this._lineStyle;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Graphics.prototype.lineStyle = function (options, color, alpha, alignment, native) {\n    if (options === void 0) {\n      options = null;\n    }\n\n    if (color === void 0) {\n      color = 0x0;\n    }\n\n    if (alpha === void 0) {\n      alpha = 1;\n    }\n\n    if (alignment === void 0) {\n      alignment = 0.5;\n    }\n\n    if (native === void 0) {\n      native = false;\n    } // Support non-object params: (width, color, alpha, alignment, native)\n\n\n    if (typeof options === 'number') {\n      options = {\n        width: options,\n        color: color,\n        alpha: alpha,\n        alignment: alignment,\n        native: native\n      };\n    }\n\n    return this.lineTextureStyle(options);\n  };\n  /**\n   * Like line style but support texture for line fill.\n   *\n   * @param {object} [options] - Collection of options for setting line style.\n   * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n   * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to use\n   * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style.\n   *  Default 0xFFFFFF if texture present.\n   * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n   * @param {PIXI.Matrix} [options.matrix=null] - Texture matrix to transform texture\n   * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n   *        WebGL only.\n   * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n   * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n   * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n   * @param {number}[options.miterLimit=10] - miter limit ratio\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.lineTextureStyle = function (options) {\n    // Apply defaults\n    options = Object.assign({\n      width: 0,\n      texture: Texture.WHITE,\n      color: options && options.texture ? 0xFFFFFF : 0x0,\n      alpha: 1,\n      matrix: null,\n      alignment: 0.5,\n      native: false,\n      cap: LINE_CAP.BUTT,\n      join: LINE_JOIN.MITER,\n      miterLimit: 10\n    }, options);\n\n    if (this.currentPath) {\n      this.startPoly();\n    }\n\n    var visible = options.width > 0 && options.alpha > 0;\n\n    if (!visible) {\n      this._lineStyle.reset();\n    } else {\n      if (options.matrix) {\n        options.matrix = options.matrix.clone();\n        options.matrix.invert();\n      }\n\n      Object.assign(this._lineStyle, {\n        visible: visible\n      }, options);\n    }\n\n    return this;\n  };\n  /**\n   * Start a polygon object internally\n   * @protected\n   */\n\n\n  Graphics.prototype.startPoly = function () {\n    if (this.currentPath) {\n      var points = this.currentPath.points;\n      var len = this.currentPath.points.length;\n\n      if (len > 2) {\n        this.drawShape(this.currentPath);\n        this.currentPath = new Polygon();\n        this.currentPath.closeStroke = false;\n        this.currentPath.points.push(points[len - 2], points[len - 1]);\n      }\n    } else {\n      this.currentPath = new Polygon();\n      this.currentPath.closeStroke = false;\n    }\n  };\n  /**\n   * Finish the polygon object.\n   * @protected\n   */\n\n\n  Graphics.prototype.finishPoly = function () {\n    if (this.currentPath) {\n      if (this.currentPath.points.length > 2) {\n        this.drawShape(this.currentPath);\n        this.currentPath = null;\n      } else {\n        this.currentPath.points.length = 0;\n      }\n    }\n  };\n  /**\n   * Moves the current drawing position to x, y.\n   *\n   * @param {number} x - the X coordinate to move to\n   * @param {number} y - the Y coordinate to move to\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.moveTo = function (x, y) {\n    this.startPoly();\n    this.currentPath.points[0] = x;\n    this.currentPath.points[1] = y;\n    return this;\n  };\n  /**\n   * Draws a line using the current line style from the current drawing position to (x, y);\n   * The current drawing position is then set to (x, y).\n   *\n   * @param {number} x - the X coordinate to draw to\n   * @param {number} y - the Y coordinate to draw to\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.lineTo = function (x, y) {\n    if (!this.currentPath) {\n      this.moveTo(0, 0);\n    } // remove duplicates..\n\n\n    var points = this.currentPath.points;\n    var fromX = points[points.length - 2];\n    var fromY = points[points.length - 1];\n\n    if (fromX !== x || fromY !== y) {\n      points.push(x, y);\n    }\n\n    return this;\n  };\n  /**\n   * Initialize the curve\n   *\n   * @protected\n   * @param {number} [x=0]\n   * @param {number} [y=0]\n   */\n\n\n  Graphics.prototype._initCurve = function (x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (this.currentPath) {\n      if (this.currentPath.points.length === 0) {\n        this.currentPath.points = [x, y];\n      }\n    } else {\n      this.moveTo(x, y);\n    }\n  };\n  /**\n   * Calculate the points for a quadratic bezier curve and then draws it.\n   * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n   *\n   * @param {number} cpX - Control point x\n   * @param {number} cpY - Control point y\n   * @param {number} toX - Destination point x\n   * @param {number} toY - Destination point y\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.quadraticCurveTo = function (cpX, cpY, toX, toY) {\n    this._initCurve();\n\n    var points = this.currentPath.points;\n\n    if (points.length === 0) {\n      this.moveTo(0, 0);\n    }\n\n    QuadraticUtils.curveTo(cpX, cpY, toX, toY, points);\n    return this;\n  };\n  /**\n   * Calculate the points for a bezier curve and then draws it.\n   *\n   * @param {number} cpX - Control point x\n   * @param {number} cpY - Control point y\n   * @param {number} cpX2 - Second Control point x\n   * @param {number} cpY2 - Second Control point y\n   * @param {number} toX - Destination point x\n   * @param {number} toY - Destination point y\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.bezierCurveTo = function (cpX, cpY, cpX2, cpY2, toX, toY) {\n    this._initCurve();\n\n    BezierUtils.curveTo(cpX, cpY, cpX2, cpY2, toX, toY, this.currentPath.points);\n    return this;\n  };\n  /**\n   * The arcTo() method creates an arc/curve between two tangents on the canvas.\n   *\n   * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n   *\n   * @param {number} x1 - The x-coordinate of the first tangent point of the arc\n   * @param {number} y1 - The y-coordinate of the first tangent point of the arc\n   * @param {number} x2 - The x-coordinate of the end of the arc\n   * @param {number} y2 - The y-coordinate of the end of the arc\n   * @param {number} radius - The radius of the arc\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.arcTo = function (x1, y1, x2, y2, radius) {\n    this._initCurve(x1, y1);\n\n    var points = this.currentPath.points;\n    var result = ArcUtils.curveTo(x1, y1, x2, y2, radius, points);\n\n    if (result) {\n      var cx = result.cx,\n          cy = result.cy,\n          radius_1 = result.radius,\n          startAngle = result.startAngle,\n          endAngle = result.endAngle,\n          anticlockwise = result.anticlockwise;\n      this.arc(cx, cy, radius_1, startAngle, endAngle, anticlockwise);\n    }\n\n    return this;\n  };\n  /**\n   * The arc method creates an arc/curve (used to create circles, or parts of circles).\n   *\n   * @param {number} cx - The x-coordinate of the center of the circle\n   * @param {number} cy - The y-coordinate of the center of the circle\n   * @param {number} radius - The radius of the circle\n   * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n   *  of the arc's circle)\n   * @param {number} endAngle - The ending angle, in radians\n   * @param {boolean} [anticlockwise=false] - Specifies whether the drawing should be\n   *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n   *  indicates counter-clockwise.\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.arc = function (cx, cy, radius, startAngle, endAngle, anticlockwise) {\n    if (anticlockwise === void 0) {\n      anticlockwise = false;\n    }\n\n    if (startAngle === endAngle) {\n      return this;\n    }\n\n    if (!anticlockwise && endAngle <= startAngle) {\n      endAngle += PI_2;\n    } else if (anticlockwise && startAngle <= endAngle) {\n      startAngle += PI_2;\n    }\n\n    var sweep = endAngle - startAngle;\n\n    if (sweep === 0) {\n      return this;\n    }\n\n    var startX = cx + Math.cos(startAngle) * radius;\n    var startY = cy + Math.sin(startAngle) * radius;\n    var eps = this._geometry.closePointEps; // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n\n    var points = this.currentPath ? this.currentPath.points : null;\n\n    if (points) {\n      // TODO: make a better fix.\n      // We check how far our start is from the last existing point\n      var xDiff = Math.abs(points[points.length - 2] - startX);\n      var yDiff = Math.abs(points[points.length - 1] - startY);\n      if (xDiff < eps && yDiff < eps) ;else {\n        points.push(startX, startY);\n      }\n    } else {\n      this.moveTo(startX, startY);\n      points = this.currentPath.points;\n    }\n\n    ArcUtils.arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points);\n    return this;\n  };\n  /**\n   * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n   * (such as lineTo() or drawCircle()) use when drawing.\n   *\n   * @param {number} [color=0] - the color of the fill\n   * @param {number} [alpha=1] - the alpha of the fill\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.beginFill = function (color, alpha) {\n    if (color === void 0) {\n      color = 0;\n    }\n\n    if (alpha === void 0) {\n      alpha = 1;\n    }\n\n    return this.beginTextureFill({\n      texture: Texture.WHITE,\n      color: color,\n      alpha: alpha\n    });\n  };\n  /**\n   * Begin the texture fill\n   *\n   * @param {object} [options] - Object object.\n   * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to fill\n   * @param {number} [options.color=0xffffff] - Background to fill behind texture\n   * @param {number} [options.alpha=1] - Alpha of fill\n   * @param {PIXI.Matrix} [options.matrix=null] - Transform matrix\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.beginTextureFill = function (options) {\n    // Apply defaults\n    options = Object.assign({\n      texture: Texture.WHITE,\n      color: 0xFFFFFF,\n      alpha: 1,\n      matrix: null\n    }, options);\n\n    if (this.currentPath) {\n      this.startPoly();\n    }\n\n    var visible = options.alpha > 0;\n\n    if (!visible) {\n      this._fillStyle.reset();\n    } else {\n      if (options.matrix) {\n        options.matrix = options.matrix.clone();\n        options.matrix.invert();\n      }\n\n      Object.assign(this._fillStyle, {\n        visible: visible\n      }, options);\n    }\n\n    return this;\n  };\n  /**\n   * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n   *\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.endFill = function () {\n    this.finishPoly();\n\n    this._fillStyle.reset();\n\n    return this;\n  };\n  /**\n   * Draws a rectangle shape.\n   *\n   * @param {number} x - The X coord of the top-left of the rectangle\n   * @param {number} y - The Y coord of the top-left of the rectangle\n   * @param {number} width - The width of the rectangle\n   * @param {number} height - The height of the rectangle\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.drawRect = function (x, y, width, height) {\n    return this.drawShape(new Rectangle(x, y, width, height));\n  };\n  /**\n   * Draw a rectangle shape with rounded/beveled corners.\n   *\n   * @param {number} x - The X coord of the top-left of the rectangle\n   * @param {number} y - The Y coord of the top-left of the rectangle\n   * @param {number} width - The width of the rectangle\n   * @param {number} height - The height of the rectangle\n   * @param {number} radius - Radius of the rectangle corners\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.drawRoundedRect = function (x, y, width, height, radius) {\n    return this.drawShape(new RoundedRectangle(x, y, width, height, radius));\n  };\n  /**\n   * Draws a circle.\n   *\n   * @param {number} x - The X coordinate of the center of the circle\n   * @param {number} y - The Y coordinate of the center of the circle\n   * @param {number} radius - The radius of the circle\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.drawCircle = function (x, y, radius) {\n    return this.drawShape(new Circle(x, y, radius));\n  };\n  /**\n   * Draws an ellipse.\n   *\n   * @param {number} x - The X coordinate of the center of the ellipse\n   * @param {number} y - The Y coordinate of the center of the ellipse\n   * @param {number} width - The half width of the ellipse\n   * @param {number} height - The half height of the ellipse\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.drawEllipse = function (x, y, width, height) {\n    return this.drawShape(new Ellipse(x, y, width, height));\n  };\n  /**\n   * Draws a polygon using the given path.\n   *\n   * @param {number[]|PIXI.Point[]|PIXI.Polygon} path - The path data used to construct the polygon.\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.drawPolygon = function () {\n    var arguments$1 = arguments;\n    var path = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      path[_i] = arguments$1[_i];\n    }\n\n    var points;\n    var closeStroke = true; // !!this._fillStyle;\n\n    var poly = path[0]; // check if data has points..\n\n    if (poly.points) {\n      closeStroke = poly.closeStroke;\n      points = poly.points;\n    } else if (Array.isArray(path[0])) {\n      points = path[0];\n    } else {\n      points = path;\n    }\n\n    var shape = new Polygon(points);\n    shape.closeStroke = closeStroke;\n    this.drawShape(shape);\n    return this;\n  };\n  /**\n   * Draw any shape.\n   *\n   * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - Shape to draw\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.drawShape = function (shape) {\n    if (!this._holeMode) {\n      this._geometry.drawShape(shape, this._fillStyle.clone(), this._lineStyle.clone(), this._matrix);\n    } else {\n      this._geometry.drawHole(shape, this._matrix);\n    }\n\n    return this;\n  };\n  /**\n   * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n   *\n   * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n   */\n\n\n  Graphics.prototype.clear = function () {\n    this._geometry.clear();\n\n    this._lineStyle.reset();\n\n    this._fillStyle.reset();\n\n    this._boundsID++;\n    this._matrix = null;\n    this._holeMode = false;\n    this.currentPath = null;\n    return this;\n  };\n  /**\n   * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n   * masked with gl.scissor.\n   *\n   * @returns {boolean} True if only 1 rect.\n   */\n\n\n  Graphics.prototype.isFastRect = function () {\n    var data = this._geometry.graphicsData;\n    return data.length === 1 && data[0].shape.type === SHAPES.RECT && !data[0].holes.length && !(data[0].lineStyle.visible && data[0].lineStyle.width);\n  };\n  /**\n   * Renders the object using the WebGL renderer\n   *\n   * @protected\n   * @param {PIXI.Renderer} renderer - The renderer\n   */\n\n\n  Graphics.prototype._render = function (renderer) {\n    this.finishPoly();\n    var geometry = this._geometry;\n    var hasuint32 = renderer.context.supports.uint32Indices; // batch part..\n    // batch it!\n\n    geometry.updateBatches(hasuint32);\n\n    if (geometry.batchable) {\n      if (this.batchDirty !== geometry.batchDirty) {\n        this._populateBatches();\n      }\n\n      this._renderBatched(renderer);\n    } else {\n      // no batching...\n      renderer.batch.flush();\n\n      this._renderDirect(renderer);\n    }\n  };\n  /**\n   * Populating batches for rendering\n   *\n   * @protected\n   */\n\n\n  Graphics.prototype._populateBatches = function () {\n    var geometry = this._geometry;\n    var blendMode = this.blendMode;\n    var len = geometry.batches.length;\n    this.batchTint = -1;\n    this._transformID = -1;\n    this.batchDirty = geometry.batchDirty;\n    this.batches.length = len;\n    this.vertexData = new Float32Array(geometry.points);\n\n    for (var i = 0; i < len; i++) {\n      var gI = geometry.batches[i];\n      var color = gI.style.color;\n      var vertexData = new Float32Array(this.vertexData.buffer, gI.attribStart * 4 * 2, gI.attribSize * 2);\n      var uvs = new Float32Array(geometry.uvsFloat32.buffer, gI.attribStart * 4 * 2, gI.attribSize * 2);\n      var indices = new Uint16Array(geometry.indicesUint16.buffer, gI.start * 2, gI.size);\n      var batch = {\n        vertexData: vertexData,\n        blendMode: blendMode,\n        indices: indices,\n        uvs: uvs,\n        _batchRGB: hex2rgb(color),\n        _tintRGB: color,\n        _texture: gI.style.texture,\n        alpha: gI.style.alpha,\n        worldAlpha: 1\n      };\n      this.batches[i] = batch;\n    }\n  };\n  /**\n   * Renders the batches using the BathedRenderer plugin\n   *\n   * @protected\n   * @param {PIXI.Renderer} renderer - The renderer\n   */\n\n\n  Graphics.prototype._renderBatched = function (renderer) {\n    if (!this.batches.length) {\n      return;\n    }\n\n    renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n    this.calculateVertices();\n    this.calculateTints();\n\n    for (var i = 0, l = this.batches.length; i < l; i++) {\n      var batch = this.batches[i];\n      batch.worldAlpha = this.worldAlpha * batch.alpha;\n      renderer.plugins[this.pluginName].render(batch);\n    }\n  };\n  /**\n   * Renders the graphics direct\n   *\n   * @protected\n   * @param {PIXI.Renderer} renderer - The renderer\n   */\n\n\n  Graphics.prototype._renderDirect = function (renderer) {\n    var shader = this._resolveDirectShader(renderer);\n\n    var geometry = this._geometry;\n    var tint = this.tint;\n    var worldAlpha = this.worldAlpha;\n    var uniforms = shader.uniforms;\n    var drawCalls = geometry.drawCalls; // lets set the transfomr\n\n    uniforms.translationMatrix = this.transform.worldTransform; // and then lets set the tint..\n\n    uniforms.tint[0] = (tint >> 16 & 0xFF) / 255 * worldAlpha;\n    uniforms.tint[1] = (tint >> 8 & 0xFF) / 255 * worldAlpha;\n    uniforms.tint[2] = (tint & 0xFF) / 255 * worldAlpha;\n    uniforms.tint[3] = worldAlpha; // the first draw call, we can set the uniforms of the shader directly here.\n    // this means that we can tack advantage of the sync function of pixi!\n    // bind and sync uniforms..\n    // there is a way to optimise this..\n\n    renderer.shader.bind(shader);\n    renderer.geometry.bind(geometry, shader); // set state..\n\n    renderer.state.set(this.state); // then render the rest of them...\n\n    for (var i = 0, l = drawCalls.length; i < l; i++) {\n      this._renderDrawCallDirect(renderer, geometry.drawCalls[i]);\n    }\n  };\n  /**\n   * Renders specific DrawCall\n   *\n   * @param {PIXI.Renderer} renderer\n   * @param {PIXI.BatchDrawCall} drawCall\n   */\n\n\n  Graphics.prototype._renderDrawCallDirect = function (renderer, drawCall) {\n    var texArray = drawCall.texArray,\n        type = drawCall.type,\n        size = drawCall.size,\n        start = drawCall.start;\n    var groupTextureCount = texArray.count;\n\n    for (var j = 0; j < groupTextureCount; j++) {\n      renderer.texture.bind(texArray.elements[j], j);\n    }\n\n    renderer.geometry.draw(type, size, start);\n  };\n  /**\n   * Resolves shader for direct rendering\n   *\n   * @protected\n   * @param {PIXI.Renderer} renderer - The renderer\n   */\n\n\n  Graphics.prototype._resolveDirectShader = function (renderer) {\n    var shader = this.shader;\n    var pluginName = this.pluginName;\n\n    if (!shader) {\n      // if there is no shader here, we can use the default shader.\n      // and that only gets created if we actually need it..\n      // but may be more than one plugins for graphics\n      if (!DEFAULT_SHADERS[pluginName]) {\n        var MAX_TEXTURES = renderer.plugins.batch.MAX_TEXTURES;\n        var sampleValues = new Int32Array(MAX_TEXTURES);\n\n        for (var i = 0; i < MAX_TEXTURES; i++) {\n          sampleValues[i] = i;\n        }\n\n        var uniforms = {\n          tint: new Float32Array([1, 1, 1, 1]),\n          translationMatrix: new Matrix(),\n          default: UniformGroup.from({\n            uSamplers: sampleValues\n          }, true)\n        };\n        var program = renderer.plugins[pluginName]._shader.program;\n        DEFAULT_SHADERS[pluginName] = new Shader(program, uniforms);\n      }\n\n      shader = DEFAULT_SHADERS[pluginName];\n    }\n\n    return shader;\n  };\n  /**\n   * Retrieves the bounds of the graphic shape as a rectangle object\n   *\n   * @protected\n   */\n\n\n  Graphics.prototype._calculateBounds = function () {\n    this.finishPoly();\n    var geometry = this._geometry; // skipping when graphics is empty, like a container\n\n    if (!geometry.graphicsData.length) {\n      return;\n    }\n\n    var _a = geometry.bounds,\n        minX = _a.minX,\n        minY = _a.minY,\n        maxX = _a.maxX,\n        maxY = _a.maxY;\n\n    this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n  };\n  /**\n   * Tests if a point is inside this graphics object\n   *\n   * @param {PIXI.IPointData} point - the point to test\n   * @return {boolean} the result of the test\n   */\n\n\n  Graphics.prototype.containsPoint = function (point) {\n    this.worldTransform.applyInverse(point, Graphics._TEMP_POINT);\n    return this._geometry.containsPoint(Graphics._TEMP_POINT);\n  };\n  /**\n   * Recalculate the tint by applying tint to batches using Graphics tint.\n   * @protected\n   */\n\n\n  Graphics.prototype.calculateTints = function () {\n    if (this.batchTint !== this.tint) {\n      this.batchTint = this.tint;\n      var tintRGB = hex2rgb(this.tint, temp);\n\n      for (var i = 0; i < this.batches.length; i++) {\n        var batch = this.batches[i];\n        var batchTint = batch._batchRGB;\n        var r = tintRGB[0] * batchTint[0] * 255;\n        var g = tintRGB[1] * batchTint[1] * 255;\n        var b = tintRGB[2] * batchTint[2] * 255; // TODO Ivan, can this be done in one go?\n\n        var color = (r << 16) + (g << 8) + (b | 0);\n        batch._tintRGB = (color >> 16) + (color & 0xff00) + ((color & 0xff) << 16);\n      }\n    }\n  };\n  /**\n   * If there's a transform update or a change to the shape of the\n   * geometry, recalculate the vertices.\n   * @protected\n   */\n\n\n  Graphics.prototype.calculateVertices = function () {\n    var wtID = this.transform._worldID;\n\n    if (this._transformID === wtID) {\n      return;\n    }\n\n    this._transformID = wtID;\n    var wt = this.transform.worldTransform;\n    var a = wt.a;\n    var b = wt.b;\n    var c = wt.c;\n    var d = wt.d;\n    var tx = wt.tx;\n    var ty = wt.ty;\n    var data = this._geometry.points; // batch.vertexDataOriginal;\n\n    var vertexData = this.vertexData;\n    var count = 0;\n\n    for (var i = 0; i < data.length; i += 2) {\n      var x = data[i];\n      var y = data[i + 1];\n      vertexData[count++] = a * x + c * y + tx;\n      vertexData[count++] = d * y + b * x + ty;\n    }\n  };\n  /**\n   * Closes the current path.\n   *\n   * @return {PIXI.Graphics} Returns itself.\n   */\n\n\n  Graphics.prototype.closePath = function () {\n    var currentPath = this.currentPath;\n\n    if (currentPath) {\n      // we don't need to add extra point in the end because buildLine will take care of that\n      currentPath.closeStroke = true;\n    }\n\n    return this;\n  };\n  /**\n   * Apply a matrix to the positional data.\n   *\n   * @param {PIXI.Matrix} matrix - Matrix to use for transform current shape.\n   * @return {PIXI.Graphics} Returns itself.\n   */\n\n\n  Graphics.prototype.setMatrix = function (matrix) {\n    this._matrix = matrix;\n    return this;\n  };\n  /**\n   * Begin adding holes to the last draw shape\n   * IMPORTANT: holes must be fully inside a shape to work\n   * Also weirdness ensues if holes overlap!\n   * Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\n   * please use `moveTo` `lineTo`, `quadraticCurveTo` if you rely on pixi-legacy bundle.\n   * @return {PIXI.Graphics} Returns itself.\n   */\n\n\n  Graphics.prototype.beginHole = function () {\n    this.finishPoly();\n    this._holeMode = true;\n    return this;\n  };\n  /**\n   * End adding holes to the last draw shape\n   * @return {PIXI.Graphics} Returns itself.\n   */\n\n\n  Graphics.prototype.endHole = function () {\n    this.finishPoly();\n    this._holeMode = false;\n    return this;\n  };\n  /**\n   * Destroys the Graphics object.\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n   *  options have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have\n   *  their destroy method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the texture of the child sprite\n   * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the base texture of the child sprite\n   */\n\n\n  Graphics.prototype.destroy = function (options) {\n    this._geometry.refCount--;\n\n    if (this._geometry.refCount === 0) {\n      this._geometry.dispose();\n    }\n\n    this._matrix = null;\n    this.currentPath = null;\n\n    this._lineStyle.destroy();\n\n    this._lineStyle = null;\n\n    this._fillStyle.destroy();\n\n    this._fillStyle = null;\n    this._geometry = null;\n    this.shader = null;\n    this.vertexData = null;\n    this.batches.length = 0;\n    this.batches = null;\n\n    _super.prototype.destroy.call(this, options);\n  };\n  /**\n   * Temporary point to use for containsPoint\n   *\n   * @static\n   * @private\n   * @member {PIXI.Point}\n   */\n\n\n  Graphics._TEMP_POINT = new Point();\n  return Graphics;\n}(Container);\n\nvar graphicsUtils = {\n  buildPoly: buildPoly,\n  buildCircle: buildCircle,\n  buildRectangle: buildRectangle,\n  buildRoundedRectangle: buildRoundedRectangle,\n  buildLine: buildLine,\n  ArcUtils: ArcUtils,\n  BezierUtils: BezierUtils,\n  QuadraticUtils: QuadraticUtils,\n  BatchPart: BatchPart,\n  FILL_COMMANDS: FILL_COMMANDS,\n  BATCH_POOL: BATCH_POOL,\n  DRAW_CALL_POOL: DRAW_CALL_POOL\n};\nexport { FillStyle, GRAPHICS_CURVES, Graphics, GraphicsData, GraphicsGeometry, LINE_CAP, LINE_JOIN, LineStyle, graphicsUtils };","map":{"version":3,"sources":["../../src/const.ts","../../src/styles/FillStyle.ts","../../../../node_modules/tslib/tslib.es6.js","../../src/utils/buildPoly.ts","../../src/utils/buildCircle.ts","../../src/utils/buildRectangle.ts","../../src/utils/buildRoundedRectangle.ts","../../src/utils/buildLine.ts","../../src/utils/ArcUtils.ts","../../src/utils/BezierUtils.ts","../../src/utils/QuadraticUtils.ts","../../src/utils/BatchPart.ts","../../src/utils/index.ts","../../src/GraphicsData.ts","../../src/GraphicsGeometry.ts","../../src/styles/LineStyle.ts","../../src/Graphics.ts","../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Supported line joints in `PIXI.LineStyle` for graphics.\n *\n * @see PIXI.Graphics#lineStyle\n * @see https://graphicdesign.stackexchange.com/questions/59018/what-is-a-bevel-join-of-two-lines-exactly-illustrator\n *\n * @name LINE_JOIN\n * @memberof PIXI\n * @static\n * @enum {string}\n * @property {string} MITER - 'miter': make a sharp corner where outer part of lines meet\n * @property {string} BEVEL - 'bevel': add a square butt at each end of line segment and fill the triangle at turn\n * @property {string} ROUND - 'round': add an arc at the joint\n */\nexport enum LINE_JOIN {\n    MITER = 'miter',\n    BEVEL = 'bevel',\n    ROUND = 'round'\n}\n\n/**\n * Support line caps in `PIXI.LineStyle` for graphics.\n *\n * @see PIXI.Graphics#lineStyle\n *\n * @name LINE_CAP\n * @memberof PIXI\n * @static\n * @enum {string}\n * @property {string} BUTT - 'butt': don't add any cap at line ends (leaves orthogonal edges)\n * @property {string} ROUND - 'round': add semicircle at ends\n * @property {string} SQUARE - 'square': add square at end (like `BUTT` except more length at end)\n */\nexport enum LINE_CAP {\n    BUTT = 'butt',\n    ROUND = 'round',\n    SQUARE = 'square'\n}\n\nexport interface IGraphicsCurvesSettings {\n    adaptive: boolean;\n    maxLength: number;\n    minSegments: number;\n    maxSegments: number;\n\n    epsilon: number;\n\n    _segmentsCount(length: number, defaultSegments?: number): number;\n}\n\n/**\n * Graphics curves resolution settings. If `adaptive` flag is set to `true`,\n * the resolution is calculated based on the curve's length to ensure better visual quality.\n * Adaptive draw works with `bezierCurveTo` and `quadraticCurveTo`.\n *\n * @static\n * @constant\n * @memberof PIXI\n * @name GRAPHICS_CURVES\n * @type {object}\n * @property {boolean} adaptive=true - flag indicating if the resolution should be adaptive\n * @property {number} maxLength=10 - maximal length of a single segment of the curve (if adaptive = false, ignored)\n * @property {number} minSegments=8 - minimal number of segments in the curve (if adaptive = false, ignored)\n * @property {number} maxSegments=2048 - maximal number of segments in the curve (if adaptive = false, ignored)\n */\nexport const GRAPHICS_CURVES: IGraphicsCurvesSettings = {\n    adaptive: true,\n    maxLength: 10,\n    minSegments: 8,\n    maxSegments:  2048,\n\n    epsilon: 0.0001,\n\n    _segmentsCount(length: number, defaultSegments = 20)\n    {\n        if (!this.adaptive || !length || isNaN(length))\n        {\n            return defaultSegments;\n        }\n\n        let result = Math.ceil(length / this.maxLength);\n\n        if (result < this.minSegments)\n        {\n            result = this.minSegments;\n        }\n        else if (result > this.maxSegments)\n        {\n            result = this.maxSegments;\n        }\n\n        return result;\n    },\n};\n","import { Texture } from '@pixi/core';\nimport type { Matrix } from '@pixi/math';\n\n/**\n * Fill style object for Graphics.\n *\n * @class\n * @memberof PIXI\n */\nexport class FillStyle\n{\n    /**\n     * The hex color value used when coloring the Graphics object.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    public color = 0xFFFFFF;\n\n    /**\n     * The alpha value used when filling the Graphics object.\n     *\n     * @member {number}\n     * @default 1\n     */\n    public alpha = 1.0;\n\n    /**\n     * The texture to be used for the fill.\n     *\n     * @member {PIXI.Texture}\n     * @default 0\n     */\n    public texture: Texture = Texture.WHITE;\n\n    /**\n     * The transform applied to the texture.\n     *\n     * @member {PIXI.Matrix}\n     * @default null\n     */\n    public matrix: Matrix = null;\n\n    /**\n     * If the current fill is visible.\n     *\n     * @member {boolean}\n     * @default false\n     */\n    public visible = false;\n\n    constructor()\n    {\n        this.reset();\n    }\n\n    /**\n     * Clones the object\n     *\n     * @return {PIXI.FillStyle}\n     */\n    public clone(): FillStyle\n    {\n        const obj = new FillStyle();\n\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.visible = this.visible;\n\n        return obj;\n    }\n\n    /**\n     * Reset\n     */\n    public reset(): void\n    {\n        this.color = 0xFFFFFF;\n        this.alpha = 1;\n        this.texture = Texture.WHITE;\n        this.matrix = null;\n        this.visible = false;\n    }\n\n    /**\n     * Destroy and don't use after this\n     */\n    public destroy(): void\n    {\n        this.texture = null;\n        this.matrix = null;\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { earcut } from '@pixi/utils';\n\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\nimport type { Polygon } from '@pixi/math';\n\n/**\n * Builds a polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildPoly: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        graphicsData.points = (graphicsData.shape as Polygon).points.slice();\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        let points = graphicsData.points;\n        const holes = graphicsData.holes;\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        if (points.length >= 6)\n        {\n            const holeArray = [];\n            // Process holes..\n\n            for (let i = 0; i < holes.length; i++)\n            {\n                const hole = holes[i];\n\n                holeArray.push(points.length / 2);\n                points = points.concat(hole.points);\n            }\n\n            // sort color\n            const triangles = earcut(points, holeArray, 2);\n\n            if (!triangles)\n            {\n                return;\n            }\n\n            const vertPos = verts.length / 2;\n\n            for (let i = 0; i < triangles.length; i += 3)\n            {\n                indices.push(triangles[i] + vertPos);\n                indices.push(triangles[i + 1] + vertPos);\n                indices.push(triangles[i + 2] + vertPos);\n            }\n\n            for (let i = 0; i < points.length; i++)\n            {\n                verts.push(points[i]);\n            }\n        }\n    },\n};\n","// for type only\nimport { SHAPES } from '@pixi/math';\n\nimport type { Circle, Ellipse } from '@pixi/math';\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\n\n/**\n * Builds a circle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildCircle: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        // need to convert points to a nice regular data\n        const circleData = graphicsData.shape as Circle;\n        const points = graphicsData.points;\n        const x = circleData.x;\n        const y = circleData.y;\n        let width;\n        let height;\n\n        points.length = 0;\n\n        // TODO - bit hacky??\n        if (graphicsData.type === SHAPES.CIRC)\n        {\n            width = circleData.radius;\n            height = circleData.radius;\n        }\n        else\n        {\n            const ellipseData = graphicsData.shape as Ellipse;\n\n            width = ellipseData.width;\n            height = ellipseData.height;\n        }\n\n        if (width === 0 || height === 0)\n        {\n            return;\n        }\n\n        let totalSegs = Math.floor(30 * Math.sqrt(circleData.radius))\n            || Math.floor(15 * Math.sqrt(width + height));\n\n        totalSegs /= 2.3;\n\n        const seg = (Math.PI * 2) / totalSegs;\n\n        for (let i = 0; i < totalSegs - 0.5; i++)\n        {\n            points.push(\n                x + (Math.sin(-seg * i) * width),\n                y + (Math.cos(-seg * i) * height)\n            );\n        }\n\n        points.push(points[0], points[1]);\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        let vertPos = verts.length / 2;\n        const center = vertPos;\n\n        const circle = (graphicsData.shape) as Circle;\n        const matrix = graphicsData.matrix;\n        const x = circle.x;\n        const y = circle.y;\n\n        // Push center (special point)\n        verts.push(\n            graphicsData.matrix ? (matrix.a * x) + (matrix.c * y) + matrix.tx : x,\n            graphicsData.matrix ? (matrix.b * x) + (matrix.d * y) + matrix.ty : y);\n\n        for (let i = 0; i < points.length; i += 2)\n        {\n            verts.push(points[i], points[i + 1]);\n\n            // add some uvs\n            indices.push(vertPos++, center, vertPos);\n        }\n    },\n};\n","import type { IShapeBuildCommand } from './IShapeBuildCommand';\nimport type { Rectangle } from '@pixi/math';\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildRectangle: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        // --- //\n        // need to convert points to a nice regular data\n        //\n        const rectData = graphicsData.shape as Rectangle;\n        const x = rectData.x;\n        const y = rectData.y;\n        const width = rectData.width;\n        const height = rectData.height;\n\n        const points = graphicsData.points;\n\n        points.length = 0;\n\n        points.push(x, y,\n            x + width, y,\n            x + width, y + height,\n            x, y + height);\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n        const verts = graphicsGeometry.points;\n\n        const vertPos = verts.length / 2;\n\n        verts.push(points[0], points[1],\n            points[2], points[3],\n            points[6], points[7],\n            points[4], points[5]);\n\n        graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2,\n            vertPos + 1, vertPos + 2, vertPos + 3);\n    },\n};\n","import { earcut } from '@pixi/utils';\n\n// for type only\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\nimport type { RoundedRectangle } from '@pixi/math';\n\n/**\n * Calculate a single point for a quadratic bezier curve.\n * Utility function used by quadraticBezierCurve.\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} n1 - first number\n * @param {number} n2 - second number\n * @param {number} perc - percentage\n * @return {number} the result\n *\n */\nfunction getPt(n1: number, n2: number, perc: number): number\n{\n    const diff = n2 - n1;\n\n    return n1 + (diff * perc);\n}\n\n/**\n * Calculate the points for a quadratic bezier curve. (helper function..)\n * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} fromX - Origin point x\n * @param {number} fromY - Origin point x\n * @param {number} cpX - Control point x\n * @param {number} cpY - Control point y\n * @param {number} toX - Destination point x\n * @param {number} toY - Destination point y\n * @param {number[]} [out=[]] - The output array to add points into. If not passed, a new array is created.\n * @return {number[]} an array of points\n */\nfunction quadraticBezierCurve(\n    fromX: number, fromY: number,\n    cpX: number, cpY: number,\n    toX: number, toY: number,\n    out: Array<number> = []): Array<number>\n{\n    const n = 20;\n    const points = out;\n\n    let xa = 0;\n    let ya = 0;\n    let xb = 0;\n    let yb = 0;\n    let x = 0;\n    let y = 0;\n\n    for (let i = 0, j = 0; i <= n; ++i)\n    {\n        j = i / n;\n\n        // The Green Line\n        xa = getPt(fromX, cpX, j);\n        ya = getPt(fromY, cpY, j);\n        xb = getPt(cpX, toX, j);\n        yb = getPt(cpY, toY, j);\n\n        // The Black Dot\n        x = getPt(xa, xb, j);\n        y = getPt(ya, yb, j);\n\n        points.push(x, y);\n    }\n\n    return points;\n}\n\n/**\n * Builds a rounded rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildRoundedRectangle: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        const rrectData = graphicsData.shape as RoundedRectangle;\n        const points = graphicsData.points;\n        const x = rrectData.x;\n        const y = rrectData.y;\n        const width = rrectData.width;\n        const height = rrectData.height;\n\n        // Don't allow negative radius or greater than half the smallest width\n        const radius = Math.max(0, Math.min(rrectData.radius, Math.min(width, height) / 2));\n\n        points.length = 0;\n\n        // No radius, do a simple rectangle\n        if (!radius)\n        {\n            points.push(x, y,\n                x + width, y,\n                x + width, y + height,\n                x, y + height);\n        }\n        else\n        {\n            quadraticBezierCurve(x, y + radius,\n                x, y,\n                x + radius, y,\n                points);\n            quadraticBezierCurve(x + width - radius,\n                y, x + width, y,\n                x + width, y + radius,\n                points);\n            quadraticBezierCurve(x + width, y + height - radius,\n                x + width, y + height,\n                x + width - radius, y + height,\n                points);\n            quadraticBezierCurve(x + radius, y + height,\n                x, y + height,\n                x, y + height - radius,\n                points);\n        }\n\n        // this tiny number deals with the issue that occurs when points overlap and earcut fails to triangulate the item.\n        // TODO - fix this properly, this is not very elegant.. but it works for now.\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        const vecPos = verts.length / 2;\n\n        const triangles = earcut(points, null, 2);\n\n        for (let i = 0, j = triangles.length; i < j; i += 3)\n        {\n            indices.push(triangles[i] + vecPos);\n            //     indices.push(triangles[i] + vecPos);\n            indices.push(triangles[i + 1] + vecPos);\n            //   indices.push(triangles[i + 2] + vecPos);\n            indices.push(triangles[i + 2] + vecPos);\n        }\n\n        for (let i = 0, j = points.length; i < j; i++)\n        {\n            verts.push(points[i], points[++i]);\n        }\n    },\n};\n","import { Point, SHAPES } from '@pixi/math';\n\nimport type { Polygon } from '@pixi/math';\nimport type { GraphicsData } from '../GraphicsData';\nimport type { GraphicsGeometry } from '../GraphicsGeometry';\nimport { LINE_JOIN, LINE_CAP, GRAPHICS_CURVES } from '../const';\n\n/**\n * Buffers vertices to draw a square cap.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} x - X-coord of end point\n * @param {number} y - Y-coord of end point\n * @param {number} nx - X-coord of line normal pointing inside\n * @param {number} ny - Y-coord of line normal pointing inside\n * @param {Array<number>} verts - vertex buffer\n * @returns {}\n */\nfunction square(\n    x: number,\n    y: number,\n    nx: number,\n    ny: number,\n    innerWeight: number,\n    outerWeight: number,\n    clockwise: boolean, /* rotation for square (true at left end, false at right end) */\n    verts: Array<number>\n): number\n{\n    const ix = x - (nx * innerWeight);\n    const iy = y - (ny * innerWeight);\n    const ox = x + (nx * outerWeight);\n    const oy = y + (ny * outerWeight);\n\n    /* Rotate nx,ny for extension vector */\n    let exx; let\n        eyy;\n\n    if (clockwise)\n    {\n        exx = ny;\n        eyy = -nx;\n    }\n    else\n    {\n        exx = -ny;\n        eyy = nx;\n    }\n\n    /* [i|0]x,y extended at cap */\n    const eix = ix + exx;\n    const eiy = iy + eyy;\n    const eox = ox + exx;\n    const eoy = oy + eyy;\n\n    /* Square itself must be inserted clockwise*/\n    verts.push(eix, eiy);\n    verts.push(eox, eoy);\n\n    return 2;\n}\n\n/**\n * Buffers vertices to draw an arc at the line joint or cap.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} cx - X-coord of center\n * @param {number} cy - Y-coord of center\n * @param {number} sx - X-coord of arc start\n * @param {number} sy - Y-coord of arc start\n * @param {number} ex - X-coord of arc end\n * @param {number} ey - Y-coord of arc end\n * @param {Array<number>} verts - buffer of vertices\n * @param {boolean} clockwise - orientation of vertices\n * @returns {number} - no. of vertices pushed\n */\nfunction round(\n    cx: number,\n    cy: number,\n    sx: number,\n    sy: number,\n    ex: number,\n    ey: number,\n    verts: Array<number>,\n    clockwise: boolean, /* if not cap, then clockwise is turn of joint, otherwise rotation from angle0 to angle1 */\n): number\n{\n    const cx2p0x = sx - cx;\n    const cy2p0y = sy - cy;\n\n    let angle0 = Math.atan2(cx2p0x, cy2p0y);\n    let angle1 = Math.atan2(ex - cx, ey - cy);\n\n    if (clockwise && angle0 < angle1)\n    {\n        angle0 += Math.PI * 2;\n    }\n    else if (!clockwise && angle0 > angle1)\n    {\n        angle1 += Math.PI * 2;\n    }\n\n    let startAngle = angle0;\n    const angleDiff = angle1 - angle0;\n    const absAngleDiff = Math.abs(angleDiff);\n\n    /* if (absAngleDiff >= PI_LBOUND && absAngleDiff <= PI_UBOUND)\n    {\n        const r1x = cx - nxtPx;\n        const r1y = cy - nxtPy;\n\n        if (r1x === 0)\n        {\n            if (r1y > 0)\n            {\n                angleDiff = -angleDiff;\n            }\n        }\n        else if (r1x >= -GRAPHICS_CURVES.epsilon)\n        {\n            angleDiff = -angleDiff;\n        }\n    }*/\n\n    const radius = Math.sqrt((cx2p0x * cx2p0x) + (cy2p0y * cy2p0y));\n    const segCount = ((15 * absAngleDiff * Math.sqrt(radius) / Math.PI) >> 0) + 1;\n    const angleInc = angleDiff / segCount;\n\n    startAngle += angleInc;\n\n    if (clockwise)\n    {\n        verts.push(cx, cy);\n        verts.push(sx, sy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(cx, cy);\n            verts.push(cx + ((Math.sin(angle) * radius)),\n                cy + ((Math.cos(angle) * radius)));\n        }\n\n        verts.push(cx, cy);\n        verts.push(ex, ey);\n    }\n    else\n    {\n        verts.push(sx, sy);\n        verts.push(cx, cy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(cx + ((Math.sin(angle) * radius)),\n                cy + ((Math.cos(angle) * radius)));\n            verts.push(cx, cy);\n        }\n\n        verts.push(ex, ey);\n        verts.push(cx, cy);\n    }\n\n    return segCount * 2;\n}\n\n/**\n * Builds a line to draw using the polygon method.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildNonNativeLine(graphicsData: GraphicsData, graphicsGeometry: GraphicsGeometry): void\n{\n    const shape = graphicsData.shape as Polygon;\n    let points = graphicsData.points || shape.points.slice();\n    const eps = graphicsGeometry.closePointEps;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n    // if the line width is an odd number add 0.5 to align to a whole pixel\n    // commenting this out fixes #711 and #1620\n    // if (graphicsData.lineWidth%2)\n    // {\n    //     for (i = 0; i < points.length; i++)\n    //     {\n    //         points[i] += 0.5;\n    //     }\n    // }\n\n    const style = graphicsData.lineStyle;\n\n    // get first and last point.. figure out the middle!\n    const firstPoint = new Point(points[0], points[1]);\n    const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n    const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n    const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps\n        && Math.abs(firstPoint.y - lastPoint.y) < eps;\n\n    // if the first point is the last point - gonna have issues :)\n    if (closedShape)\n    {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n\n        if (closedPath)\n        {\n            points.pop();\n            points.pop();\n            lastPoint.set(points[points.length - 2], points[points.length - 1]);\n        }\n\n        const midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n        const midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n\n    const verts = graphicsGeometry.points;\n    const length = points.length / 2;\n    let indexCount = points.length;\n    const indexStart = verts.length / 2;\n\n    // Max. inner and outer width\n    const width = style.width / 2;\n    const widthSquared = width * width;\n    const miterLimitSquared = style.miterLimit * style.miterLimit;\n\n    /* Line segments of interest where (x1,y1) forms the corner. */\n    let x0 = points[0];\n    let y0 = points[1];\n    let x1 = points[2];\n    let y1 = points[3];\n    let x2 = 0;\n    let y2 = 0;\n\n    /* perp[?](x|y) = the line normal with magnitude lineWidth. */\n    let perpx = -(y0 - y1);\n    let perpy = x0 - x1;\n    let perp1x = 0;\n    let perp1y = 0;\n\n    let dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    const ratio = style.alignment;// 0.5;\n    const innerWeight = (1 - ratio) * 2;\n    const outerWeight = ratio * 2;\n\n    if (!closedShape)\n    {\n        if (style.cap === LINE_CAP.ROUND)\n        {\n            indexCount += round(\n                x0 - (perpx * (innerWeight - outerWeight) * 0.5),\n                y0 - (perpy * (innerWeight - outerWeight) * 0.5),\n                x0 - (perpx * innerWeight),\n                y0 - (perpy * innerWeight),\n                x0 + (perpx * outerWeight),\n                y0 + (perpy * outerWeight),\n                verts,\n                true,\n            ) + 2;\n        }\n        else if (style.cap === LINE_CAP.SQUARE)\n        {\n            indexCount += square(x0, y0, perpx, perpy, innerWeight, outerWeight, true, verts);\n        }\n    }\n\n    // Push first point (below & above vertices)\n    verts.push(\n        x0 - (perpx * innerWeight),\n        y0 - (perpy * innerWeight));\n    verts.push(\n        x0 + (perpx * outerWeight),\n        y0 + (perpy * outerWeight));\n\n    for (let i = 1; i < length - 1; ++i)\n    {\n        x0 = points[(i - 1) * 2];\n        y0 = points[((i - 1) * 2) + 1];\n\n        x1 = points[i * 2];\n        y1 = points[(i * 2) + 1];\n\n        x2 = points[(i + 1) * 2];\n        y2 = points[((i + 1) * 2) + 1];\n\n        perpx = -(y0 - y1);\n        perpy = x0 - x1;\n\n        dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n        perpx /= dist;\n        perpy /= dist;\n        perpx *= width;\n        perpy *= width;\n\n        perp1x = -(y1 - y2);\n        perp1y = x1 - x2;\n\n        dist = Math.sqrt((perp1x * perp1x) + (perp1y * perp1y));\n        perp1x /= dist;\n        perp1y /= dist;\n        perp1x *= width;\n        perp1y *= width;\n\n        /* d[x|y](0|1) = the component displacement between points p(0,1|1,2) */\n        const dx0 = x1 - x0;\n        const dy0 = y0 - y1;\n        const dx1 = x1 - x2;\n        const dy1 = y2 - y1;\n\n        /* +ve if internal angle counterclockwise, -ve if internal angle clockwise. */\n        const cross = (dy0 * dx1) - (dy1 * dx0);\n        const clockwise = (cross < 0);\n\n        /* Going nearly straight? */\n        if (Math.abs(cross) < 0.1)\n        {\n            verts.push(\n                x1 - (perpx * innerWeight),\n                y1 - (perpy * innerWeight));\n            verts.push(\n                x1 + (perpx * outerWeight),\n                y1 + (perpy * outerWeight));\n\n            continue;\n        }\n\n        /* p[x|y] is the miter point. pdist is the distance between miter point and p1. */\n        const c1 = ((-perpx + x0) * (-perpy + y1)) - ((-perpx + x1) * (-perpy + y0));\n        const c2 = ((-perp1x + x2) * (-perp1y + y1)) - ((-perp1x + x1) * (-perp1y + y2));\n        const px = ((dx0 * c2) - (dx1 * c1)) / cross;\n        const py = ((dy1 * c1) - (dy0 * c2)) / cross;\n        const pdist = ((px - x1) * (px - x1)) + ((py - y1) * (py - y1));\n\n        /* Inner miter point */\n        const imx = x1 + ((px - x1) * innerWeight);\n        const imy = y1 + ((py - y1) * innerWeight);\n        /* Outer miter point */\n        const omx = x1 - ((px - x1) * outerWeight);\n        const omy = y1 - ((py - y1) * outerWeight);\n\n        /* Is the inside miter point too far away, creating a spike? */\n        const smallerInsideSegmentSq = Math.min((dx0 * dx0) + (dy0 * dy0), (dx1 * dx1) + (dy1 * dy1));\n        const insideWeight = clockwise ? innerWeight : outerWeight;\n        const smallerInsideDiagonalSq = smallerInsideSegmentSq + (insideWeight * insideWeight * widthSquared);\n        const insideMiterOk = pdist <= smallerInsideDiagonalSq;\n\n        if (insideMiterOk)\n        {\n            if (style.join === LINE_JOIN.BEVEL || pdist / widthSquared > miterLimitSquared)\n            {\n                if (clockwise) /* rotating at inner angle */\n                {\n                    verts.push(imx, imy);// inner miter point\n                    verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));// first segment's outer vertex\n                    verts.push(imx, imy);// inner miter point\n                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight));// second segment's outer vertex\n                }\n                else /* rotating at outer angle */\n                {\n                    verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight));// first segment's inner vertex\n                    verts.push(omx, omy);// outer miter point\n                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight));// second segment's outer vertex\n                    verts.push(omx, omy);// outer miter point\n                }\n\n                indexCount += 2;\n            }\n            else if (style.join === LINE_JOIN.ROUND)\n            {\n                if (clockwise) /* arc is outside */\n                {\n                    verts.push(imx, imy);\n                    verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));\n\n                    indexCount += round(\n                        x1, y1,\n                        x1 + (perpx * outerWeight), y1 + (perpy * outerWeight),\n                        x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                        verts, true\n                    ) + 4;\n\n                    verts.push(imx, imy);\n                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight));\n                }\n                else /* arc is inside */\n                {\n                    verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight));\n                    verts.push(omx, omy);\n\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false\n                    ) + 4;\n\n                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight));\n                    verts.push(omx, omy);\n                }\n            }\n            else\n            {\n                verts.push(imx, imy);\n                verts.push(omx, omy);\n            }\n        }\n        else // inside miter is NOT ok\n        {\n            verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight)); // first segment's inner vertex\n            verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight)); // first segment's outer vertex\n            if (style.join === LINE_JOIN.BEVEL || pdist / widthSquared > miterLimitSquared)\n            {\n                // Nothing needed\n            }\n            else if (style.join === LINE_JOIN.ROUND)\n            {\n                if (clockwise) /* arc is outside */\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 + (perpx * outerWeight), y1 + (perpy * outerWeight),\n                        x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                        verts, true\n                    ) + 2;\n                }\n                else /* arc is inside */\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false\n                    ) + 2;\n                }\n            }\n            else\n            {\n                if (clockwise)\n                {\n                    verts.push(omx, omy); // inner miter point\n                    verts.push(omx, omy); // inner miter point\n                }\n                else\n                {\n                    verts.push(imx, imy); // outer miter point\n                    verts.push(imx, imy); // outer miter point\n                }\n                indexCount += 2;\n            }\n            verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight)); // second segment's inner vertex\n            verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n            indexCount += 2;\n        }\n    }\n\n    x0 = points[(length - 2) * 2];\n    y0 = points[((length - 2) * 2) + 1];\n\n    x1 = points[(length - 1) * 2];\n    y1 = points[((length - 1) * 2) + 1];\n\n    perpx = -(y0 - y1);\n    perpy = x0 - x1;\n\n    dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight));\n    verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));\n\n    if (!closedShape)\n    {\n        if (style.cap === LINE_CAP.ROUND)\n        {\n            indexCount += round(\n                x1 - (perpx * (innerWeight - outerWeight) * 0.5),\n                y1 - (perpy * (innerWeight - outerWeight) * 0.5),\n                x1 - (perpx * innerWeight),\n                y1 - (perpy * innerWeight),\n                x1 + (perpx * outerWeight),\n                y1 + (perpy * outerWeight),\n                verts,\n                false\n            ) + 2;\n        }\n        else if (style.cap === LINE_CAP.SQUARE)\n        {\n            indexCount += square(x1, y1, perpx, perpy, innerWeight, outerWeight, false, verts);\n        }\n    }\n\n    const indices = graphicsGeometry.indices;\n    const eps2 = GRAPHICS_CURVES.epsilon * GRAPHICS_CURVES.epsilon;\n\n    // indices.push(indexStart);\n    for (let i = indexStart; i < indexCount + indexStart - 2; ++i)\n    {\n        x0 = verts[(i * 2)];\n        y0 = verts[(i * 2) + 1];\n\n        x1 = verts[(i + 1) * 2];\n        y1 = verts[((i + 1) * 2) + 1];\n\n        x2 = verts[(i + 2) * 2];\n        y2 = verts[((i + 2) * 2) + 1];\n\n        /* Skip zero area triangles */\n        if (Math.abs((x0 * (y1 - y2)) + (x1 * (y2 - y0)) + (x2 * (y0 - y1))) < eps2)\n        {\n            continue;\n        }\n\n        indices.push(i, i + 1, i + 2);\n    }\n}\n\n/**\n * Builds a line to draw using the gl.drawArrays(gl.LINES) method\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildNativeLine(graphicsData: GraphicsData, graphicsGeometry: GraphicsGeometry): void\n{\n    let i = 0;\n\n    const shape = graphicsData.shape as Polygon;\n    const points = graphicsData.points || shape.points;\n    const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n\n    if (points.length === 0) return;\n\n    const verts = graphicsGeometry.points;\n    const indices = graphicsGeometry.indices;\n    const length = points.length / 2;\n\n    const startIndex = verts.length / 2;\n    let currentIndex = startIndex;\n\n    verts.push(points[0], points[1]);\n\n    for (i = 1; i < length; i++)\n    {\n        verts.push(points[i * 2], points[(i * 2) + 1]);\n        indices.push(currentIndex, currentIndex + 1);\n\n        currentIndex++;\n    }\n\n    if (closedShape)\n    {\n        indices.push(currentIndex, startIndex);\n    }\n}\n\n/**\n * Builds a line to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nexport function buildLine(graphicsData: GraphicsData, graphicsGeometry: GraphicsGeometry): void\n{\n    if (graphicsData.lineStyle.native)\n    {\n        buildNativeLine(graphicsData, graphicsGeometry);\n    }\n    else\n    {\n        buildNonNativeLine(graphicsData, graphicsGeometry);\n    }\n}\n","import { GRAPHICS_CURVES } from '../const';\nimport { PI_2 } from '@pixi/math';\n\ninterface IArcLikeShape {\n    cx: number;\n    cy: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    anticlockwise: boolean;\n}\n\n/**\n * Utilities for arc curves\n * @class\n * @private\n */\nexport class ArcUtils\n{\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     *\n     * @private\n     * @param {number} x1 - The x-coordinate of the beginning of the arc\n     * @param {number} y1 - The y-coordinate of the beginning of the arc\n     * @param {number} x2 - The x-coordinate of the end of the arc\n     * @param {number} y2 - The y-coordinate of the end of the arc\n     * @param {number} radius - The radius of the arc\n     * @return {object} If the arc length is valid, return center of circle, radius and other info otherwise `null`.\n     */\n    static curveTo(x1: number, y1: number, x2: number, y2: number, radius: number, points: Array<number>): IArcLikeShape\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const a1 = fromY - y1;\n        const b1 = fromX - x1;\n        const a2 = y2 - y1;\n        const b2 = x2 - x1;\n        const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n        if (mm < 1.0e-8 || radius === 0)\n        {\n            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n            {\n                points.push(x1, y1);\n            }\n\n            return null;\n        }\n\n        const dd = (a1 * a1) + (b1 * b1);\n        const cc = (a2 * a2) + (b2 * b2);\n        const tt = (a1 * a2) + (b1 * b2);\n        const k1 = radius * Math.sqrt(dd) / mm;\n        const k2 = radius * Math.sqrt(cc) / mm;\n        const j1 = k1 * tt / dd;\n        const j2 = k2 * tt / cc;\n        const cx = (k1 * b2) + (k2 * b1);\n        const cy = (k1 * a2) + (k2 * a1);\n        const px = b1 * (k2 + j1);\n        const py = a1 * (k2 + j1);\n        const qx = b2 * (k1 + j2);\n        const qy = a2 * (k1 + j2);\n        const startAngle = Math.atan2(py - cy, px - cx);\n        const endAngle = Math.atan2(qy - cy, qx - cx);\n\n        return {\n            cx: (cx + x1),\n            cy: (cy + y1),\n            radius,\n            startAngle,\n            endAngle,\n            anticlockwise: (b1 * a2 > b2 * a1),\n        };\n    }\n\n    /* eslint-disable max-len */\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     *\n     * @private\n     * @param {number} startX - Start x location of arc\n     * @param {number} startY - Start y location of arc\n     * @param {number} cx - The x-coordinate of the center of the circle\n     * @param {number} cy - The y-coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param {number} endAngle - The ending angle, in radians\n     * @param {boolean} anticlockwise - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @param {number[]} points - Collection of points to add to\n     */\n    static arc(_startX: number, _startY: number, cx: number, cy: number, radius: number,\n        startAngle: number, endAngle: number, _anticlockwise: boolean, points: Array<number>): void\n    {\n        const sweep = endAngle - startAngle;\n        const n = GRAPHICS_CURVES._segmentsCount(\n            Math.abs(sweep) * radius,\n            Math.ceil(Math.abs(sweep) / PI_2) * 40\n        );\n\n        const theta = (sweep) / (n * 2);\n        const theta2 = theta * 2;\n        const cTheta = Math.cos(theta);\n        const sTheta = Math.sin(theta);\n        const segMinus = n - 1;\n        const remainder = (segMinus % 1) / segMinus;\n\n        for (let i = 0; i <= segMinus; ++i)\n        {\n            const real = i + (remainder * i);\n            const angle = ((theta) + startAngle + (theta2 * real));\n            const c = Math.cos(angle);\n            const s = -Math.sin(angle);\n\n            points.push(\n                (((cTheta * c) + (sTheta * s)) * radius) + cx,\n                (((cTheta * -s) + (sTheta * c)) * radius) + cy\n            );\n        }\n    }\n    /* eslint-enable max-len */\n}\n","import { GRAPHICS_CURVES } from '../const';\n\n/**\n * Utilities for bezier curves\n * @class\n * @private\n */\nexport class BezierUtils\n{\n    /**\n     * Calculate length of bezier curve.\n     * Analytical solution is impossible, since it involves an integral that does not integrate in general.\n     * Therefore numerical solution is used.\n     *\n     * @private\n     * @param {number} fromX - Starting point x\n     * @param {number} fromY - Starting point y\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {number} Length of bezier curve\n     */\n    static curveLength(\n        fromX: number, fromY: number,\n        cpX: number, cpY: number,\n        cpX2: number, cpY2: number,\n        toX: number, toY: number): number\n    {\n        const n = 10;\n        let result = 0.0;\n        let t = 0.0;\n        let t2 = 0.0;\n        let t3 = 0.0;\n        let nt = 0.0;\n        let nt2 = 0.0;\n        let nt3 = 0.0;\n        let x = 0.0;\n        let y = 0.0;\n        let dx = 0.0;\n        let dy = 0.0;\n        let prevX = fromX;\n        let prevY = fromY;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            t = i / n;\n            t2 = t * t;\n            t3 = t2 * t;\n            nt = (1.0 - t);\n            nt2 = nt * nt;\n            nt3 = nt2 * nt;\n\n            x = (nt3 * fromX) + (3.0 * nt2 * t * cpX) + (3.0 * nt * t2 * cpX2) + (t3 * toX);\n            y = (nt3 * fromY) + (3.0 * nt2 * t * cpY) + (3 * nt * t2 * cpY2) + (t3 * toY);\n            dx = prevX - x;\n            dy = prevY - y;\n            prevX = x;\n            prevY = y;\n\n            result += Math.sqrt((dx * dx) + (dy * dy));\n        }\n\n        return result;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     *\n     * Ignored from docs since it is not directly exposed.\n     *\n     * @ignore\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @param {number[]} points - Path array to push points into\n     */\n    static curveTo(\n        cpX: number, cpY: number,\n        cpX2: number, cpY2: number,\n        toX: number, toY: number,\n        points: Array<number>): void\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        points.length -= 2;\n\n        const n = GRAPHICS_CURVES._segmentsCount(\n            BezierUtils.curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY)\n        );\n\n        let dt = 0;\n        let dt2 = 0;\n        let dt3 = 0;\n        let t2 = 0;\n        let t3 = 0;\n\n        points.push(fromX, fromY);\n\n        for (let i = 1, j = 0; i <= n; ++i)\n        {\n            j = i / n;\n\n            dt = (1 - j);\n            dt2 = dt * dt;\n            dt3 = dt2 * dt;\n\n            t2 = j * j;\n            t3 = t2 * j;\n\n            points.push(\n                (dt3 * fromX) + (3 * dt2 * j * cpX) + (3 * dt * t2 * cpX2) + (t3 * toX),\n                (dt3 * fromY) + (3 * dt2 * j * cpY) + (3 * dt * t2 * cpY2) + (t3 * toY)\n            );\n        }\n    }\n}\n","import { GRAPHICS_CURVES } from '../const';\n\n/**\n * Utilities for quadratic curves\n * @class\n * @private\n */\nexport class QuadraticUtils\n{\n    /**\n     * Calculate length of quadratic curve\n     * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}\n     * for the detailed explanation of math behind this.\n     *\n     * @private\n     * @param {number} fromX - x-coordinate of curve start point\n     * @param {number} fromY - y-coordinate of curve start point\n     * @param {number} cpX - x-coordinate of curve control point\n     * @param {number} cpY - y-coordinate of curve control point\n     * @param {number} toX - x-coordinate of curve end point\n     * @param {number} toY - y-coordinate of curve end point\n     * @return {number} Length of quadratic curve\n     */\n    static curveLength(\n        fromX: number, fromY: number,\n        cpX: number, cpY: number,\n        toX: number, toY: number): number\n    {\n        const ax = fromX - (2.0 * cpX) + toX;\n        const ay = fromY - (2.0 * cpY) + toY;\n        const bx = (2.0 * cpX) - (2.0 * fromX);\n        const by = (2.0 * cpY) - (2.0 * fromY);\n        const a = 4.0 * ((ax * ax) + (ay * ay));\n        const b = 4.0 * ((ax * bx) + (ay * by));\n        const c = (bx * bx) + (by * by);\n\n        const s = 2.0 * Math.sqrt(a + b + c);\n        const a2 = Math.sqrt(a);\n        const a32 = 2.0 * a * a2;\n        const c2 = 2.0 * Math.sqrt(c);\n        const ba = b / a2;\n\n        return (\n            (a32 * s)\n                + (a2 * b * (s - c2))\n                + (\n                    ((4.0 * c * a) - (b * b))\n                   * Math.log(((2.0 * a2) + ba + s) / (ba + c2))\n                )\n        ) / (4.0 * a32);\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     *\n     * @private\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @param {number[]} points - Points to add segments to.\n     */\n    static curveTo(cpX: number, cpY: number, toX: number, toY: number, points: Array<number>): void\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const n = GRAPHICS_CURVES._segmentsCount(\n            QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY)\n        );\n\n        let xa = 0;\n        let ya = 0;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            const j = i / n;\n\n            xa = fromX + ((cpX - fromX) * j);\n            ya = fromY + ((cpY - fromY) * j);\n\n            points.push(xa + (((cpX + ((toX - cpX) * j)) - xa) * j),\n                ya + (((cpY + ((toY - cpY) * j)) - ya) * j));\n        }\n    }\n}\n","import type { LineStyle } from '../styles/LineStyle';\nimport type { FillStyle } from '../styles/FillStyle';\n\n/**\n * A structure to hold interim batch objects for Graphics.\n * @class\n * @memberof PIXI.graphicsUtils\n */\nexport class BatchPart\n{\n    public style: LineStyle | FillStyle;\n    public start: number;\n    public size: number;\n    public attribStart: number;\n    public attribSize: number;\n\n    constructor()\n    {\n        this.reset();\n    }\n\n    /**\n     * Begin batch part\n     *\n     * @param {PIXI.FillStyle | PIXI.LineStyle} style\n     * @param {number} startIndex\n     * @param {number} attribStart\n     */\n    public begin(style: LineStyle | FillStyle, startIndex: number, attribStart: number): void\n    {\n        this.reset();\n        this.style = style;\n        this.start = startIndex;\n        this.attribStart = attribStart;\n    }\n\n    /**\n     * End batch part\n     *\n     * @param {number} endIndex\n     * @param {number} endAttrib\n     */\n    public end(endIndex: number, endAttrib: number): void\n    {\n        this.attribSize = endAttrib - this.attribStart;\n        this.size = endIndex - this.start;\n    }\n\n    public reset(): void\n    {\n        this.style = null;\n        this.size = 0;\n        this.start = 0;\n        this.attribStart = 0;\n        this.attribSize = 0;\n    }\n}\n","/**\n * Generalized convenience utilities for Graphics.\n *\n * @namespace graphicsUtils\n * @memberof PIXI\n */\n\nimport { buildPoly } from './buildPoly';\nexport { buildPoly };\n\nimport { buildCircle } from './buildCircle';\nexport { buildCircle };\n\nimport { buildRectangle } from './buildRectangle';\nexport { buildRectangle };\n\nimport { buildRoundedRectangle } from './buildRoundedRectangle';\nexport { buildRoundedRectangle };\n\nexport * from './buildLine';\nexport * from './ArcUtils';\nexport * from './BezierUtils';\nexport * from './QuadraticUtils';\nexport * from './BatchPart';\n\n// for type only\nimport { BatchPart } from './BatchPart';\nimport { SHAPES } from '@pixi/math';\nimport { BatchDrawCall } from '@pixi/core';\nimport { IShapeBuildCommand } from './IShapeBuildCommand';\n\n/**\n * Map of fill commands for each shape type.\n *\n * @memberof PIXI.graphicsUtils\n * @member {Object} FILL_COMMANDS\n */\nexport const FILL_COMMANDS: Record<SHAPES, IShapeBuildCommand> = {\n    [SHAPES.POLY]: buildPoly,\n    [SHAPES.CIRC]: buildCircle,\n    [SHAPES.ELIP]: buildCircle,\n    [SHAPES.RECT]: buildRectangle,\n    [SHAPES.RREC]: buildRoundedRectangle,\n};\n\n/**\n * Batch pool, stores unused batches for preventing allocations.\n *\n * @memberof PIXI.graphicsUtils\n * @member {Array<PIXI.graphicsUtils.BatchPart>} BATCH_POOL\n */\nexport const BATCH_POOL: Array<BatchPart> = [];\n\n/**\n * Draw call pool, stores unused draw calls for preventing allocations.\n *\n * @memberof PIXI.graphicsUtils\n * @member {Array<PIXI.BatchDrawCall>} DRAW_CALL_POOL\n */\nexport const DRAW_CALL_POOL: Array<BatchDrawCall> = [];\n","import type { Matrix, SHAPES, IShape } from '@pixi/math';\nimport type { FillStyle } from './styles/FillStyle';\nimport type { LineStyle } from './styles/LineStyle';\n\n/**\n * A class to contain data useful for Graphics objects\n *\n * @class\n * @memberof PIXI\n */\nexport class GraphicsData\n{\n    shape: IShape;\n    lineStyle: LineStyle;\n    fillStyle: FillStyle;\n    matrix: Matrix;\n    type: SHAPES;\n    points: number[];\n    holes: Array<GraphicsData>;\n    /**\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param {PIXI.FillStyle} [fillStyle] - the width of the line to draw\n     * @param {PIXI.LineStyle} [lineStyle] - the color of the line to draw\n     * @param {PIXI.Matrix} [matrix] - Transform matrix\n     */\n    constructor(shape: IShape, fillStyle: FillStyle = null, lineStyle: LineStyle = null, matrix: Matrix = null)\n    {\n        /**\n         * The shape object to draw.\n         * @member {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle}\n         */\n        this.shape = shape;\n\n        /**\n         * The style of the line.\n         * @member {PIXI.LineStyle}\n         */\n        this.lineStyle = lineStyle;\n\n        /**\n         * The style of the fill.\n         * @member {PIXI.FillStyle}\n         */\n        this.fillStyle = fillStyle;\n\n        /**\n         * The transform matrix.\n         * @member {PIXI.Matrix}\n         */\n        this.matrix = matrix;\n\n        /**\n         * The type of the shape, see the Const.Shapes file for all the existing types,\n         * @member {number}\n         */\n        this.type = shape.type;\n\n        /**\n         * The collection of points.\n         * @member {number[]}\n         */\n        this.points = [];\n\n        /**\n         * The collection of holes.\n         * @member {PIXI.GraphicsData[]}\n         */\n        this.holes = [];\n    }\n\n    /**\n     * Creates a new GraphicsData object with the same values as this one.\n     *\n     * @return {PIXI.GraphicsData} Cloned GraphicsData object\n     */\n    public clone(): GraphicsData\n    {\n        return new GraphicsData(\n            this.shape,\n            this.fillStyle,\n            this.lineStyle,\n            this.matrix\n        );\n    }\n\n    /**\n     * Destroys the Graphics data.\n     *\n     */\n    public destroy(): void\n    {\n        this.shape = null;\n        this.holes.length = 0;\n        this.holes = null;\n        this.points.length = 0;\n        this.points = null;\n        this.lineStyle = null;\n        this.fillStyle = null;\n    }\n}\n","import {\n    buildLine,\n    buildPoly,\n    BatchPart,\n    FILL_COMMANDS,\n    BATCH_POOL,\n    DRAW_CALL_POOL,\n} from './utils';\n\nimport {\n    BatchGeometry,\n    BatchDrawCall,\n    BatchTextureArray,\n    BaseTexture,\n    Texture,\n} from '@pixi/core';\n\nimport { DRAW_MODES, WRAP_MODES } from '@pixi/constants';\nimport { SHAPES, Point, Matrix } from '@pixi/math';\nimport { GraphicsData } from './GraphicsData';\nimport { premultiplyTint } from '@pixi/utils';\nimport { Bounds } from '@pixi/display';\n\nimport type { Circle, Ellipse, Polygon, Rectangle, RoundedRectangle, IPointData } from '@pixi/math';\nimport type { FillStyle } from './styles/FillStyle';\nimport type { LineStyle } from './styles/LineStyle';\n\n/*\n * Complex shape type\n * @todo Move to Math shapes\n */\ntype IShape = Circle | Ellipse | Polygon | Rectangle | RoundedRectangle;\n\nconst tmpPoint = new Point();\nconst tmpBounds = new Bounds();\n\n/**\n * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.\n *\n * GraphicsGeometry is designed to not be continually updating the geometry since it's expensive\n * to re-tesselate using **earcut**. Consider using {@link PIXI.Mesh} for this use-case, it's much faster.\n *\n * @class\n * @extends PIXI.BatchGeometry\n * @memberof PIXI\n */\nexport class GraphicsGeometry extends BatchGeometry\n{\n    /**\n     * The maximum number of points to consider an object \"batchable\",\n     * able to be batched by the renderer's batch system.\n     *\n     * @memberof PIXI.GraphicsGeometry\n     * @static\n     * @member {number} BATCHABLE_SIZE\n     * @default 100\n     */\n    public static BATCHABLE_SIZE = 100;\n\n    public closePointEps: number;\n    public boundsPadding: number;\n\n    uvsFloat32: Float32Array = null;\n    indicesUint16: Uint16Array | Uint32Array = null;\n    batchable: boolean;\n    points: Array<number>;\n    colors: Array<number>;\n    uvs: Array<number>;\n    indices: Array<number>;\n    textureIds: Array<number>;\n    graphicsData: Array<GraphicsData>;\n    drawCalls: Array<BatchDrawCall>;\n    batchDirty: number;\n    batches: Array<BatchPart>;\n\n    protected dirty: number;\n    protected cacheDirty: number;\n    protected clearDirty: number;\n    protected shapeIndex: number;\n    protected _bounds: Bounds;\n    protected boundsDirty: number;\n\n    constructor()\n    {\n        super();\n\n        /**\n         * An array of points to draw, 2 numbers per point\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.points = [];\n\n        /**\n         * The collection of colors\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.colors = [];\n\n        /**\n         * The UVs collection\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.uvs = [];\n\n        /**\n         * The indices of the vertices\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.indices = [];\n\n        /**\n         * Reference to the texture IDs.\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.textureIds = [];\n\n        /**\n         * The collection of drawn shapes.\n         *\n         * @member {PIXI.GraphicsData[]}\n         * @protected\n         */\n        this.graphicsData = [];\n\n        /**\n         * Used to detect if the graphics object has changed.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.dirty = 0;\n\n        /**\n         * Batches need to regenerated if the geometry is updated.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.batchDirty = -1;\n\n        /**\n         * Used to check if the cache is dirty.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.cacheDirty = -1;\n\n        /**\n         * Used to detect if we cleared the graphicsData.\n         *\n         * @member {number}\n         * @default 0\n         * @protected\n         */\n        this.clearDirty = 0;\n\n        /**\n         * List of current draw calls drived from the batches.\n         *\n         * @member {object[]}\n         * @protected\n         */\n        this.drawCalls = [];\n\n        /**\n         * Intermediate abstract format sent to batch system.\n         * Can be converted to drawCalls or to batchable objects.\n         *\n         * @member {PIXI.graphicsUtils.BatchPart[]}\n         * @protected\n         */\n        this.batches = [];\n\n        /**\n         * Index of the last batched shape in the stack of calls.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.shapeIndex = 0;\n\n        /**\n         * Cached bounds.\n         *\n         * @member {PIXI.Bounds}\n         * @protected\n         */\n        this._bounds = new Bounds();\n\n        /**\n         * The bounds dirty flag.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.boundsDirty = -1;\n\n        /**\n         * Padding to add to the bounds.\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.boundsPadding = 0;\n\n        this.batchable = false;\n\n        this.indicesUint16 = null;\n\n        this.uvsFloat32 = null;\n\n        /**\n         * Minimal distance between points that are considered different.\n         * Affects line tesselation.\n         *\n         * @member {number}\n         */\n        this.closePointEps = 1e-4;\n    }\n\n    /**\n     * Get the current bounds of the graphic geometry.\n     *\n     * @member {PIXI.Bounds}\n     * @readonly\n     */\n    public get bounds(): Bounds\n    {\n        if (this.boundsDirty !== this.dirty)\n        {\n            this.boundsDirty = this.dirty;\n            this.calculateBounds();\n        }\n\n        return this._bounds;\n    }\n\n    /**\n     * Call if you changed graphicsData manually.\n     * Empties all batch buffers.\n     */\n    protected invalidate(): void\n    {\n        this.boundsDirty = -1;\n        this.dirty++;\n        this.batchDirty++;\n        this.shapeIndex = 0;\n\n        this.points.length = 0;\n        this.colors.length = 0;\n        this.uvs.length = 0;\n        this.indices.length = 0;\n        this.textureIds.length = 0;\n\n        for (let i = 0; i < this.drawCalls.length; i++)\n        {\n            this.drawCalls[i].texArray.clear();\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n\n        this.drawCalls.length = 0;\n\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            const batchPart = this.batches[i];\n\n            batchPart.reset();\n            BATCH_POOL.push(batchPart);\n        }\n\n        this.batches.length = 0;\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     *\n     * @return {PIXI.GraphicsGeometry} This GraphicsGeometry object. Good for chaining method calls\n     */\n    public clear(): GraphicsGeometry\n    {\n        if (this.graphicsData.length > 0)\n        {\n            this.invalidate();\n            this.clearDirty++;\n            this.graphicsData.length = 0;\n        }\n\n        return this;\n    }\n\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param {PIXI.FillStyle} fillStyle - Defines style of the fill.\n     * @param {PIXI.LineStyle} lineStyle - Defines style of the lines.\n     * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n     * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n     */\n    public drawShape(\n        shape: IShape,\n        fillStyle: FillStyle = null,\n        lineStyle: LineStyle = null,\n        matrix: Matrix = null): GraphicsGeometry\n    {\n        const data = new GraphicsData(shape, fillStyle, lineStyle, matrix);\n\n        this.graphicsData.push(data);\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n     * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n     */\n    public drawHole(shape: IShape, matrix: Matrix = null): GraphicsGeometry\n    {\n        if (!this.graphicsData.length)\n        {\n            return null;\n        }\n\n        const data = new GraphicsData(shape, null, null, matrix);\n\n        const lastShape = this.graphicsData[this.graphicsData.length - 1];\n\n        data.lineStyle = lastShape.lineStyle;\n\n        lastShape.holes.push(data);\n\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Destroys the GraphicsGeometry object.\n     *\n     */\n    public destroy(): void\n    {\n        super.destroy();\n\n        // destroy each of the GraphicsData objects\n        for (let i = 0; i < this.graphicsData.length; ++i)\n        {\n            this.graphicsData[i].destroy();\n        }\n\n        this.points.length = 0;\n        this.points = null;\n        this.colors.length = 0;\n        this.colors = null;\n        this.uvs.length = 0;\n        this.uvs = null;\n        this.indices.length = 0;\n        this.indices = null;\n        this.indexBuffer.destroy();\n        this.indexBuffer = null;\n        this.graphicsData.length = 0;\n        this.graphicsData = null;\n        this.drawCalls.length = 0;\n        this.drawCalls = null;\n        this.batches.length = 0;\n        this.batches = null;\n        this._bounds = null;\n    }\n\n    /**\n     * Check to see if a point is contained within this geometry.\n     *\n     * @param {PIXI.IPointData} point - Point to check if it's contained.\n     * @return {Boolean} `true` if the point is contained within geometry.\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        const graphicsData = this.graphicsData;\n\n        for (let i = 0; i < graphicsData.length; ++i)\n        {\n            const data = graphicsData[i];\n\n            if (!data.fillStyle.visible)\n            {\n                continue;\n            }\n\n            // only deal with fills..\n            if (data.shape)\n            {\n                if (data.matrix)\n                {\n                    data.matrix.applyInverse(point, tmpPoint);\n                }\n                else\n                {\n                    tmpPoint.copyFrom(point);\n                }\n\n                if (data.shape.contains(tmpPoint.x, tmpPoint.y))\n                {\n                    let hitHole = false;\n\n                    if (data.holes)\n                    {\n                        for (let i = 0; i < data.holes.length; i++)\n                        {\n                            const hole = data.holes[i];\n\n                            if (hole.shape.contains(tmpPoint.x, tmpPoint.y))\n                            {\n                                hitHole = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!hitHole)\n                    {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Generates intermediate batch data. Either gets converted to drawCalls\n     * or used to convert to batch objects directly by the Graphics object.\n     *\n     * @param {boolean} [allow32Indices] - Allow using 32-bit indices for preventing artifacts when more that 65535 vertices\n     */\n    updateBatches(allow32Indices?: boolean): void\n    {\n        if (!this.graphicsData.length)\n        {\n            this.batchable = true;\n\n            return;\n        }\n\n        if (!this.validateBatching())\n        {\n            return;\n        }\n\n        this.cacheDirty = this.dirty;\n\n        const uvs = this.uvs;\n        const graphicsData = this.graphicsData;\n\n        let batchPart: BatchPart = null;\n\n        let currentStyle = null;\n\n        if (this.batches.length > 0)\n        {\n            batchPart = this.batches[this.batches.length - 1];\n            currentStyle = batchPart.style;\n        }\n\n        for (let i = this.shapeIndex; i < graphicsData.length; i++)\n        {\n            this.shapeIndex++;\n\n            const data = graphicsData[i];\n            const fillStyle = data.fillStyle;\n            const lineStyle = data.lineStyle;\n            const command = FILL_COMMANDS[data.type];\n\n            // build out the shapes points..\n            command.build(data);\n\n            if (data.matrix)\n            {\n                this.transformPoints(data.points, data.matrix);\n            }\n\n            for (let j = 0; j < 2; j++)\n            {\n                const style = (j === 0) ? fillStyle : lineStyle;\n\n                if (!style.visible) continue;\n\n                const nextTexture = style.texture.baseTexture;\n                const index = this.indices.length;\n                const attribIndex = this.points.length / 2;\n\n                nextTexture.wrapMode = WRAP_MODES.REPEAT;\n\n                if (j === 0)\n                {\n                    this.processFill(data);\n                }\n                else\n                {\n                    this.processLine(data);\n                }\n\n                const size = (this.points.length / 2) - attribIndex;\n\n                if (size === 0) continue;\n                // close batch if style is different\n                if (batchPart && !this._compareStyles(currentStyle, style))\n                {\n                    batchPart.end(index, attribIndex);\n                    batchPart = null;\n                }\n                // spawn new batch if its first batch or previous was closed\n                if (!batchPart)\n                {\n                    batchPart = BATCH_POOL.pop() || new BatchPart();\n                    batchPart.begin(style, index, attribIndex);\n                    this.batches.push(batchPart);\n                    currentStyle = style;\n                }\n\n                this.addUvs(this.points, uvs, style.texture, attribIndex, size, style.matrix);\n            }\n        }\n\n        const index = this.indices.length;\n        const attrib = this.points.length / 2;\n\n        if (batchPart)\n        {\n            batchPart.end(index, attrib);\n        }\n\n        if (this.batches.length === 0)\n        {\n            // there are no visible styles in GraphicsData\n            // its possible that someone wants Graphics just for the bounds\n            this.batchable = true;\n\n            return;\n        }\n\n        // prevent allocation when length is same as buffer\n        if (this.indicesUint16 && this.indices.length === this.indicesUint16.length)\n        {\n            this.indicesUint16.set(this.indices);\n        }\n        else\n        {\n            const need32\n                = attrib > 0xffff && allow32Indices;\n\n            this.indicesUint16 = need32 ? new Uint32Array(this.indices) : new Uint16Array(this.indices);\n        }\n\n        // TODO make this a const..\n        this.batchable = this.isBatchable();\n\n        if (this.batchable)\n        {\n            this.packBatches();\n        }\n        else\n        {\n            this.buildDrawCalls();\n        }\n    }\n\n    /**\n     * Affinity check\n     *\n     * @param {PIXI.FillStyle | PIXI.LineStyle} styleA\n     * @param {PIXI.FillStyle | PIXI.LineStyle} styleB\n     */\n    protected _compareStyles(styleA: FillStyle | LineStyle, styleB: FillStyle | LineStyle): boolean\n    {\n        if (!styleA || !styleB)\n        {\n            return false;\n        }\n\n        if (styleA.texture.baseTexture !== styleB.texture.baseTexture)\n        {\n            return false;\n        }\n\n        if (styleA.color + styleA.alpha !== styleB.color + styleB.alpha)\n        {\n            return false;\n        }\n\n        if (!!(styleA as LineStyle).native !== !!(styleB as LineStyle).native)\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Test geometry for batching process.\n     *\n     * @protected\n     */\n    protected validateBatching(): boolean\n    {\n        if (this.dirty === this.cacheDirty || !this.graphicsData.length)\n        {\n            return false;\n        }\n\n        for (let i = 0, l = this.graphicsData.length; i < l; i++)\n        {\n            const data = this.graphicsData[i];\n            const fill = data.fillStyle;\n            const line = data.lineStyle;\n\n            if (fill && !fill.texture.baseTexture.valid) return false;\n            if (line && !line.texture.baseTexture.valid) return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Offset the indices so that it works with the batcher.\n     *\n     * @protected\n     */\n    protected packBatches(): void\n    {\n        this.batchDirty++;\n        this.uvsFloat32 = new Float32Array(this.uvs);\n\n        const batches = this.batches;\n\n        for (let i = 0, l = batches.length; i < l; i++)\n        {\n            const batch = batches[i];\n\n            for (let j = 0; j < batch.size; j++)\n            {\n                const index = batch.start + j;\n\n                this.indicesUint16[index] = this.indicesUint16[index] - batch.attribStart;\n            }\n        }\n    }\n\n    /**\n     * Checks to see if this graphics geometry can be batched.\n     * Currently it needs to be small enough and not contain any native lines.\n     *\n     * @protected\n     */\n    protected isBatchable(): boolean\n    {\n        // prevent heavy mesh batching\n        if (this.points.length > 0xffff * 2)\n        {\n            return false;\n        }\n\n        const batches = this.batches;\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            if ((batches[i].style as LineStyle).native)\n            {\n                return false;\n            }\n        }\n\n        return (this.points.length < GraphicsGeometry.BATCHABLE_SIZE * 2);\n    }\n\n    /**\n     * Converts intermediate batches data to drawCalls.\n     *\n     * @protected\n     */\n    protected buildDrawCalls(): void\n    {\n        let TICK = ++BaseTexture._globalBatch;\n\n        for (let i = 0; i < this.drawCalls.length; i++)\n        {\n            this.drawCalls[i].texArray.clear();\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n\n        this.drawCalls.length = 0;\n\n        const colors = this.colors;\n        const textureIds = this.textureIds;\n\n        let currentGroup: BatchDrawCall =  DRAW_CALL_POOL.pop();\n\n        if (!currentGroup)\n        {\n            currentGroup = new BatchDrawCall();\n            currentGroup.texArray = new BatchTextureArray();\n        }\n        currentGroup.texArray.count = 0;\n        currentGroup.start = 0;\n        currentGroup.size = 0;\n        currentGroup.type = DRAW_MODES.TRIANGLES;\n\n        let textureCount = 0;\n        let currentTexture = null;\n        let textureId = 0;\n        let native = false;\n        let drawMode = DRAW_MODES.TRIANGLES;\n\n        let index = 0;\n\n        this.drawCalls.push(currentGroup);\n\n        // TODO - this can be simplified\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            const data = this.batches[i];\n\n            // TODO add some full on MAX_TEXTURE CODE..\n            const MAX_TEXTURES = 8;\n\n            // Forced cast for checking `native` without errors\n            const style = data.style as LineStyle;\n\n            const nextTexture = style.texture.baseTexture;\n\n            if (native !== !!style.native)\n            {\n                native = !!style.native;\n                drawMode = native ? DRAW_MODES.LINES : DRAW_MODES.TRIANGLES;\n\n                // force the batch to break!\n                currentTexture = null;\n                textureCount = MAX_TEXTURES;\n                TICK++;\n            }\n\n            if (currentTexture !== nextTexture)\n            {\n                currentTexture = nextTexture;\n\n                if (nextTexture._batchEnabled !== TICK)\n                {\n                    if (textureCount === MAX_TEXTURES)\n                    {\n                        TICK++;\n\n                        textureCount = 0;\n\n                        if (currentGroup.size > 0)\n                        {\n                            currentGroup = DRAW_CALL_POOL.pop();\n                            if (!currentGroup)\n                            {\n                                currentGroup = new BatchDrawCall();\n                                currentGroup.texArray = new BatchTextureArray();\n                            }\n                            this.drawCalls.push(currentGroup);\n                        }\n\n                        currentGroup.start = index;\n                        currentGroup.size = 0;\n                        currentGroup.texArray.count = 0;\n                        currentGroup.type = drawMode;\n                    }\n\n                    // TODO add this to the render part..\n                    // Hack! Because texture has protected `touched`\n                    nextTexture.touched = 1;// touch;\n\n                    nextTexture._batchEnabled = TICK;\n                    nextTexture._batchLocation = textureCount;\n                    nextTexture.wrapMode = WRAP_MODES.REPEAT;\n\n                    currentGroup.texArray.elements[currentGroup.texArray.count++] = nextTexture;\n                    textureCount++;\n                }\n            }\n\n            currentGroup.size += data.size;\n            index += data.size;\n\n            textureId = nextTexture._batchLocation;\n\n            this.addColors(colors, style.color, style.alpha, data.attribSize);\n            this.addTextureIds(textureIds, textureId, data.attribSize);\n        }\n\n        BaseTexture._globalBatch = TICK;\n\n        // upload..\n        // merge for now!\n        this.packAttributes();\n    }\n\n    /**\n     * Packs attributes to single buffer.\n     *\n     * @protected\n     */\n    protected packAttributes(): void\n    {\n        const verts = this.points;\n        const uvs = this.uvs;\n        const colors = this.colors;\n        const textureIds = this.textureIds;\n\n        // verts are 2 positions.. so we * by 3 as there are 6 properties.. then 4 cos its bytes\n        const glPoints = new ArrayBuffer(verts.length * 3 * 4);\n        const f32 = new Float32Array(glPoints);\n        const u32 = new Uint32Array(glPoints);\n\n        let p = 0;\n\n        for (let i = 0; i < verts.length / 2; i++)\n        {\n            f32[p++] = verts[i * 2];\n            f32[p++] = verts[(i * 2) + 1];\n\n            f32[p++] = uvs[i * 2];\n            f32[p++] = uvs[(i * 2) + 1];\n\n            u32[p++] = colors[i];\n\n            f32[p++] = textureIds[i];\n        }\n\n        this._buffer.update(glPoints);\n        this._indexBuffer.update(this.indicesUint16);\n    }\n\n    /**\n     * Process fill part of Graphics.\n     *\n     * @param {PIXI.GraphicsData} data\n     * @protected\n     */\n    protected processFill(data: GraphicsData): void\n    {\n        if (data.holes.length)\n        {\n            this.processHoles(data.holes);\n\n            buildPoly.triangulate(data, this);\n        }\n        else\n        {\n            const command = FILL_COMMANDS[data.type];\n\n            command.triangulate(data, this);\n        }\n    }\n\n    /**\n     * Process line part of Graphics.\n     *\n     * @param {PIXI.GraphicsData} data\n     * @protected\n     */\n    protected processLine(data: GraphicsData): void\n    {\n        buildLine(data, this);\n\n        for (let i = 0; i < data.holes.length; i++)\n        {\n            buildLine(data.holes[i], this);\n        }\n    }\n\n    /**\n     * Process the holes data.\n     *\n     * @param {PIXI.GraphicsData[]} holes - Holes to render\n     * @protected\n     */\n    protected processHoles(holes: Array<GraphicsData>): void\n    {\n        for (let i = 0; i < holes.length; i++)\n        {\n            const hole = holes[i];\n            const command = FILL_COMMANDS[hole.type];\n\n            command.build(hole);\n\n            if (hole.matrix)\n            {\n                this.transformPoints(hole.points, hole.matrix);\n            }\n        }\n    }\n\n    /**\n     * Update the local bounds of the object. Expensive to use performance-wise.\n     *\n     * @protected\n     */\n    protected calculateBounds(): void\n    {\n        const bounds = this._bounds;\n        const sequenceBounds = tmpBounds;\n        let curMatrix = Matrix.IDENTITY;\n\n        this._bounds.clear();\n        sequenceBounds.clear();\n\n        for (let i = 0; i < this.graphicsData.length; i++)\n        {\n            const data = this.graphicsData[i];\n            const shape = data.shape;\n            const type = data.type;\n            const lineStyle = data.lineStyle;\n            const nextMatrix = data.matrix || Matrix.IDENTITY;\n            let lineWidth = 0.0;\n\n            if (lineStyle && lineStyle.visible)\n            {\n                const alignment = lineStyle.alignment;\n\n                lineWidth = lineStyle.width;\n\n                if (type === SHAPES.POLY)\n                {\n                    lineWidth = lineWidth * (0.5 + Math.abs(0.5 - alignment));\n                }\n                else\n                {\n                    lineWidth = lineWidth * Math.max(0, alignment);\n                }\n            }\n\n            if (curMatrix !== nextMatrix)\n            {\n                if (!sequenceBounds.isEmpty())\n                {\n                    bounds.addBoundsMatrix(sequenceBounds, curMatrix);\n                    sequenceBounds.clear();\n                }\n                curMatrix = nextMatrix;\n            }\n\n            if (type === SHAPES.RECT || type === SHAPES.RREC)\n            {\n                const rect = shape as Rectangle | RoundedRectangle;\n\n                sequenceBounds.addFramePad(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height,\n                    lineWidth, lineWidth);\n            }\n            else if (type === SHAPES.CIRC)\n            {\n                const circle = shape as Circle;\n\n                sequenceBounds.addFramePad(circle.x, circle.y, circle.x, circle.y,\n                    circle.radius + lineWidth, circle.radius + lineWidth);\n            }\n            else if (type === SHAPES.ELIP)\n            {\n                const ellipse = shape as Ellipse;\n\n                sequenceBounds.addFramePad(ellipse.x, ellipse.y, ellipse.x, ellipse.y,\n                    ellipse.width + lineWidth, ellipse.height + lineWidth);\n            }\n            else\n            {\n                const poly = shape as Polygon;\n                // adding directly to the bounds\n\n                bounds.addVerticesMatrix(curMatrix, (poly.points as any), 0, poly.points.length, lineWidth, lineWidth);\n            }\n        }\n\n        if (!sequenceBounds.isEmpty())\n        {\n            bounds.addBoundsMatrix(sequenceBounds, curMatrix);\n        }\n\n        bounds.pad(this.boundsPadding, this.boundsPadding);\n    }\n\n    /**\n     * Transform points using matrix.\n     *\n     * @protected\n     * @param {number[]} points - Points to transform\n     * @param {PIXI.Matrix} matrix - Transform matrix\n     */\n    protected transformPoints(points: Array<number>, matrix: Matrix): void\n    {\n        for (let i = 0; i < points.length / 2; i++)\n        {\n            const x = points[(i * 2)];\n            const y = points[(i * 2) + 1];\n\n            points[(i * 2)] = (matrix.a * x) + (matrix.c * y) + matrix.tx;\n            points[(i * 2) + 1] = (matrix.b * x) + (matrix.d * y) + matrix.ty;\n        }\n    }\n\n    /**\n     * Add colors.\n     *\n     * @protected\n     * @param {number[]} colors - List of colors to add to\n     * @param {number} color - Color to add\n     * @param {number} alpha - Alpha to use\n     * @param {number} size - Number of colors to add\n     */\n    protected addColors(colors: Array<number>, color: number, alpha: number, size: number): void\n    {\n        // TODO use the premultiply bits Ivan added\n        const rgb = (color >> 16) + (color & 0xff00) + ((color & 0xff) << 16);\n\n        const rgba =  premultiplyTint(rgb, alpha);\n\n        while (size-- > 0)\n        {\n            colors.push(rgba);\n        }\n    }\n\n    /**\n     * Add texture id that the shader/fragment wants to use.\n     *\n     * @protected\n     * @param {number[]} textureIds\n     * @param {number} id\n     * @param {number} size\n     */\n    protected addTextureIds(textureIds: Array<number>, id: number, size: number): void\n    {\n        while (size-- > 0)\n        {\n            textureIds.push(id);\n        }\n    }\n\n    /**\n     * Generates the UVs for a shape.\n     *\n     * @protected\n     * @param {number[]} verts - Vertices\n     * @param {number[]} uvs - UVs\n     * @param {PIXI.Texture} texture - Reference to Texture\n     * @param {number} start - Index buffer start index.\n     * @param {number} size - The size/length for index buffer.\n     * @param {PIXI.Matrix} [matrix] - Optional transform for all points.\n     */\n    protected addUvs(\n        verts: Array<number>,\n        uvs: Array<number>,\n        texture: Texture,\n        start: number, size:\n        number, matrix:\n        Matrix = null): void\n    {\n        let index = 0;\n        const uvsStart = uvs.length;\n        const frame = texture.frame;\n\n        while (index < size)\n        {\n            let x = verts[(start + index) * 2];\n            let y = verts[((start + index) * 2) + 1];\n\n            if (matrix)\n            {\n                const nx = (matrix.a * x) + (matrix.c * y) + matrix.tx;\n\n                y = (matrix.b * x) + (matrix.d * y) + matrix.ty;\n                x = nx;\n            }\n\n            index++;\n\n            uvs.push(x / frame.width, y / frame.height);\n        }\n\n        const baseTexture = texture.baseTexture;\n\n        if (frame.width < baseTexture.width\n            || frame.height < baseTexture.height)\n        {\n            this.adjustUvs(uvs, texture, uvsStart, size);\n        }\n    }\n\n    /**\n     * Modify uvs array according to position of texture region\n     * Does not work with rotated or trimmed textures\n     *\n     * @param {number[]} uvs - array\n     * @param {PIXI.Texture} texture - region\n     * @param {number} start - starting index for uvs\n     * @param {number} size - how many points to adjust\n     */\n    protected adjustUvs(uvs: Array<number>, texture: Texture, start: number, size: number): void\n    {\n        const baseTexture = texture.baseTexture;\n        const eps = 1e-6;\n        const finish = start + (size * 2);\n        const frame = texture.frame;\n        const scaleX = frame.width / baseTexture.width;\n        const scaleY = frame.height / baseTexture.height;\n        let offsetX = frame.x / frame.width;\n        let offsetY = frame.y / frame.height;\n        let minX = Math.floor(uvs[start] + eps);\n        let minY = Math.floor(uvs[start + 1] + eps);\n\n        for (let i = start + 2; i < finish; i += 2)\n        {\n            minX = Math.min(minX, Math.floor(uvs[i] + eps));\n            minY = Math.min(minY, Math.floor(uvs[i + 1] + eps));\n        }\n        offsetX -= minX;\n        offsetY -= minY;\n        for (let i = start; i < finish; i += 2)\n        {\n            uvs[i] = (uvs[i] + offsetX) * scaleX;\n            uvs[i + 1] = (uvs[i + 1] + offsetY) * scaleY;\n        }\n    }\n}\n","import { FillStyle } from './FillStyle';\nimport { LINE_JOIN, LINE_CAP } from '../const';\n\n/**\n * Represents the line style for Graphics.\n * @memberof PIXI\n * @class\n * @extends PIXI.FillStyle\n */\nexport class LineStyle extends FillStyle\n{\n    /**\n     * The width (thickness) of any lines drawn.\n     *\n     * @member {number}\n     * @default 0\n     */\n    public width = 0;\n\n    /**\n     * The alignment of any lines drawn (0.5 = middle, 1 = outer, 0 = inner). WebGL only.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    public alignment = 0.5;\n\n    /**\n     * If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     *\n     * @member {boolean}\n     * @default false\n     */\n    public native = false;\n\n    /**\n     * Line cap style.\n     *\n     * @member {PIXI.LINE_CAP}\n     * @default PIXI.LINE_CAP.BUTT\n     */\n    public cap = LINE_CAP.BUTT;\n\n    /**\n     * Line join style.\n     *\n     * @member {PIXI.LINE_JOIN}\n     * @default PIXI.LINE_JOIN.MITER\n     */\n    public join = LINE_JOIN.MITER;\n\n    /**\n     * Miter limit.\n     *\n     * @member {number}\n     * @default 10\n     */\n    public miterLimit = 10;\n\n    /**\n     * Clones the object\n     *\n     * @return {PIXI.LineStyle}\n     */\n    public clone(): LineStyle\n    {\n        const obj = new LineStyle();\n\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.visible = this.visible;\n        obj.width = this.width;\n        obj.alignment = this.alignment;\n        obj.native = this.native;\n        obj.cap = this.cap;\n        obj.join = this.join;\n        obj.miterLimit = this.miterLimit;\n\n        return obj;\n    }\n\n    /**\n     * Reset the line style to default.\n     */\n    public reset(): void\n    {\n        super.reset();\n\n        // Override default line style color\n        this.color = 0x0;\n\n        this.alignment = 0.5;\n        this.width = 0;\n        this.native = false;\n    }\n}\n","import {\n    Circle,\n    Ellipse,\n    PI_2,\n    Point,\n    Polygon,\n    Rectangle,\n    RoundedRectangle,\n    Matrix,\n    SHAPES,\n} from '@pixi/math';\n\nimport { Texture, UniformGroup, State, Renderer, BatchDrawCall, Shader } from '@pixi/core';\nimport { BezierUtils, QuadraticUtils, ArcUtils } from './utils';\nimport { hex2rgb } from '@pixi/utils';\nimport { GraphicsGeometry } from './GraphicsGeometry';\nimport { FillStyle } from './styles/FillStyle';\nimport { LineStyle } from './styles/LineStyle';\nimport { BLEND_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\n\nimport type { IShape, IPointData } from '@pixi/math';\nimport type { IDestroyOptions } from '@pixi/display';\nimport { LINE_JOIN, LINE_CAP } from './const';\n\n/**\n * Batch element computed from Graphics geometry\n */\nexport interface IGraphicsBatchElement {\n    vertexData: Float32Array;\n    blendMode: BLEND_MODES;\n    indices: Uint16Array | Uint32Array;\n    uvs: Float32Array;\n    alpha: number;\n    worldAlpha: number;\n    _batchRGB: number[];\n    _tintRGB: number;\n    _texture: Texture;\n}\n\nexport interface IFillStyleOptions {\n    color?: number;\n    alpha?: number;\n    texture?: Texture;\n    matrix?: Matrix;\n}\n\nexport interface ILineStyleOptions extends IFillStyleOptions {\n    width?: number;\n    alignment?: number;\n    native?: boolean;\n    cap?: LINE_CAP;\n    join?: LINE_JOIN;\n    miterLimit?: number;\n}\n\nconst temp = new Float32Array(3);\n\n// a default shaders map used by graphics..\nconst DEFAULT_SHADERS: {[key: string]: Shader} = {};\n\nexport interface Graphics extends GlobalMixins.Graphics, Container {}\n\n/**\n * The Graphics class is primarily used to render primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.  However, you can also use a Graphics\n * object to build a list of primitives to use as a mask, or as a complex hitArea.\n *\n * Please note that due to legacy naming conventions, the behavior of some functions in this class\n * can be confusing.  Each call to `drawRect()`, `drawPolygon()`, etc. actually stores that primitive\n * in the Geometry class's GraphicsGeometry object for later use in rendering or hit testing - the\n * functions do not directly draw anything to the screen.  Similarly, the `clear()` function doesn't\n * change the screen, it simply resets the list of primitives, which can be useful if you want to\n * rebuild the contents of an existing Graphics object.\n *\n * Once a GraphicsGeometry list is built, you can re-use it in other Geometry objects as\n * an optimization, by passing it into a new Geometry object's constructor.  Because of this\n * ability, it's important to call `destroy()` on Geometry objects once you are done with them, to\n * properly dereference each GraphicsGeometry and prevent memory leaks.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class Graphics extends Container\n{\n    /**\n     * Temporary point to use for containsPoint\n     *\n     * @static\n     * @private\n     * @member {PIXI.Point}\n     */\n\n    static _TEMP_POINT = new Point();\n\n    public shader: Shader;\n    public pluginName: string;\n    public currentPath: Polygon;\n\n    protected batches: Array<IGraphicsBatchElement>;\n    protected batchTint: number;\n    protected batchDirty: number;\n    protected vertexData: Float32Array;\n\n    protected _fillStyle: FillStyle;\n    protected _lineStyle: LineStyle;\n    protected _matrix: Matrix;\n    protected _holeMode: boolean;\n    protected _transformID: number;\n    protected _tint: number;\n\n    private state: State;\n    private _geometry: GraphicsGeometry;\n\n    /**\n     * Includes vertex positions, face indices, normals, colors, UVs, and\n     * custom attributes within buffers, reducing the cost of passing all\n     * this data to the GPU. Can be shared between multiple Mesh or Graphics objects.\n     *\n     * @member {PIXI.GraphicsGeometry}\n     * @readonly\n     */\n    public get geometry(): GraphicsGeometry\n    {\n        return this._geometry;\n    }\n\n    /**\n     * @param {PIXI.GraphicsGeometry} [geometry=null] - Geometry to use, if omitted\n     *        will create a new GraphicsGeometry instance.\n     */\n    constructor(geometry: GraphicsGeometry = null)\n    {\n        super();\n\n        this._geometry = geometry || new GraphicsGeometry();\n        this._geometry.refCount++;\n\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Graphics objects.\n         *\n         * @member {PIXI.Shader}\n         */\n        this.shader = null;\n\n        /**\n         * Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         *\n         * @member {PIXI.State}\n         */\n        this.state = State.for2d();\n\n        /**\n         * Current fill style\n         *\n         * @member {PIXI.FillStyle}\n         * @protected\n         */\n        this._fillStyle = new FillStyle();\n\n        /**\n         * Current line style\n         *\n         * @member {PIXI.LineStyle}\n         * @protected\n         */\n        this._lineStyle = new LineStyle();\n\n        /**\n         * Current shape transform matrix.\n         *\n         * @member {PIXI.Matrix}\n         * @protected\n         */\n        this._matrix = null;\n\n        /**\n         * Current hole mode is enabled.\n         *\n         * @member {boolean}\n         * @default false\n         * @protected\n         */\n        this._holeMode = false;\n\n        /**\n         * Current path\n         *\n         * @member {PIXI.Polygon}\n         * @readonly\n         */\n        this.currentPath = null;\n\n        /**\n         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\n         * This is useful if your graphics element does not change often, as it will speed up the rendering\n         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics\n         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if\n         * you are constantly redrawing the graphics element.\n         *\n         * @name cacheAsBitmap\n         * @member {boolean}\n         * @memberof PIXI.Graphics#\n         * @default false\n         */\n\n        /**\n         * A collections of batches! These can be drawn by the renderer batch system.\n         *\n         * @protected\n         * @member {object[]}\n         */\n        this.batches = [];\n\n        /**\n         * Update dirty for limiting calculating tints for batches.\n         *\n         * @protected\n         * @member {number}\n         * @default -1\n         */\n        this.batchTint = -1;\n\n        /**\n         * Update dirty for limiting calculating batches.\n         *\n         * @protected\n         * @member {number}\n         * @default -1\n         */\n        this.batchDirty = -1;\n\n        /**\n         * Copy of the object vertex data.\n         *\n         * @protected\n         * @member {Float32Array}\n         */\n        this.vertexData = null;\n\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        this.pluginName = 'batch';\n\n        this._transformID = -1;\n\n        // Set default\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n    }\n\n    /**\n     * Creates a new Graphics object with the same values as this one.\n     * Note that only the geometry of the object is cloned, not its transform (position,scale,etc)\n     *\n     * @return {PIXI.Graphics} A clone of the graphics object\n     */\n    public clone(): Graphics\n    {\n        this.finishPoly();\n\n        return new Graphics(this._geometry);\n    }\n\n    /**\n     * The blend mode to be applied to the graphic shape. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.  Note that, since each\n     * primitive in the GraphicsGeometry list is rendered sequentially, modes\n     * such as `PIXI.BLEND_MODES.ADD` and `PIXI.BLEND_MODES.MULTIPLY` will\n     * be applied per-primitive.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL;\n     * @see PIXI.BLEND_MODES\n     */\n    public set blendMode(value: BLEND_MODES)\n    {\n        this.state.blendMode = value;\n    }\n\n    public get blendMode(): BLEND_MODES\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * The tint applied to each graphic shape. This is a hex value. A value of\n     * 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    public get tint(): number\n    {\n        return this._tint;\n    }\n\n    public set tint(value: number)\n    {\n        this._tint = value;\n    }\n\n    /**\n     * The current fill style.\n     *\n     * @member {PIXI.FillStyle}\n     * @readonly\n     */\n    public get fill(): FillStyle\n    {\n        return this._fillStyle;\n    }\n\n    /**\n     * The current line style.\n     *\n     * @member {PIXI.LineStyle}\n     * @readonly\n     */\n    public get line(): LineStyle\n    {\n        return this._lineStyle;\n    }\n\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     *\n     * @param {number} [width=0] - width of the line to draw, will update the objects stored style\n     * @param {number} [color=0x0] - color of the line to draw, will update the objects stored style\n     * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {number} [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n     *        WebGL only.\n     * @param {boolean} [native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public lineStyle(width: number, color?: number, alpha?: number, alignment?: number, native?: boolean): this;\n\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     *\n     * @param {object} [options] - Line style options\n     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style\n     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n     *        WebGL only.\n     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n     * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n     * @param {number}[options.miterLimit=10] - miter limit ratio\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public lineStyle(options?: ILineStyleOptions): this;\n\n    public lineStyle(options: ILineStyleOptions | number = null,\n        color = 0x0, alpha = 1, alignment = 0.5, native = false): this\n    {\n        // Support non-object params: (width, color, alpha, alignment, native)\n        if (typeof options === 'number')\n        {\n            options = { width: options, color, alpha, alignment, native } as ILineStyleOptions;\n        }\n\n        return this.lineTextureStyle(options);\n    }\n\n    /**\n     * Like line style but support texture for line fill.\n     *\n     * @param {object} [options] - Collection of options for setting line style.\n     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to use\n     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style.\n     *  Default 0xFFFFFF if texture present.\n     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {PIXI.Matrix} [options.matrix=null] - Texture matrix to transform texture\n     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n     *        WebGL only.\n     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n     * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n     * @param {number}[options.miterLimit=10] - miter limit ratio\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public lineTextureStyle(options: ILineStyleOptions): this\n    {\n        // Apply defaults\n        options = Object.assign({\n            width: 0,\n            texture: Texture.WHITE,\n            color: (options && options.texture) ? 0xFFFFFF : 0x0,\n            alpha: 1,\n            matrix: null,\n            alignment: 0.5,\n            native: false,\n            cap: LINE_CAP.BUTT,\n            join: LINE_JOIN.MITER,\n            miterLimit: 10,\n        }, options);\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.width > 0 && options.alpha > 0;\n\n        if (!visible)\n        {\n            this._lineStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._lineStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n    /**\n     * Start a polygon object internally\n     * @protected\n     */\n    protected startPoly(): void\n    {\n        if (this.currentPath)\n        {\n            const points = this.currentPath.points;\n            const len = this.currentPath.points.length;\n\n            if (len > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = new Polygon();\n                this.currentPath.closeStroke = false;\n                this.currentPath.points.push(points[len - 2], points[len - 1]);\n            }\n        }\n        else\n        {\n            this.currentPath = new Polygon();\n            this.currentPath.closeStroke = false;\n        }\n    }\n\n    /**\n     * Finish the polygon object.\n     * @protected\n     */\n    finishPoly(): void\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = null;\n            }\n            else\n            {\n                this.currentPath.points.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Moves the current drawing position to x, y.\n     *\n     * @param {number} x - the X coordinate to move to\n     * @param {number} y - the Y coordinate to move to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public moveTo(x: number, y: number): this\n    {\n        this.startPoly();\n        this.currentPath.points[0] = x;\n        this.currentPath.points[1] = y;\n\n        return this;\n    }\n\n    /**\n     * Draws a line using the current line style from the current drawing position to (x, y);\n     * The current drawing position is then set to (x, y).\n     *\n     * @param {number} x - the X coordinate to draw to\n     * @param {number} y - the Y coordinate to draw to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public lineTo(x: number, y: number): this\n    {\n        if (!this.currentPath)\n        {\n            this.moveTo(0, 0);\n        }\n\n        // remove duplicates..\n        const points = this.currentPath.points;\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        if (fromX !== x || fromY !== y)\n        {\n            points.push(x, y);\n        }\n\n        return this;\n    }\n\n    /**\n     * Initialize the curve\n     *\n     * @protected\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     */\n    protected _initCurve(x = 0, y = 0): void\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length === 0)\n            {\n                this.currentPath.points = [x, y];\n            }\n        }\n        else\n        {\n            this.moveTo(x, y);\n        }\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public quadraticCurveTo(cpX: number, cpY: number, toX: number, toY: number): this\n    {\n        this._initCurve();\n\n        const points = this.currentPath.points;\n\n        if (points.length === 0)\n        {\n            this.moveTo(0, 0);\n        }\n\n        QuadraticUtils.curveTo(cpX, cpY, toX, toY, points);\n\n        return this;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public bezierCurveTo(cpX: number, cpY: number, cpX2: number, cpY2: number, toX: number, toY: number): this\n    {\n        this._initCurve();\n\n        BezierUtils.curveTo(cpX, cpY, cpX2, cpY2, toX, toY, this.currentPath.points);\n\n        return this;\n    }\n\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     *\n     * @param {number} x1 - The x-coordinate of the first tangent point of the arc\n     * @param {number} y1 - The y-coordinate of the first tangent point of the arc\n     * @param {number} x2 - The x-coordinate of the end of the arc\n     * @param {number} y2 - The y-coordinate of the end of the arc\n     * @param {number} radius - The radius of the arc\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this\n    {\n        this._initCurve(x1, y1);\n\n        const points = this.currentPath.points;\n\n        const result = ArcUtils.curveTo(x1, y1, x2, y2, radius, points);\n\n        if (result)\n        {\n            const { cx, cy, radius, startAngle, endAngle, anticlockwise } = result;\n\n            this.arc(cx, cy, radius, startAngle, endAngle, anticlockwise);\n        }\n\n        return this;\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     *\n     * @param {number} cx - The x-coordinate of the center of the circle\n     * @param {number} cy - The y-coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param {number} endAngle - The ending angle, in radians\n     * @param {boolean} [anticlockwise=false] - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public arc(cx: number, cy: number, radius: number, startAngle: number, endAngle: number, anticlockwise = false): this\n    {\n        if (startAngle === endAngle)\n        {\n            return this;\n        }\n\n        if (!anticlockwise && endAngle <= startAngle)\n        {\n            endAngle += PI_2;\n        }\n        else if (anticlockwise && startAngle <= endAngle)\n        {\n            startAngle += PI_2;\n        }\n\n        const sweep = endAngle - startAngle;\n\n        if (sweep === 0)\n        {\n            return this;\n        }\n\n        const startX = cx + (Math.cos(startAngle) * radius);\n        const startY = cy + (Math.sin(startAngle) * radius);\n        const eps = this._geometry.closePointEps;\n\n        // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n        let points = this.currentPath ? this.currentPath.points : null;\n\n        if (points)\n        {\n            // TODO: make a better fix.\n\n            // We check how far our start is from the last existing point\n            const xDiff = Math.abs(points[points.length - 2] - startX);\n            const yDiff = Math.abs(points[points.length - 1] - startY);\n\n            if (xDiff < eps && yDiff < eps)\n            {\n                // If the point is very close, we don't add it, since this would lead to artifacts\n                // during tessellation due to floating point imprecision.\n            }\n            else\n            {\n                points.push(startX, startY);\n            }\n        }\n        else\n        {\n            this.moveTo(startX, startY);\n            points = this.currentPath.points;\n        }\n\n        ArcUtils.arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points);\n\n        return this;\n    }\n\n    /**\n     * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n     * (such as lineTo() or drawCircle()) use when drawing.\n     *\n     * @param {number} [color=0] - the color of the fill\n     * @param {number} [alpha=1] - the alpha of the fill\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public beginFill(color = 0, alpha = 1): this\n    {\n        return this.beginTextureFill({ texture: Texture.WHITE, color, alpha });\n    }\n\n    /**\n     * Begin the texture fill\n     *\n     * @param {object} [options] - Object object.\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to fill\n     * @param {number} [options.color=0xffffff] - Background to fill behind texture\n     * @param {number} [options.alpha=1] - Alpha of fill\n     * @param {PIXI.Matrix} [options.matrix=null] - Transform matrix\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    beginTextureFill(options?: IFillStyleOptions): this\n    {\n        // Apply defaults\n        options = Object.assign({\n            texture: Texture.WHITE,\n            color: 0xFFFFFF,\n            alpha: 1,\n            matrix: null,\n        }, options) as IFillStyleOptions;\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.alpha > 0;\n\n        if (!visible)\n        {\n            this._fillStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._fillStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n    /**\n     * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public endFill(): this\n    {\n        this.finishPoly();\n\n        this._fillStyle.reset();\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle shape.\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public drawRect(x: number, y: number, width: number, height: number): this\n    {\n        return this.drawShape(new Rectangle(x, y, width, height));\n    }\n\n    /**\n     * Draw a rectangle shape with rounded/beveled corners.\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @param {number} radius - Radius of the rectangle corners\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public drawRoundedRect(x: number, y: number, width: number, height: number, radius: number): this\n    {\n        return this.drawShape(new RoundedRectangle(x, y, width, height, radius));\n    }\n\n    /**\n     * Draws a circle.\n     *\n     * @param {number} x - The X coordinate of the center of the circle\n     * @param {number} y - The Y coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public drawCircle(x: number, y: number, radius: number): this\n    {\n        return this.drawShape(new Circle(x, y, radius));\n    }\n\n    /**\n     * Draws an ellipse.\n     *\n     * @param {number} x - The X coordinate of the center of the ellipse\n     * @param {number} y - The Y coordinate of the center of the ellipse\n     * @param {number} width - The half width of the ellipse\n     * @param {number} height - The half height of the ellipse\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public drawEllipse(x: number, y: number, width: number, height: number): this\n    {\n        return this.drawShape(new Ellipse(x, y, width, height));\n    }\n\n    public drawPolygon(...path: Array<number> | Array<Point>): this\n    public drawPolygon(path: Array<number> | Array<Point> | Polygon): this\n\n    /**\n     * Draws a polygon using the given path.\n     *\n     * @param {number[]|PIXI.Point[]|PIXI.Polygon} path - The path data used to construct the polygon.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public drawPolygon(...path: any[]): this\n    {\n        let points: Array<number> | Array<Point>;\n        let closeStroke = true;// !!this._fillStyle;\n\n        const poly = path[0] as Polygon;\n\n        // check if data has points..\n        if (poly.points)\n        {\n            closeStroke = poly.closeStroke;\n            points = poly.points;\n        }\n        else\n        if (Array.isArray(path[0]))\n        {\n            points = path[0];\n        }\n        else\n        {\n            points = path;\n        }\n\n        const shape = new Polygon(points);\n\n        shape.closeStroke = closeStroke;\n\n        this.drawShape(shape);\n\n        return this;\n    }\n\n    /**\n     * Draw any shape.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - Shape to draw\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public drawShape(shape: IShape): this\n    {\n        if (!this._holeMode)\n        {\n            this._geometry.drawShape(\n                shape,\n                this._fillStyle.clone(),\n                this._lineStyle.clone(),\n                this._matrix\n            );\n        }\n        else\n        {\n            this._geometry.drawHole(shape, this._matrix);\n        }\n\n        return this;\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public clear(): this\n    {\n        this._geometry.clear();\n        this._lineStyle.reset();\n        this._fillStyle.reset();\n\n        this._boundsID++;\n        this._matrix = null;\n        this._holeMode = false;\n        this.currentPath = null;\n\n        return this;\n    }\n\n    /**\n     * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n     * masked with gl.scissor.\n     *\n     * @returns {boolean} True if only 1 rect.\n     */\n    public isFastRect(): boolean\n    {\n        const data = this._geometry.graphicsData;\n\n        return data.length === 1\n            && data[0].shape.type === SHAPES.RECT\n            && !data[0].holes.length\n            && !(data[0].lineStyle.visible && data[0].lineStyle.width);\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        this.finishPoly();\n\n        const geometry = this._geometry;\n        const hasuint32 = renderer.context.supports.uint32Indices;\n        // batch part..\n        // batch it!\n\n        geometry.updateBatches(hasuint32);\n\n        if (geometry.batchable)\n        {\n            if (this.batchDirty !== geometry.batchDirty)\n            {\n                this._populateBatches();\n            }\n\n            this._renderBatched(renderer);\n        }\n        else\n        {\n            // no batching...\n            renderer.batch.flush();\n\n            this._renderDirect(renderer);\n        }\n    }\n\n    /**\n     * Populating batches for rendering\n     *\n     * @protected\n     */\n    protected _populateBatches(): void\n    {\n        const geometry = this._geometry;\n        const blendMode = this.blendMode;\n        const len = geometry.batches.length;\n\n        this.batchTint = -1;\n        this._transformID = -1;\n        this.batchDirty = geometry.batchDirty;\n        this.batches.length = len;\n\n        this.vertexData = new Float32Array(geometry.points);\n\n        for (let i = 0; i < len; i++)\n        {\n            const gI = geometry.batches[i];\n            const color = gI.style.color;\n            const vertexData = new Float32Array(this.vertexData.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const uvs = new Float32Array(geometry.uvsFloat32.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const indices = new Uint16Array(geometry.indicesUint16.buffer,\n                gI.start * 2,\n                gI.size);\n\n            const batch = {\n                vertexData,\n                blendMode,\n                indices,\n                uvs,\n                _batchRGB: hex2rgb(color) as Array<number>,\n                _tintRGB: color,\n                _texture: gI.style.texture,\n                alpha: gI.style.alpha,\n                worldAlpha: 1 };\n\n            this.batches[i] = batch;\n        }\n    }\n\n    /**\n     * Renders the batches using the BathedRenderer plugin\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _renderBatched(renderer: Renderer): void\n    {\n        if (!this.batches.length)\n        {\n            return;\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n\n        this.calculateVertices();\n        this.calculateTints();\n\n        for (let i = 0, l = this.batches.length; i < l; i++)\n        {\n            const batch = this.batches[i];\n\n            batch.worldAlpha = this.worldAlpha * batch.alpha;\n\n            renderer.plugins[this.pluginName].render(batch);\n        }\n    }\n\n    /**\n     * Renders the graphics direct\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _renderDirect(renderer: Renderer): void\n    {\n        const shader = this._resolveDirectShader(renderer);\n\n        const geometry = this._geometry;\n        const tint = this.tint;\n        const worldAlpha = this.worldAlpha;\n        const uniforms = shader.uniforms;\n        const drawCalls = geometry.drawCalls;\n\n        // lets set the transfomr\n        uniforms.translationMatrix = this.transform.worldTransform;\n\n        // and then lets set the tint..\n        uniforms.tint[0] = (((tint >> 16) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[1] = (((tint >> 8) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[2] = ((tint & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[3] = worldAlpha;\n\n        // the first draw call, we can set the uniforms of the shader directly here.\n\n        // this means that we can tack advantage of the sync function of pixi!\n        // bind and sync uniforms..\n        // there is a way to optimise this..\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(geometry, shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // then render the rest of them...\n        for (let i = 0, l = drawCalls.length; i < l; i++)\n        {\n            this._renderDrawCallDirect(renderer, geometry.drawCalls[i]);\n        }\n    }\n\n    /**\n     * Renders specific DrawCall\n     *\n     * @param {PIXI.Renderer} renderer\n     * @param {PIXI.BatchDrawCall} drawCall\n     */\n    protected _renderDrawCallDirect(renderer: Renderer, drawCall: BatchDrawCall): void\n    {\n        const { texArray, type, size, start } = drawCall;\n        const groupTextureCount = texArray.count;\n\n        for (let j = 0; j < groupTextureCount; j++)\n        {\n            renderer.texture.bind(texArray.elements[j], j);\n        }\n\n        renderer.geometry.draw(type, size, start);\n    }\n\n    /**\n     * Resolves shader for direct rendering\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _resolveDirectShader(renderer: Renderer): Shader\n    {\n        let shader = this.shader;\n\n        const pluginName = this.pluginName;\n\n        if (!shader)\n        {\n            // if there is no shader here, we can use the default shader.\n            // and that only gets created if we actually need it..\n            // but may be more than one plugins for graphics\n            if (!DEFAULT_SHADERS[pluginName])\n            {\n                const MAX_TEXTURES = renderer.plugins.batch.MAX_TEXTURES;\n                const sampleValues = new Int32Array(MAX_TEXTURES);\n\n                for (let i = 0; i < MAX_TEXTURES; i++)\n                {\n                    sampleValues[i] = i;\n                }\n\n                const uniforms = {\n                    tint: new Float32Array([1, 1, 1, 1]),\n                    translationMatrix: new Matrix(),\n                    default: UniformGroup.from({ uSamplers: sampleValues }, true),\n                };\n\n                const program = renderer.plugins[pluginName]._shader.program;\n\n                DEFAULT_SHADERS[pluginName] = new Shader(program, uniforms);\n            }\n\n            shader = DEFAULT_SHADERS[pluginName];\n        }\n\n        return shader;\n    }\n\n    /**\n     * Retrieves the bounds of the graphic shape as a rectangle object\n     *\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        this.finishPoly();\n\n        const geometry = this._geometry;\n\n        // skipping when graphics is empty, like a container\n        if (!geometry.graphicsData.length)\n        {\n            return;\n        }\n\n        const { minX, minY, maxX, maxY } = geometry.bounds;\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /**\n     * Tests if a point is inside this graphics object\n     *\n     * @param {PIXI.IPointData} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, Graphics._TEMP_POINT);\n\n        return this._geometry.containsPoint(Graphics._TEMP_POINT);\n    }\n\n    /**\n     * Recalculate the tint by applying tint to batches using Graphics tint.\n     * @protected\n     */\n    protected calculateTints(): void\n    {\n        if (this.batchTint !== this.tint)\n        {\n            this.batchTint = this.tint;\n\n            const tintRGB = hex2rgb(this.tint, temp);\n\n            for (let i = 0; i < this.batches.length; i++)\n            {\n                const batch = this.batches[i];\n\n                const batchTint = batch._batchRGB;\n\n                const r = (tintRGB[0] * batchTint[0]) * 255;\n                const g = (tintRGB[1] * batchTint[1]) * 255;\n                const b = (tintRGB[2] * batchTint[2]) * 255;\n\n                // TODO Ivan, can this be done in one go?\n                const color = (r << 16) + (g << 8) + (b | 0);\n\n                batch._tintRGB = (color >> 16)\n                        + (color & 0xff00)\n                        + ((color & 0xff) << 16);\n            }\n        }\n    }\n\n    /**\n     * If there's a transform update or a change to the shape of the\n     * geometry, recalculate the vertices.\n     * @protected\n     */\n    protected calculateVertices(): void\n    {\n        const wtID = this.transform._worldID;\n\n        if (this._transformID === wtID)\n        {\n            return;\n        }\n\n        this._transformID = wtID;\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const data = this._geometry.points;// batch.vertexDataOriginal;\n        const vertexData = this.vertexData;\n\n        let count = 0;\n\n        for (let i = 0; i < data.length; i += 2)\n        {\n            const x = data[i];\n            const y = data[i + 1];\n\n            vertexData[count++] = (a * x) + (c * y) + tx;\n            vertexData[count++] = (d * y) + (b * x) + ty;\n        }\n    }\n\n    /**\n     * Closes the current path.\n     *\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    public closePath(): this\n    {\n        const currentPath = this.currentPath;\n\n        if (currentPath)\n        {\n            // we don't need to add extra point in the end because buildLine will take care of that\n            currentPath.closeStroke = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * Apply a matrix to the positional data.\n     *\n     * @param {PIXI.Matrix} matrix - Matrix to use for transform current shape.\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    public setMatrix(matrix: Matrix): this\n    {\n        this._matrix = matrix;\n\n        return this;\n    }\n\n    /**\n     * Begin adding holes to the last draw shape\n     * IMPORTANT: holes must be fully inside a shape to work\n     * Also weirdness ensues if holes overlap!\n     * Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\n     * please use `moveTo` `lineTo`, `quadraticCurveTo` if you rely on pixi-legacy bundle.\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    public beginHole(): this\n    {\n        this.finishPoly();\n        this._holeMode = true;\n\n        return this;\n    }\n\n    /**\n     * End adding holes to the last draw shape\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    public endHole(): this\n    {\n        this.finishPoly();\n        this._holeMode = false;\n\n        return this;\n    }\n\n    /**\n     * Destroys the Graphics object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        this._geometry.refCount--;\n        if (this._geometry.refCount === 0)\n        {\n            this._geometry.dispose();\n        }\n\n        this._matrix = null;\n        this.currentPath = null;\n        this._lineStyle.destroy();\n        this._lineStyle = null;\n        this._fillStyle.destroy();\n        this._fillStyle = null;\n        this._geometry = null;\n        this.shader = null;\n        this.vertexData = null;\n        this.batches.length = 0;\n        this.batches = null;\n\n        super.destroy(options);\n    }\n}\n","export * from './const';\nexport * from './styles/FillStyle';\nexport * from './Graphics';\nexport * from './GraphicsData';\nexport * from './GraphicsGeometry';\nexport * from './styles/LineStyle';\n\nimport {\n    buildPoly,\n    buildCircle,\n    buildRectangle,\n    buildRoundedRectangle,\n    buildLine,\n    ArcUtils,\n    BezierUtils,\n    QuadraticUtils,\n    BatchPart,\n    FILL_COMMANDS,\n    BATCH_POOL,\n    DRAW_CALL_POOL\n} from './utils';\nimport type { BatchDrawCall } from '@pixi/core/';\nimport type { IShapeBuildCommand } from './utils/IShapeBuildCommand';\nimport type { SHAPES } from '@pixi/math';\n\nexport const graphicsUtils = {\n    buildPoly: buildPoly as IShapeBuildCommand,\n    buildCircle: buildCircle as IShapeBuildCommand,\n    buildRectangle: buildRectangle as IShapeBuildCommand,\n    buildRoundedRectangle: buildRoundedRectangle as IShapeBuildCommand,\n    buildLine,\n    ArcUtils,\n    BezierUtils,\n    QuadraticUtils,\n    BatchPart,\n    FILL_COMMANDS: FILL_COMMANDS as Record<SHAPES, IShapeBuildCommand>,\n    BATCH_POOL: BATCH_POOL as Array<BatchPart>,\n    DRAW_CALL_POOL: DRAW_CALL_POOL as Array<BatchDrawCall>\n};\n"]},"metadata":{},"sourceType":"module"}