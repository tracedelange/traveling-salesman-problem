{"ast":null,"code":"var _jsxFileName = \"/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/components/MainStage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport { Stage, Layer, Rect, Text, Circle, Line } from 'react-konva';\nimport City from './City';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MainStage = ({\n  handleStageClick,\n  cities\n}) => {\n  _s();\n\n  const [lines, setLines] = useState([]);\n\n  const handleClick = e => {\n    //call handle stage click and add a line\n    handleStageClick(e);\n    let starting = cities[cities.length - 1];\n    console.log(starting);\n    let newLine = {\n      points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n      stroke: 'red'\n    };\n    setLines([...lines, newLine]);\n  };\n\n  const cityArray = cities.map(item => /*#__PURE__*/_jsxDEV(City, {\n    data: item\n  }, item.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 44\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: window.innerWidth,\n    height: window.innerHeight - window.innerHeight * .05,\n    onClick: handleClick,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: cityArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MainStage, \"KjQvnv/0TE17f2Vv5pQIGFQt6/w=\");\n\n_c = MainStage;\nexport default MainStage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainStage\");","map":{"version":3,"sources":["/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/components/MainStage.js"],"names":["React","useState","useEffect","render","Stage","Layer","Rect","Text","Circle","Line","City","v4","uuidv4","MainStage","handleStageClick","cities","lines","setLines","handleClick","e","starting","length","console","log","newLine","points","x","y","evt","offsetX","offsetY","stroke","cityArray","map","item","key","window","innerWidth","innerHeight"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,MAAnC,EAA2CC,IAA3C,QAAuD,aAAvD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;;AAGA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,gBAAD;AAAmBC,EAAAA;AAAnB,CAAD,KAAgC;AAAA;;AAE9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMiB,WAAW,GAAIC,CAAD,IAAO;AACvB;AACAL,IAAAA,gBAAgB,CAACK,CAAD,CAAhB;AACA,QAAIC,QAAQ,GAAGL,MAAM,CAACA,MAAM,CAACM,MAAP,GAAc,CAAf,CAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,QAAII,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAE,CAACL,QAAQ,CAACM,CAAV,EAAaN,QAAQ,CAACO,CAAtB,EAAyBR,CAAC,CAACS,GAAF,CAAMC,OAA/B,EAAwCV,CAAC,CAACS,GAAF,CAAME,OAA9C,CADE;AAEVC,MAAAA,MAAM,EAAE;AAFE,KAAd;AAKAd,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWQ,OAAX,CAAD,CAAR;AACH,GAXD;;AAgBA,QAAMQ,SAAS,GAAGjB,MAAM,CAACkB,GAAP,CAAYC,IAAD,iBAAU,QAAC,IAAD;AAAqB,IAAA,IAAI,EAAEA;AAA3B,KAAWA,IAAI,CAACC,GAAhB;AAAA;AAAA;AAAA;AAAA,UAArB,CAAlB;AAEA,sBACI,QAAC,KAAD;AAAO,IAAA,KAAK,EAAEC,MAAM,CAACC,UAArB;AAAiC,IAAA,MAAM,EAAGD,MAAM,CAACE,WAAR,GAAyBF,MAAM,CAACE,WAAR,GAAqB,GAAtF;AAA4F,IAAA,OAAO,EAAEpB,WAArG;AAAA,2BACI,QAAC,KAAD;AAAA,gBACKc;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA7BD;;GAAMnB,S;;KAAAA,S;AA+BN,eAAeA,SAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { render } from 'react-dom';\nimport { Stage, Layer, Rect, Text, Circle, Line } from 'react-konva';\nimport City from './City'\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst MainStage = ({handleStageClick, cities}) => {\n\n    const [lines, setLines] = useState([])\n\n    const handleClick = (e) => {\n        //call handle stage click and add a line\n        handleStageClick(e)\n        let starting = cities[cities.length-1]\n        console.log(starting)\n        let newLine = {\n            points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n            stroke: 'red'\n        }\n\n        setLines([...lines, newLine])\n    }\n\n\n    \n\n    const cityArray = cities.map((item) => <City key={item.key} data={item}/>)\n\n    return (\n        <Stage width={window.innerWidth} height={(window.innerHeight) - ((window.innerHeight)*.05)} onClick={handleClick}>\n            <Layer>\n                {cityArray}\n            </Layer>\n        </Stage>\n    );\n}\n\nexport default MainStage\n"]},"metadata":{},"sourceType":"module"}