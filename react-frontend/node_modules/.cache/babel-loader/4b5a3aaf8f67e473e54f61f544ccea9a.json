{"ast":null,"code":"var _jsxFileName = \"/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport MainStage from './components/MainStage';\nimport Header from './components/Header';\nimport InfoWindow from './components/InfoWindow';\nimport { v4 as uuidv4 } from 'uuid';\nimport { shuffle } from './shuffle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction rFact(num) {\n  if (num === 0) {\n    return 1;\n  } else {\n    return num * rFact(num - 1);\n  }\n}\n\nfunction getCount(num) {\n  if (num === 0) {\n    return 0;\n  } else if (num === 1) {\n    return 1;\n  } else if (num === 2) {\n    return 1;\n  } else {\n    return rFact(num - 1) / 2;\n  }\n}\n\nfunction App() {\n  _s();\n\n  const [lines, setLines] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [randSol, setRandSol] = useState([]);\n  const [lastLine, setLastLine] = useState(null);\n\n  const handleClearClick = () => {\n    setCities([]);\n  };\n\n  const handleGenClick = () => {\n    let newSol = cities.map(item => {\n      return item.x, item.y;\n    });\n    console.log(newSol); // shuffle(citiesShuffled)\n    // console.log(citiesShuffled)\n    // console.log(cities)\n    // \n  };\n\n  const handleStageClick = e => {\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n    const newCity = {\n      key: uuidv4(),\n      name: uuidv4(),\n      x: e.evt.offsetX,\n      y: e.evt.offsetY,\n      fill: `rgb(${r},${g},${b})`\n    };\n    setCities(() => [...cities, newCity]);\n    let starting = cities[cities.length - 1];\n    console.log(cities.length);\n\n    if (cities.length !== 0) {\n      let newLine = {\n        key: uuidv4(),\n        startName: starting.name,\n        points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n        stroke: 'red'\n      };\n\n      if (cities.length >= 2) {\n        let first = cities[0];\n        let newLastLine = {\n          key: uuidv4(),\n          points: [first.x, first.y, e.evt.offsetX, e.evt.offsetY],\n          stroke: 'red'\n        };\n        setLastLine(newLastLine);\n      }\n\n      setLines([...lines, newLine]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      handleClearClick: handleClearClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoWindow, {\n      handleGenClick: handleGenClick,\n      cities: cities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainStage, {\n      handleStageClick: handleStageClick,\n      cities: cities,\n      lines: lines,\n      lastLine: lastLine\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pJlAtVQbNZ+5nVpvgkhSt+Lc7P8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tracedelange/dev/code/project-mode/tsp-interactive/src/App.js"],"names":["useState","useEffect","MainStage","Header","InfoWindow","v4","uuidv4","shuffle","rFact","num","getCount","App","lines","setLines","cities","setCities","randSol","setRandSol","lastLine","setLastLine","handleClearClick","handleGenClick","newSol","map","item","x","y","console","log","handleStageClick","e","r","Math","floor","random","g","b","newCity","key","name","evt","offsetX","offsetY","fill","starting","length","newLine","startName","points","stroke","first","newLastLine"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport MainStage from './components/MainStage'\nimport Header from './components/Header'\nimport InfoWindow from './components/InfoWindow'\nimport { v4 as uuidv4 } from 'uuid';\nimport {shuffle} from './shuffle'\n\nfunction rFact(num) {\n  if (num === 0) { return 1; }\n  else { return num * rFact(num - 1); }\n}\n\nfunction getCount(num) {\n  if (num === 0) {\n    return 0\n  } else if (num === 1) {\n    return 1\n  } else if (num === 2) {\n    return 1\n  } else {\n    return (rFact(num - 1)) / 2\n  }\n}\n\nfunction App() {\n\n  const [lines, setLines] = useState([])\n  const [cities, setCities] = useState([])\n\n  const [randSol, setRandSol] = useState([])\n\n  const [lastLine, setLastLine] = useState(null)\n\n  const handleClearClick = () => {\n\n    setCities([])\n\n  }\n\n\n  const handleGenClick = () => {\n\n    let newSol = cities.map((item) => {\n      return item.x, item.y\n    })\n\n    console.log(newSol)\n    // shuffle(citiesShuffled)\n\n    // console.log(citiesShuffled)\n\n    // console.log(cities)\n// \n  }\n\n\n  const handleStageClick = (e) => {\n\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n\n    \n    const newCity = {\n      key: uuidv4(),\n      name: uuidv4(),\n      x: e.evt.offsetX,\n      y: e.evt.offsetY,\n      fill: `rgb(${r},${g},${b})`,\n    }\n    setCities(() => [...cities, newCity])\n\n\n    let starting = cities[cities.length-1]\n\n    console.log(cities.length)\n\n    if (cities.length !== 0) {\n\n      let newLine = {\n        key: uuidv4(),\n        startName: starting.name,\n        points: [starting.x, starting.y, e.evt.offsetX, e.evt.offsetY],\n        stroke: 'red'\n      } \n\n      if (cities.length >= 2) {\n\n        let first = cities[0]\n\n        let newLastLine = {\n          key: uuidv4(),\n          points: [first.x, first.y, e.evt.offsetX, e.evt.offsetY],\n          stroke: 'red'\n        }\n\n        setLastLine(newLastLine)\n\n      }\n\n      setLines([...lines, newLine])\n    } \n\n\n  }\n\n\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <Header handleClearClick={handleClearClick} />\n      <InfoWindow handleGenClick={handleGenClick} cities={cities} />\n      <MainStage handleStageClick={handleStageClick} cities={cities} lines={lines} lastLine={lastLine}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}